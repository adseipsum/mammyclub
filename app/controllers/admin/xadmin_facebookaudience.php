<?php if (!defined("BASEPATH")) exit("No direct script access allowed");
/**
 * xAdmin_FacebookAudience
 * This class has been auto-generated by Itirra
 */
require_once APPPATH . 'controllers/admin/base/base_admin_controller.php';
class xAdmin_FacebookAudience extends Base_Admin_Controller {

  /** SearchParams. */
  protected $searchParams = array("name");

	/** $jsonOptions. */
  protected $jsonOptions = array("newsletter" => "",
		                             "newsletter_first_year" => "",
		                             "site_order.paid" => "",
		                             "complete_status_date" => "",
		                             "total_with_discount" => "",
		                             "is_read" => "",
		                             "is_read_range" => "",
															   "age_of_child" => "",
	                               "pregnancyweek_current.number" => "");
	
  /** $postData. */
  protected $postData = array();

	/** $filtersToJson. */
	protected $filtersToJson = array();

  /** $filterType. */
  protected $filterType = '';

  /** $communicationType. */
  protected $communicationType = '';


	/**
	 * setViewParamsIndex
	 * @param  $entities
	 * @param  $pager
	 * @param  $hasSidebar
	 */
	protected function setViewParamsIndex(&$entities, &$pager, $hasSidebar) {
		$aaOptions = $this->fields['act_account']['options'];
		foreach ($entities as &$e) {
			$e['act_account'] = isset($aaOptions[$e['act_account']]) ? $aaOptions[$e['act_account']] : null;
		}
		parent::setViewParamsIndex($entities, $pager, $hasSidebar); 
	}


	/**
	 * CreateEntityPOST.
	 * Prepares POST.
	 * Creates Entity From Post.
	 * Validates Entity.
	 * @return Object
	 */
	protected function createEntityPOST() {
		if (!empty($_POST)) {

		  $this->filterType = $_POST['filter_type'];

		  $this->communicationType = $_POST['communication_type'];

			foreach ($_POST as $key => $val) {
				if ($key == 'pregnancyweek_current_number_from' || $key == 'pregnancyweek_current_number_to'){
					$key = str_replace('current_', 'current.', $key);
				}
				if ($key == 'site_order_paid') {
					$key = str_replace('order_', 'order.', $key);
				}
				if ($key == 'is_read_range') {
					$key = str_replace('range_', 'range.', $key);
				}
				if ($val === '') continue; {
					$this->postData[$key] = $val;
				}
			}
//			if (isset($this->postData['is_read']) && empty($this->postData['is_read']) && $this->postData['is_read'] == 0) {
//				unset($this->postData['is_read_range_from']);
//				unset($this->postData['is_read_range_to']);
//			}
			if (!empty($_POST)) {
				foreach ($this->jsonOptions as $key => $val) {
					if (isset($this->postData[$key . '_from']) && isset($this->postData[$key . '_to'])) {
						$this->filtersToJson[$key . ' BETWEEN'] = $this->postData[$key . '_from'] . ' AND ' . $this->postData[$key . '_to'];
					} else {
						if (isset($this->postData[$key . '_from'])) {
							$this->filtersToJson[$key . ' >='] = $this->postData[$key . '_from'];
						}
						if (isset($this->postData[$key . '_to'])) {
							$this->filtersToJson[$key . ' <='] = $this->postData[$key . '_to'];
						}
					}
					if (isset($this->postData['newsletter'])) {
						$this->filtersToJson['newsletter'] = $this->postData['newsletter'];
					}
					if (isset($this->postData['newsletter_first_year'])) {
						$this->filtersToJson['newsletter_first_year'] = $this->postData['newsletter_first_year'];
					}
					if (isset($this->postData['site_order.paid'])) {
						$this->filtersToJson['site_order.paid'] = $this->postData['site_order.paid'];
					}
					if (isset($this->postData['is_read'])) {
						$this->filtersToJson['is_read'] = $this->postData['is_read'];
					}
					unset($this->postData[$key . '_from']);
					unset($this->postData[$key . '_to']);
					unset($this->postData[$key . 'BETWEEN']);
					unset($this->postData['newsletter']);
					unset($this->postData['is_read']);
					unset($this->postData['save_and_return_to_list']);
					unset($this->postData['site_order.paid']);
					unset($this->postData['filter_type']);
				}
       }
		}
		return parent::createEntityPOST();
	}

  /**
   * @param Object $entity
   * @return Object|void
   */
  protected function preSave(&$entity)
  {
    // Проверяем, изменился ли тип коммуникации, если да - записывааем преддыдущие значение в "previous_communication_type"
    $audidence = ManagerHolder::get('FacebookAudience')->getById($entity->id);
    $update = array();
    $update['communication_type'] = $audidence['communication_type'];
    $update['filter_type'] = $audidence['filter_type'];

    if (!empty($update)) {
      ManagerHolder::get('FacebookAudience')->updateById($entity->id, 'previous_communication_type', json_encode($update));
    }

    parent::preSave($entity);
  }


  /**
   * @param Object $entity
   * @return Object|void
   */
	protected function postSave(&$entity) {
		$entityArr = $entity->toArray();

		if ($this->filterType == 'user') {
      $phonesOrEmails = ManagerHolder::get('User')->getUserEmails($this->filtersToJson, $this->communicationType);
    } else {
      $phonesOrEmails = ManagerHolder::get('SiteOrder')->getEmailsFromSiteorder($this->filtersToJson, $this->communicationType);
    }


		// Where array to DB
		$data = array('filter_type' => $this->filterType,
		              'communication_type' => $this->communicationType,
		              'filters' => json_encode($this->filtersToJson),
									'act_account' => $this->postData['act_account'],
									'updating_date' => date(DOCTRINE_DATE_FORMAT),
									'email_qty' => count($phonesOrEmails),
									'can_deleted' => $this->postData['can_deleted']);
		ManagerHolder::get($this->managerName)->updateAllWhere(array('id' => $entityArr['id']), $data);

    // Create or update Custom Audiences for Facebook
		try {
			$this->load->library('FacebookSDK');
			if (empty($_POST['id'])){
				$externalID = $this->facebooksdk->addNewAudiences($this->postData['act_account'], $entityArr['name'], $entityArr['description'], $phonesOrEmails, $this->communicationType);
				ManagerHolder::get('FacebookAudience')->updateWhere(array('id' => $entityArr['id']), 'external_id', $externalID);
			} else {
				ManagerHolder::get($this->managerName)->updateUsersFromFacebookAudiences($entityArr['id'], $entityArr['name'], $entityArr['description'], $this->filterType, $this->communicationType);
			}
		} catch (Exception $e) {
			$message = 'Exception caught: ' . $e->getMessage();
			set_flash_error($message);
			log_message('error', $message);
			redirect_to_referral();
		}
	}


	/**
	 * SetAddEditDataAndShowView.
	 * Set all needed view data and show add_edit form.
	 * @param object $entity
	 */
	protected function setAddEditDataAndShowView($entity) {
		// Get filter values
		$filterValues = array();

    foreach ($this->jsonOptions as $key => $value) {

      if ($key !== 'complete_status_date' && $key !== 'total_with_discount') {
        $filterValues[$key] = ManagerHolder::get('User')->getFilterValues($key);
      } else {
        $filterValues[$key] = ManagerHolder::get('SiteOrder')->getFilterValues($key);
      }
		}
		// Get extended options from DB and set to view
		$currentFilters = ManagerHolder::get('FacebookAudience')->getDecodeJsonFilters($entity['id']);
		foreach ($this->jsonOptions as $key => $val) {
			if (isset($currentFilters[$key . ' BETWEEN'])) {
				preg_match(('/-?\d+/'), $currentFilters[$key . ' BETWEEN'],$rangeFrom);
				preg_match(('/ -?\d+/'), $currentFilters[$key . ' BETWEEN'],$rangeTo);
				$currentFilters[$key . '_from'] = $rangeFrom[0];
				$currentFilters[$key . '_to'] = $rangeTo[0];
			} else {
				if (isset($currentFilters[$key . ' >='])) {
					$currentFilters[$key . '_from'] = $currentFilters[$key . ' >='];
				}
				if (isset($currentFilters[$key . ' <='])) {
					$currentFilters[$key . '_to'] = $currentFilters[$key . ' <='];
				}
			}
		}
		$extendedtFilters = ManagerHolder::get($this->managerName)->getOneWhere(array('id' => $entity['id']),'e.*');
		$this->layout->set('currentFiltersDB', $currentFilters);
		$this->layout->set('extendedtFilters', $extendedtFilters);
		$this->layout->set('filters', $this->jsonOptions);
		$this->layout->set('filter_values', $filterValues);
		parent::setAddEditDataAndShowView($entity);
	}

	/**
	 * Delete.
	 * @param integer $entityId
	 */
	public function delete($entityId) {
		$audience = ManagerHolder::get('FacebookAudience')->getOneWhere(array('id' => $entityId),'e.*');
		if ($audience['can_deleted'] == 0){
			$this->load->library('FacebookSDK');
			$this->facebooksdk->deleteAudiences($audience['act_account'], $audience['external_id']);
		} else {
			set_flash_error('Запрещено удаление данной аудитории');
			redirect_to_referral();
		}
		parent::delete($entityId);

	}


}