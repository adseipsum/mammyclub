<?php if (!defined("BASEPATH")) exit("No direct script access allowed");
/**
 * xAdmin_XBroadcastTemplate
 * This class has been auto-generated by Itirra
 */
require_once APPPATH . 'controllers/admin/base/base_admin_controller.php';
class xAdmin_XBroadcastTemplate extends Base_Admin_Controller {

  /** Filters. */
  protected $filters = array("type.id" => "",
                             "is_enabled" => "");

  /** SearchParams. */
  protected $searchParams = array("name");

  /** $additionalItemActions. */
  protected $additionalItemActions = array('clone_entity', 'sections');

  /** $jsonFields */
  protected $jsonFields;

  /** $savedContentVariants */
  private $savedContentVariants;

  /**
   * clone_entity
   * @param int $entityId
   */
  public function clone_entity($entityId) {
    $this->checkPermissions("_add");
    $entity = ManagerHolder::get($this->managerName)->getById($entityId, 'e.*, products.*, sections.*');
    if (empty($entity)) {
      show_404();
    }

    unset($entity['id']);

    $entity['name'] = $entity['name'] . lang('clone.word');
    // Check for existing clones
    ManagerHolder::get($this->entityName)->setSearch($entity['name'], 'name', 'starts_with');
    $clones = ManagerHolder::get($this->entityName)->getAll('name');
    if(!empty($clones)) {
      $number = 1;
      foreach($clones as $clone) {
        if(preg_match("@" . lang('clone.word') . "([0-9]+)$@", $clone['name'], $matches)) {
          $n = $matches[1];
          if($n >= $number) {
            $number = $n + 1;
          }
        }
      }
      $entity['name'] .= $number;
    }

    if (!empty($entity['sections'])) {
      foreach ($entity['sections'] as $k => $v) {
        if ($v['soft_deleted'] == TRUE) {
          continue;
        }
        unset($v['id']);
        unset($v['template_id']);
        $entity['sections'][$k] = $v;
      }
    }

    if (!empty($entity['products'])) {
      foreach ($entity['products'] as $k => $v) {
        $entity['products'][$k] = $v['id'];
      }
    }

    $entity['is_enabled'] = false;
    $entity['last_processed'] = null;

    ManagerHolder::get($this->entityName)->insert($entity);

    set_flash_notice('admin.messages.xbroadcasttemplate.cloned');
    redirect_to_referral();
  }

  /**
   * sections
   * @param int $entityId
   */
  public function sections($entityId) {
    redirect(admin_site_url('xbroadcasttemplatesection?template.id=' . $entityId));
  }

  /**
   * Delete.
   * @param integer $entityId
   */
  public function delete($entityId) {
    $this->checkPermissions("_delete");
    $entity = ManagerHolder::get($this->managerName)->getById($entityId, 'id');
    if (empty($entity)) {
      show_404();
    }
    ManagerHolder::get($this->managerName)->updateById($entityId, 'soft_deleted', TRUE);
    set_flash_notice('admin.messages.' . strtolower($this->entityName) . '.delete');
    $this->redirectToReffer();
  }

  /**
   * View variant
   * @param int $entityId
   * @param int $variant
   */
  public function view_variant($entityId, $variant) {
    $entity = ManagerHolder::get($this->entityName)->getById($entityId, 'id,variants_count');
    if (empty($entity)) {
      show_404();
    }
    $this->load->library('BroadcastApp');
    $html = $this->broadcastapp->getTemplateVariantHtml($entityId, $variant);
    die($html);
  }

  /**
   * Delete variant
   * @param int $entityId
   * @param int $variant
   */
  public function delete_variant($entityId, $variant) {
    $addEditUrl = strtolower($this->entityName) . '/add_edit/' . $entityId;
    if (empty($variant)) {
      set_flash_error('invalid variant number');
      redirect(admin_site_url($addEditUrl));
    }
    $referrer = get_referrer();
    if (empty($referrer) || strpos($referrer, $addEditUrl) === FALSE) {
      set_flash_error('invalid referrer');
      redirect(admin_site_url($addEditUrl));
    }

    $what = 'id,variants_count';
    foreach ($this->jsonFields as $f => $params) {
      $what .= "," . $f;
    }
    $entity = ManagerHolder::get($this->entityName)->getById($entityId, $what);
    if (empty($entity)) {
      show_404();
    }

    foreach ($this->jsonFields as $f => $params) {
      if (strpos($f, '.') === FALSE) {
        $entity[$f] = $this->deleteJsonFieldDataByVariant($entity[$f], $variant);
      } else {
        list($alias, $field) = explode('.', $f);
        foreach ($entity[$alias] as $k => $data) {
          $entity[$alias][$k][$field] = $this->deleteJsonFieldDataByVariant($data[$field], $variant);
        }
      }
    }
    $entity['variants_count']--;

    $entity = ManagerHolder::get($this->entityName)->createEntityFromArray($entity);
    ManagerHolder::get($this->entityName)->update($entity);

    set_flash_notice('Вариант ' . ++$variant . ' успешно удален');
    redirect(admin_site_url($addEditUrl));
  }

  /**
   * CreateEntityId.
   * Creates Entity By Id;
   * @param integer $entityId
   * @return Object
   */
  protected function createEntityId($entityId = null) {
    $entity = new $this->managerName;
    $entity = $entity->toArray();
    $jsonFields = ManagerHolder::get($this->managerName)->jsonFields;
    if ($entityId) {
      $what = "id,variants_count";
      foreach ($this->fields as $k => $v) {
        if ($k == 'content_variants') {
          continue;
        }
        $what.= "," . $k;
      }
      foreach ($jsonFields as $field => $params) {
        if (strpos($field, '.') !== FALSE) {
          $field = strtok($field, '.') . '.*';
        }
        $what.= "," . $field;
      }
      ManagerHolder::get($this->managerName)->clearCacheGroup();
      $entity = ManagerHolder::get($this->managerName)->getById($entityId, $what);
      if (empty($entity)) {
        redirect($this->adminBaseRoute . '/' .  strtolower($this->entityUrlName));
      }
    }

    // Decode all jsonFields
    foreach ($jsonFields as $f => $params) {
      if (strpos($f, '.') === FALSE) {
        $entity[$f] = json_decode($entity[$f], TRUE);
      } else {
        list($alias, $field) = explode('.', $f);
        if (isset($entity[$alias])) {
          foreach ($entity[$alias] as $k => $v) {
            $entity[$alias][$k][$field] = json_decode($v[$field], TRUE);
          }
        }
      }
    }

    // Process content_variants
    $entity['content_variants'] = array();
    $entity['variants_count'] = !empty($entity['variants_count'])?$entity['variants_count']:1;
    for ($i = 0; $i < $entity['variants_count']; $i++) {
      foreach ($jsonFields as $f => $params) {
        if (strpos($f, '.') === FALSE) {
          $entity['content_variants'][$i][$f] = isset($entity[$f][$i])?$entity[$f][$i]:null;
          // Process products variants
          if ($f == 'products_variants') {
            $tempProducts = array();
            $entity['content_variants'][$i]['products_variants_from'] = array();
            if (!empty($entity['products'])) {
              foreach ($entity['products'] as $p) {
                if (!empty($entity['content_variants'][$i][$f]) && in_array($p['id'], $entity['content_variants'][$i][$f])) {
                  $tempProducts[] = $p;
                  continue;
                }
                $entity['content_variants'][$i]['products_variants_from'][$p['id']] = $p['name'];
              }
              $entity['content_variants'][$i][$f] = $tempProducts;
            }
          }
        } else {
          list($alias, $field) = explode('.', $f);
          $entity['content_variants'][$i][$alias] = array();
          if (!empty($entity[$alias])) {
            if (isset($entity[$alias][0]['priority'])) {
              $entity[$alias] = array_sort($entity[$alias], 'priority', SORT_DESC);
            }
            $processedData = array();
            foreach ($entity[$alias] as $ea) {
              if (!empty($ea[$field]) && isset($ea[$field][$i])) {
                $ea[$field] = $ea[$field][$i];
              } else {
                $ea[$field] = '';
              }
              $processedData[] = $ea;
            }
            $entity['content_variants'][$i][$alias] = $processedData;
          }
        }
      }
    }

    return $entity;
  }

  /**
   * CreateEntityPOST.
   * Prepares POST.
   * Creates Entity From Post.
   * Validates Entity.
   * @return Object
   */
  protected function createEntityPOST() {
    $this->savedContentVariants = !empty($_POST['content_variants']) ? $_POST['content_variants'] : NULL;
    unset($_POST['content_variants']);
    return parent::createEntityPOST();
  }

  /**
   * Implementation of POST_SAVE event callback
   * @param Object $entity reference
   * @return Object
   */
  protected function postSave(&$entity) {
    if (!empty($this->savedContentVariants)) {
      $updateArr = array();
      $updateArr['id'] = $entity['id'];
      foreach ($this->savedContentVariants as $key => $data) {
        foreach ($this->jsonFields as $f => $params) {
          if (strpos($f, '.') !== FALSE) {
            list($alias, $field) = explode('.', $f);
            if($key == $alias) {
              $updateArr[$key] = array();
              foreach ($data as $d) {
                $d[$field] = $this->jsonEncode($d[$field]);
                $updateArr[$key][] = $d;
              }
              // Hack for updating relations (ids should go in ASC order)
              if (isset($updateArr[$key][0]['id'])) {
                $updateArr[$key] = array_values(array_sort($updateArr[$key], 'id', SORT_ASC));
              }
            }
          } elseif ($key == $f) {
            if (!empty($_POST['save_and_add_new_variant'])) {
              $data[] = '';
            }
            if (isset($params['class']) && $params['class'] == 'required') {
              $updateArr['variants_count'] = count($data);
            }
            $updateArr[$key] = $this->jsonEncode($data);
          }
        }
      }
      ManagerHolder::get($this->entityName)->update($updateArr);
    }
  }

  /**
   * Get fields from manager.
   */
  protected function getFieldsFromManager() {
    $this->jsonFields = ManagerHolder::get($this->managerName)->jsonFields;
    parent::getFieldsFromManager();
  }

  /**
   * SetAddEditDataAndShowView.
   * Set all needed view data and show add_edit form.
   * @param object $entity
   */
  protected function setAddEditDataAndShowView($entity) {
    $this->layout->set("jsonFields", $this->jsonFields);
    parent::setAddEditDataAndShowView($entity);
  }

  /**
   * jsonEncode
   * @param array $data
   */
  private function jsonEncode($data) {
    return json_encode($data, JSON_UNESCAPED_UNICODE|JSON_FORCE_OBJECT);
  }

  /**
   * deleteJsonFieldDataByVariant
   * @param array $data
   * @param int $variant
   */
  private function deleteJsonFieldDataByVariant($data, $variant) {
    $data = json_decode($data, TRUE);
    unset($data[$variant]);
    return $this->jsonEncode(array_values($data));
  }

}