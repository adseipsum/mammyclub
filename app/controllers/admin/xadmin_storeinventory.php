<?php if (!defined("BASEPATH")) exit("No direct script access allowed");
/**
 * xAdmin_StoreInventory
 * This class has been auto-generated by Itirra
 */
require_once APPPATH . 'controllers/admin/base/base_admin_controller.php';
class xAdmin_StoreInventory extends Base_Admin_Controller {

  /** Filters. */
  protected $filters = array("product_brand" => "", "product_category" => "");

  /**
   * Index.
   * @param string $page
   */
  public function index($page = "") {
    if (empty($page)) {
      $page = pager_add_prefix(1);
    }

    $this->load->helper('project');
    // load config
    $this->load->config('retailer_file');
    $config = $this->config->item('retailer_file');

    $stores = ManagerHolder::get('Store')->getAsViewArray();
    $idCodeStoreMap = ManagerHolder::get('Store')->getAsViewArray(array(), array('code' => 'id'));
    $where = array();
    $where['published'] = TRUE;

    $activeStores = array();
    if (isset($_GET['product_brand']) && !empty($_GET['product_brand'])) {
      $where['brand_id'] = (int)$_GET['product_brand'];
      $activeStores = ManagerHolder::get('StoreProductBrand')->getAllWhere(array('product_brand_id' => $where['brand_id']), 'e.*');
      if (!empty($activeStores)) {
        $activeStores = get_array_vals_by_second_key($activeStores, 'store_id');
      }
    }
    if (isset($_GET['product_category']) && !empty($_GET['product_category'])) {
      $where['category_id'] = (int)$_GET['product_category'];
    }
    if (isset($_GET['store']) && !empty($_GET['store'])) {
      $where['inventories.store_id'] = array((int)$_GET['store'], ZAMMLER_STORE_ID);
      $where['inventories.qty>'] = 0;
    }

    // Search
    if (isset($_GET['q'])) {
      $search["search_string"] = trim($_GET['q']);
      if (!isset($search["search_type"])) {
        $search["search_type"] = $this->searchMode;
      }
      if (!isset($search["search_in"])) {
        $search["search_in"] = 'name,product_code';
      }
      ManagerHolder::get('Product')->setSearch($search["search_string"], $search["search_in"], $search["search_type"]);
      $this->layout->set("search", $search);
    }

    if (isset($_GET['no_bar_code']) && $_GET['no_bar_code'] == 1) {
      require_once APPPATH . "/libraries/common/MyPager.php";

      $perPage = 50;

      $noBarCodeWhere = $where;
      $noBarCodeWhere['parameter_groups.id<>'] = 'NULL';

      $noBarCodeWhere['parameter_groups.bar_code'] = NULL;
      $productsGroupNull = ManagerHolder::get('Product')->getAllWhere($noBarCodeWhere, 'e.*,parameter_groups.*,inventories.*,inventories_parser_setting.*,reserves.*');
      $noBarCodeWhere['parameter_groups.bar_code'] = '';
      $productsGroupEmpty = ManagerHolder::get('Product')->getAllWhere($noBarCodeWhere, 'e.*,parameter_groups.*,inventories.*,inventories_parser_setting.*,reserves.*');

      $noBarCodeWhere = $where;
      $noBarCodeWhere['parameter_groups.id'] = NULL;

      $noBarCodeWhere['bar_code'] = NULL;
      $productsNull = ManagerHolder::get('Product')->getAllWhere($noBarCodeWhere, 'e.*,parameter_groups.*,inventories.*,inventories_parser_setting.*,reserves.*');

      $noBarCodeWhere['bar_code'] = '';
      $productsEmpty = ManagerHolder::get('Product')->getAllWhere($noBarCodeWhere, 'e.*,parameter_groups.*,inventories.*,inventories_parser_setting.*,reserves.*');

      $products = array_merge($productsGroupNull, $productsGroupEmpty, $productsNull, $productsEmpty);

      $offset = pager_remove_prefix($page) * $perPage - $perPage;
      $pager = new MyPager(pager_remove_prefix($page), $perPage, count($products));
      $products = array_slice($products, $offset, $perPage);
    } elseif (isset($_GET['bar_code_duplicate']) && $_GET['bar_code_duplicate'] == 1) {
      $duplicateProductBarcodes = ManagerHolder::get('Product')->executeNativeSQL('SELECT bar_code FROM product GROUP BY bar_code HAVING COUNT(bar_code) > 1');
      $duplicateProductBarcodes = get_array_vals_by_second_key($duplicateProductBarcodes, 'bar_code');
      $duplicateGroupBarcodes = ManagerHolder::get('ParameterGroup')->executeNativeSQL('SELECT bar_code FROM parameter_group GROUP BY bar_code HAVING COUNT(bar_code) > 1');
      $duplicateGroupBarcodes = get_array_vals_by_second_key($duplicateGroupBarcodes, 'bar_code');

      $productsGroup = array();
      if (!empty($duplicateGroupBarcodes)) {
        $duplicateWhere = $where;
        $duplicateWhere['parameter_groups.bar_code'] = $duplicateGroupBarcodes;
        $productsGroup = ManagerHolder::get('Product')->getAllWhere($duplicateWhere, 'e.*,parameter_groups.*,inventories.*,inventories_parser_setting.*,reserves.*');
      }

      $products = array();
      if (!empty($duplicateProductBarcodes)) {
        $duplicateWhere = $where;
        $duplicateWhere['parameter_groups.id'] = NULL;
        $duplicateWhere['bar_code'] = $duplicateProductBarcodes;
        $products = ManagerHolder::get('Product')->getAllWhere($duplicateWhere, 'e.*,parameter_groups.*,inventories.*,inventories_parser_setting.*,reserves.*');
      }

      $products = array_merge($productsGroup, $products);
    } else {
      // Search
      if (isset($_GET['bar_code']) && !empty($_GET['bar_code'])) {
        $barCode = $_GET['bar_code'];

        $productByBarCode = ManagerHolder::get('Product')->getOneWhere(array('bar_code' => $barCode), 'id');
        if (empty($productByBarCode)) {
          $groupByBarCode = ManagerHolder::get('ParameterGroup')->getOneWhere(array('bar_code' => $barCode), 'id');
          if (!empty($groupByBarCode)) {
            $where['parameter_groups.id'] = $groupByBarCode['id'];
          } else {
            set_flash_error('Товар с таким штрих-кодом не найден');
          }
        } else {
          $where['id'] = $productByBarCode['id'];
        }
      }

      $products = ManagerHolder::get('Product')->getAllWhereWithMyPager($where, pager_remove_prefix($page), 20, 'e.*,parameter_groups.*,inventories.*,inventories_parser_setting.*,reserves.*');
      $pager = $products->pager;
      $products = $products->data;
    }

    $list = array();
    $inventoriesParserSetting = array();

    $productIds = get_array_vals_by_second_key($products, 'id');
    $onWayProducts = ManagerHolder::get('SupplierRequest')->getOnWayData($productIds);

    foreach ($products as $k => $product) {

      $inventories = array();
      if (!empty($product['inventories'])) {
        foreach ($product['inventories'] as $inventory) {
          if (empty($inventory['store_id'])) {
            continue;
          }

          $inventories[$inventory['bar_code']][$inventory['store_id']] = $inventory;
          if (isset($inventories[$inventory['bar_code']]['total'])) {
            $inventories[$inventory['bar_code']]['total'] += $inventory['qty'];
          } else {
            $inventories[$inventory['bar_code']]['total'] = $inventory['qty'];
          }
        }
      }
      $reserves = array();
      if (!empty($product['reserves'])) {
        foreach ($product['reserves'] as $reserve) {
          if (empty($reserve['store_id'])) {
            continue;
          }

//          $reserves[$reserve['product_id']][$reserve['product_group_id']][$reserve['store_id']] = $reserve;
          if (isset($reserves[$reserve['product_id']][$reserve['product_group_id']][$reserve['store_id']]['total'])) {
            $reserves[$reserve['product_id']][$reserve['product_group_id']][$reserve['store_id']]['total'] += $reserve['qty'];
          } else {
            $reserves[$reserve['product_id']][$reserve['product_group_id']][$reserve['store_id']]['total'] = $reserve['qty'];
          }
        }
      }

      if (!empty($product['inventories_parser_setting'])) {
        foreach ($product['inventories_parser_setting'] as $setting) {
          $inventoriesParserSetting[$setting['store_id']][$setting['product_id']][$setting['product_group_id']] = $setting;
        }
      }

      if (empty($product['parameter_groups'])) {
        $row = array();
        $row['name'] = $product['name'];
        $row['product_id'] = $product['id'];
        $row['not_in_stock'] = $product['not_in_stock'];
        $row['product_group_id'] = NULL;
        $row['bar_code'] = $product['bar_code'];
        $row['standard_store_qty'] = $product['standard_store_qty'];
        $row['page_url'] = shop_url($product['page_url']);
        $row['product_code'] = $product['product_code'];
        if (isset($inventories[$product['bar_code']])) {
          $row['inventory'] = $inventories[$product['bar_code']];
        } else {
          $row['inventory'] = array();
        }
        if (isset($reserves[$row['product_id']][$row['product_group_id']])) {
          $row['reserve'] = $reserves[$row['product_id']][$row['product_group_id']];
        } else {
          $row['reserve'] = array();
        }
        if (isset($onWayProducts[$row['product_id']][$row['product_group_id']])) {
          $row['on_way'] = $onWayProducts[$row['product_id']][$row['product_group_id']];
        } else {
          $row['on_way'] = array();
        }

        $list[] = $row;
      } else {
        foreach ($product['parameter_groups'] as $group) {
          $row = array();
          $row['name'] = $product['name'] . ' ' . $group['main_parameter_value']['name'];
          $row['bar_code'] = $group['bar_code'];
          $row['standard_store_qty'] = $group['standard_store_qty'];
          $row['not_in_stock'] = $group['not_in_stock'];
          $row['product_id'] = $product['id'];
          $row['product_group_id'] = $group['id'];
          $row['page_url'] = shop_url($product['page_url']);
          $row['product_code'] = $product['product_code'];
          if (isset($inventories[$group['bar_code']])) {
            $row['inventory'] = $inventories[$group['bar_code']];
          } else {
            $row['inventory'] = array();
          }
          if (isset($reserves[$row['product_id']][$row['product_group_id']])) {
            $row['reserve'] = $reserves[$row['product_id']][$row['product_group_id']];
          } else {
            $row['reserve'] = array();
          }
          if (isset($onWayProducts[$row['product_id']][$row['product_group_id']])) {
            $row['on_way'] = $onWayProducts[$row['product_id']][$row['product_group_id']];
          } else {
            $row['on_way'] = array();
          }

          $list[] = $row;
        }
      }
    }

    if (isset($_GET['bar_code_duplicate']) && $_GET['bar_code_duplicate'] == 1) {
      $list = array_sort($list, 'bar_code', SORT_DESC);
    }
    $filterValues = array();

    $filterValues['product_brand'] = ManagerHolder::get('ProductBrand')->getAsViewArray();
    $filterValues['product_category'] = ManagerHolder::get('ProductCategory')->getAsViewArray();
    $filterValues['store'] = $stores;

    $this->layout->set('stores', $stores);
    if (isset($pager)) {
      $this->layout->set('pager', $pager);
    }

    $admins = ManagerHolder::get('Admin')->getAsViewArray();

    $this->layout->set('list', $list);
    $this->layout->set('admins', $admins);
    $this->layout->set('idCodeStoreMap', $idCodeStoreMap);
    $this->layout->set('config', $config);
    $this->layout->set('filters', $this->filters);
    $this->layout->set('filter_values', $filterValues);
    $this->layout->set('activeStores', $activeStores);
    $this->layout->set('inventoriesParserSetting', $inventoriesParserSetting);
    $this->layout->view('store/index');
  }


	/**
	 * Update products price and coast price from loaded file in storeinventory
	 */
	public function process_file_prices() {
		ini_set('memory_limit', "1048M");
		// load config
		$this->load->config('retailer_file');
		$cfg = $this->config->item('retailer_file');

		$config = $cfg['inventory_prices'];
		$useFirstSheet = TRUE;

		// Get all rows into array
		$this->fileoperations->set_upload_lib_config_value("allowed_types", 'xls|xlsx|csv');
		$this->fileoperations->add_folder_to_uploads_dir('storeinventory');
		$uploadResult = $this->fileoperations->upload('import_file', TRUE, './web');

		$fileInfo = $this->fileoperations->file_info;
		require_once('./lib/phpExcel/PHPExcel.php');
		require_once('./lib/phpExcel/PHPExcel/IOFactory.php');

		$xls = @PHPExcel_IOFactory::load($fileInfo['file_path'] . $fileInfo['file_name']);

		$result = array();
		foreach ($xls->getWorksheetIterator() as $worksheet) {
			$title = $worksheet->getTitle();
			if ($useFirstSheet) {
				$title = 'first|sheet';
				$useFirstSheet = FALSE;
			}

			if (!isset($config['worksheets'][$title])) {
				continue;
			} else {
				$worksheetConfig = $config['worksheets'][$title];
				$lastAlpha = array_merge($worksheetConfig['price_columns'],array_merge($worksheetConfig['cost_price_columns']), array_keys($worksheetConfig['identify_columns']));
				asort($lastAlpha);
				$lastAlpha = array_pop($lastAlpha);
			}

			foreach ($worksheet->getRowIterator() as $row) {
				$rowIndex = $row->getRowIndex();
				$cellIterator = $row->getCellIterator();
				$cellIterator->setIterateOnlyExistingCells(TRUE); // Loop all cells, even if it is not set

				$key = array();
				// Product price
				$price = null;
				// Product cost price
				$costPrice = null;
				foreach ($cellIterator as $cell) {
					if (!is_null($cell)) {
						$column = $cell->getColumn();
						if ($column > $lastAlpha) {
							break;
						}
						if (isset($worksheetConfig['identify_columns'][$column])) {
							$key[$worksheetConfig['identify_columns'][$column]] = $cell->getValue();
						}
						// Get product price
						if (in_array($column, $worksheetConfig['price_columns'])) {
							$p = $cell->getValue();
							if ($p !== '') {
								if (is_float($p)) {
									$p = (int)$p;
								}
								$price += $p;
							}
						}
						// Get cost price
						if (in_array($column, $worksheetConfig['cost_price_columns'])) {
							$c = $cell->getValue();
							if ($c !== '') {
								if (is_float($c)) {
									$c = (int)$c;
								}
								$costPrice += $c;
							}
						}
					}
				}
				if (!empty($key)) {
					$key = json_encode($key);
					if (!empty($price) && $price !== null) {
						$result[$key]['price'] = $price;
					}
					if (!empty($costPrice) && $costPrice !== null) {
						$result[$key]['cost_price'] = $costPrice;
					}
				}
			}
		}

		$processedCount = 0;
		foreach ($result as $k => $v) {
			$k = json_decode($k, true);
			foreach ($k as $kk => $vv) {
				$k[$kk] = trim($vv);
				$k[$kk] = ltrim($vv, 0);
			}

			try {
				$productGroup = ManagerHolder::get('ParameterGroup')->getOneWhere($k, 'id,product_id,bar_code');
			} catch (Exception $e) {
				$productGroup = array();
			}

			$entity = array();
      if ($productGroup) {
	      $entity['product_group_id'] = $productGroup['id'];
	      $entity['product_id'] = $productGroup['product_id'];
	      $entity['bar_code'] = $productGroup['bar_code'];
      } else {
	      $product = ManagerHolder::get('Product')->getOneWhere($k, 'id,bar_code,product_code');
	      if ($product) {
		      $entity['product_id'] = $product['id'];
		      $entity['bar_code'] = $product['bar_code'];
		      $entity['product_code'] = $product['product_code'];
	      } else {
		      continue;
	      }
      }
			if (isset($v['price'])) {
				if (isset($entity['product_group_id'])) {
					ManagerHolder::get('ParameterGroup')->updateById($entity['product_group_id'], 'price', $v['price']);
				}
				ManagerHolder::get('Product')->updateById($entity['product_id'], 'price', $v['price']);
			}
			if (isset($v['cost_price'])) {
				ManagerHolder::get('Product')->updateById($entity['product_id'], 'cost_price', $v['cost_price']);
			}
			$processedCount++;
		}

		ManagerHolder::get('StoreInventory')->updateProductStatuses();

		if ($processedCount > 0) {
			set_flash_notice('Файл успешно обработан. Обновленно остатков: ' . $processedCount);
		} else {
			set_flash_error('Обновленно ' . $processedCount . ' остатков');
		}

		$this->redirectToReffer();

	}

	/**
	 *
	 */
	public function process_file_standard_store() {
		ini_set('memory_limit', "1048M");
		// load config
		$this->load->config('retailer_file');
		$cfg = $this->config->item('retailer_file');

		$config = $cfg['standard_store'];
		$useFirstSheet = TRUE;

		// Get all rows into array
		$this->fileoperations->set_upload_lib_config_value("allowed_types", 'xls|xlsx|csv');
		$this->fileoperations->add_folder_to_uploads_dir('storeinventory');
		$uploadResult = $this->fileoperations->upload('import_file', TRUE, './web');

		$fileInfo = $this->fileoperations->file_info;
		require_once('./lib/phpExcel/PHPExcel.php');
		require_once('./lib/phpExcel/PHPExcel/IOFactory.php');

		$xls = @PHPExcel_IOFactory::load($fileInfo['file_path'] . $fileInfo['file_name']);

		$result = array();
		foreach ($xls->getWorksheetIterator() as $worksheet) {
			$title = $worksheet->getTitle();
			if ($useFirstSheet) {
				$title = 'first|sheet';
				$useFirstSheet = FALSE;
			}

			if (!isset($config['worksheets'][$title])) {
				continue;
			} else {
				$worksheetConfig = $config['worksheets'][$title];
				$lastAlpha = array_merge($worksheetConfig['value_columns'],array_keys($worksheetConfig['identify_columns']));
				asort($lastAlpha);
				$lastAlpha = array_pop($lastAlpha);
			}

			foreach ($worksheet->getRowIterator() as $row) {
				$rowIndex = $row->getRowIndex();
				$cellIterator = $row->getCellIterator();
				$cellIterator->setIterateOnlyExistingCells(TRUE); // Loop all cells, even if it is not set

				$key = array();
				$value = 0;
				foreach ($cellIterator as $cell) {
					if (!is_null($cell)) {
						$column = $cell->getColumn();
						if ($column > $lastAlpha) {
							break;
						}
						if (isset($worksheetConfig['identify_columns'][$column])) {
							$key[$worksheetConfig['identify_columns'][$column]] = $cell->getValue();
						}
						if (in_array($column, $worksheetConfig['value_columns'])) {
							$v = $cell->getValue();
							if (!empty($worksheetConfig['value_replace'])) {
								foreach ($worksheetConfig['value_replace'] as $needle => $valueReplace) {
									if (strpos($v, $needle) !== FALSE) {
										$v = $valueReplace;
										break;
									}
								}
							}
							if (!is_numeric($v)) {
								$v = 0;
							}
							if (is_float($v)) {
								$v = (int)$v;
							}
							$value += $v;
						}
					}
				}
				if (!empty($key) && (!empty($value) || $value === 0)) {
					$key = json_encode($key);
					$result[$key]['value'] = $value;
				}
			}
		}
		$processedCount = 0;
		foreach ($result as $k => $v) {
			$k = json_decode($k, true);
			foreach ($k as $kk => $vv) {
				$k[$kk] = trim($vv);
				$k[$kk] = ltrim($vv, 0);
			}

			$where = array('bar_code' => $k['bar_code']);
	    $existsProduct = ManagerHolder::get('Product')->existsWhere($where);
      if ($existsProduct) {
	      ManagerHolder::get('Product')->updateAllWhere($where, array('standard_store_qty' => $v['value']));
      } else {
      	$existsProductGroup = ManagerHolder::get('ParameterGroup')->existsWhere($where);
      	if ($existsProductGroup) {
		      ManagerHolder::get('ParameterGroup')->updateAllWhere($where, array('standard_store_qty' => $v['value']));
	      } else {
      		continue;
	      }
      }
			$processedCount++;
		}

		ManagerHolder::get('StoreInventory')->updateProductStatuses();

		if ($processedCount > 0) {
		set_flash_notice('Файл успешно обработан. Обновленно остатков: ' . $processedCount);
		} else {
			set_flash_error('Обновленно ' . $processedCount . ' остатков');
		}

		$this->redirectToReffer();
	}


  /**
   * Process file
   */
  public function process_file() {
    ini_set('memory_limit', "1048M");

    $store = ManagerHolder::get('Store')->getById($_POST['store'], 'e.*');
    if (empty($store)) {
      set_flash_error('Неверно указан склад');
      $this->redirectToReffer();
    }

    // load config
    $this->load->config('retailer_file');
    $cfg = $this->config->item('retailer_file');
    $useFirstSheet = FALSE;

    if (!isset($cfg[$store['code']])) {
      $config = $cfg['default'];
      $useFirstSheet = TRUE;
    } else {
      $config = $cfg[$store['code']];
    }

    $fileName = NULL;
    if (isset($config['files'])) {
      $fileName = $_POST['store_config_file'][$store['id']];
      $config = $config['files'][$fileName];
    }

    // Get all rows into array
    $this->fileoperations->set_upload_lib_config_value("allowed_types", 'xls|xlsx|csv|xml');
    $this->fileoperations->add_folder_to_uploads_dir('storeinventory');
    try {
      $uploadResult = $this->fileoperations->upload('import_file', TRUE, './web');
    } catch (Exception $e) {
      set_flash_error($e->getMessage());
      log_message('error', $e->getMessage());
      $this->redirectToReffer();
    }
    $fileInfo = $this->fileoperations->file_info;

    if ($fileInfo['extension'] == '.csv' && isset($config['csv'])) {
      // Load CSV Library
      $this->load->library('common/csv');

      // Read CSV File
      $this->csv->readFile($fileInfo['file_path'] . $fileInfo['file_name']);

      // Header
      $header = $this->csv->readRow();
      while (($row = $this->csv->readRow()) !== FALSE) {
        $key = array();
        foreach ($config['csv']['identify_columns'] as $c => $field) {
          $key[$field] = str_replace('PODA-', '', $row[$c]);
        }

        $value = 0;
        foreach ($config['csv']['value_columns'] as $vc) {
          $value += $row[$vc];
        }
        $key = json_encode($key);
        $result[$key]['value'] = $value;
      }
    } elseif ($fileInfo['extension'] == '.xml' && isset($config['xml'])) {

    	$xml = simplexml_load_file($fileInfo['file_path'] . $fileInfo['file_name']);

    	// Rewrite $xml
	    foreach ($config['xml']['map'] as  $value) {
		    $xml = $xml->$value;
			}

	    $result = array();

	    foreach ($xml as $item) {

	    	// Set bar_code
	    	$key = array();
		    foreach ($config['xml']['identify_columns'] as $c => $field) {
			    $key[$field] = (string)$item->$c;
		    }

		    // Set product qty
		    $value = 0;
		    foreach ($config['xml']['value_columns'] as $c => $field) {
			    if (!empty($item->$c)) {
				    $value += (int)$item->$c;
			    }
		    }

		    // Set product price
		    $price = null;
		    foreach ($config['xml']['price_columns'] as $c => $field) {
			    if ($item->$c !== '') {
				    if (strpos($item->$c, ',') !== FALSE) {
					    $item->$c = str_replace(',', '.', $item->$c);
				    }
            $item->$c = preg_replace("/[^0-9,.]/", "", $item->$c);
				    $price += (int)$item->$c;
			    }
		    }

		    // Set product cost_price
		    $costPrice = null;
		    foreach ($config['xml']['cost_price_columns'] as $c => $field) {
			    if ($item->$c !== '') {
				    if (strpos($item->$c, ',') !== FALSE) {
					    $item->$c = str_replace(',', '.', $item->$c);
				    }
            $item->$c = preg_replace("/[^0-9,.]/", "", $item->$c);
				    $costPrice += (int)$item->$c;
			    }
		    }

		    if (!empty($key)) {
			    $key = json_encode($key);
			    $result[$key]['value'] = $value;
			    $result[$key]['price'] = $price;
			    $result[$key]['cost_price'] = $costPrice;
		    }
	    }
    } else {
      require_once('./lib/phpExcel/PHPExcel.php');
      require_once('./lib/phpExcel/PHPExcel/IOFactory.php');

      $xls = @PHPExcel_IOFactory::load($fileInfo['file_path'] . $fileInfo['file_name']);

      $result = array();
      foreach ($xls->getWorksheetIterator() as $worksheet) {
        $title = $worksheet->getTitle();

        if ($useFirstSheet) {
          $title = 'first|sheet';
          $useFirstSheet = FALSE;
        }

        if (!isset($config['worksheets'][$title])) {
          continue;
        } else {
          $worksheetConfig = $config['worksheets'][$title];
          $lastAlpha = array_merge($worksheetConfig['value_columns'],
						           array_merge($worksheetConfig['cost_price_columns']),
						           array_keys($worksheetConfig['identify_columns']),
						           array_merge($worksheetConfig['price_columns']));
          asort($lastAlpha);
	        $lastAlpha = array_pop($lastAlpha);
        }

        foreach ($worksheet->getRowIterator() as $row) {
          $rowIndex = $row->getRowIndex();
	        // if ($rowIndex < $worksheetConfig['start_row']) {
          //   continue;
          // }

          $cellIterator = $row->getCellIterator();
          $cellIterator->setIterateOnlyExistingCells(TRUE); // Loop all cells, even if it is not set

          $key = array();
          $value = 0;
          // Product price
          $price = null;
          // Product cost price
	        $costPrice = null;

          foreach ($cellIterator as $cell) {
            if (!is_null($cell)) {
              $column = $cell->getColumn();

	            if ($column > $lastAlpha) {
                break;
              }
              if (isset($worksheetConfig['identify_columns'][$column])) {
                $key[$worksheetConfig['identify_columns'][$column]] = $cell->getValue();
              }

              if (in_array($column, $worksheetConfig['value_columns'])) {
                $v = $cell->getValue();
	              if (!empty($worksheetConfig['value_replace'])) {
                  foreach ($worksheetConfig['value_replace'] as $needle => $valueReplace) {
                    if (strpos($v, $needle) !== FALSE) {
                      $v = $valueReplace;
                      break;
                    }
                  }
//                  $v = str_replace(array_keys($worksheetConfig['value_replace']), array_values($worksheetConfig['value_replace']), $v);
                }
                if (!is_numeric($v)) {
                  $v = 0;
                }
                if (is_float($v)) {
                  $v = (int)$v;
                }
                $value += $v;
              }
              // Get product price
	            if (in_array($column, $worksheetConfig['price_columns'])) {
		            $p = $cell->getValue();
		            if ($p !== '') {
			            if (is_float($p)) {
				            $p = (int)$p;
			            }
			            $price += $p;
		            }
	            }
	            // Get cost price
	            if (in_array($column, $worksheetConfig['cost_price_columns'])) {
		            $c = $cell->getValue();
		            if ($c !== '') {
			            if (is_float($c)) {
				            $c = (int)$c;
			            }
			            $costPrice += $c;
		            }
	            }
            }
          }
	        if (!empty($key) && (!empty($value) || $value === 0)) {
	          $key = json_encode($key);
            $result[$key]['value'] = $value;
          }
          if ($price !== null) {
	          $result[$key]['price'] = $price;
          }
	        if ($costPrice !== null) {
		        $result[$key]['cost_price'] = $costPrice;
	        }
        }
      }
    }

    $admin = $this->session->userdata(self::LOGGED_IN_ADMIN_SESSION_KEY);

    if (!empty($result) && isset($_POST['set_zero_on_not_exists']) && $_POST['set_zero_on_not_exists'] == 1) {
      $zeroUpdate = array();
      $zeroUpdate['update_by_admin_id'] = $admin['id'];
      $zeroUpdate['update_source'] = 'file';
      $zeroUpdate['updated_at'] = date(DOCTRINE_DATE_FORMAT);
      $file = array_copy_by_keys($fileInfo, array('web_path', 'file_name'));
      $zeroUpdate['file'] = serialize($file);
      $zeroUpdate['qty'] = 0;

      ManagerHolder::get('StoreInventory')->updateAllWhere(array('store_id' => $store['id'], 'config_file_name' => $fileName), $zeroUpdate);
    }

    $processedCount = 0;
    foreach ($result as $k => $v) {
      $entity = array();
      $entity['config_file_name'] = $fileName;
      $k = json_decode($k, true);
      foreach ($k as $kk => $vv) {
        $k[$kk] = trim($vv);
        $k[$kk] = ltrim($vv, 0);
      }

      try {
        $productGroup = ManagerHolder::get('ParameterGroup')->getOneWhere($k, 'id,product_id,bar_code');
      } catch (Exception $e) {
        $productGroup = array();
      }

      if ($productGroup) {
        $entity['product_group_id'] = $productGroup['id'];
        $entity['product_id'] = $productGroup['product_id'];
        $entity['bar_code'] = $productGroup['bar_code'];
      } else {
        $product = ManagerHolder::get('Product')->getOneWhere($k, 'id,bar_code,product_code');
	      if ($product) {
		      $entity['product_id'] = $product['id'];
          $entity['bar_code'] = $product['bar_code'];
          $entity['product_code'] = $product['product_code'];
        } else {
		      continue;
        }
      }
      $entity['store_id'] = $store['id'];
      $where = $entity;

      if (isset($where['product_code'])) {
		    unset($where['product_code']);
	    }

      $update['update_by_admin_id'] = $admin['id'];
      $update['update_source'] = 'file';
      $update['updated_at'] = date(DOCTRINE_DATE_FORMAT);
      $file = array_copy_by_keys($fileInfo, array('web_path', 'file_name'));
      $update['file'] = serialize($file);
      $update['qty'] = $v['value'];

      $exists = ManagerHolder::get('StoreInventory')->existsWhere($where);
      if ($exists) {
	      ManagerHolder::get('StoreInventory')->updateAllWhere($where, $update);
      } else {
	      $entity = array_merge($entity, $update);
        ManagerHolder::get('StoreInventory')->insert($entity);
      }

      if (isset($_POST['update_price_and_cost_price']) && $_POST['update_price_and_cost_price'] == 1) {
	      if (isset($v['price'])) {
		      if (isset($entity['product_group_id'])) {
			      ManagerHolder::get('ParameterGroup')->updateById($entity['product_group_id'], 'price', $v['price']);
		      }
          ManagerHolder::get('Product')->updateById($entity['product_id'], 'price', $v['price']);
	      }
	      if (isset($v['cost_price'])) {
		      ManagerHolder::get('Product')->updateById($entity['product_id'], 'cost_price', $v['cost_price']);
	      }
      }
      $processedCount++;
    }

    ManagerHolder::get('StoreInventory')->updateProductStatuses();

    if ($processedCount > 0) {
      set_flash_notice('Файл успешно обработан. Обновленно остатков: ' . $processedCount);
    } else {
      set_flash_error('Обновленно ' . $processedCount . ' остатков');
    }

    $this->redirectToReffer();
  }


  /**
   * Ajax update inventory
   */
  public function ajax_update_inventory() {
    $store = ManagerHolder::get('Store')->getById($_POST['store_id'], 'e.*');

    if (empty($store)) {
      die('ERROR');
    }

    foreach ($_POST['data'] as $data) {
      ManagerHolder::get('StoreInventory')->saveInventory($data, $store['id']);
    }

    ManagerHolder::get('StoreInventory')->updateProductStatuses();

    die('OK');
  }

  /**
   * Ajax update not in stock
   */
  public function ajax_update_not_in_stock() {
    if (!isset($_GET['product_id']) || !isset($_GET['product_group_id']) || !isset($_GET['value'])) {
      show_404();
    }

    if (empty($_GET['product_group_id'])) {
      ManagerHolder::get('Product')->updateWhere(array('id' => $_GET['product_id']), 'not_in_stock', (bool)$_GET['value']);
    } else {
      ManagerHolder::get('ParameterGroup')->updateWhere(array('id' => $_GET['product_group_id']), 'not_in_stock', (bool)$_GET['value']);
    }

    die('OK');
  }

  /**
   * Ajax web parser setting
   */
  public function ajax_web_parser_setting() {
    if (!isset($_GET['product_id']) || !isset($_GET['product_group_id']) || !isset($_GET['store_id'])) {
      show_404();
    }

    $store = ManagerHolder::get('Store')->getById($_GET['store_id'], 'e.*');
    if (empty($store)) {
      die('ERROR');
    }

    $where = array_copy_by_keys($_GET, array('product_id', 'product_group_id', 'store_id'));
    if (empty($_GET['product_group_id']) || ($store['code'] == 'i-love-mum' || $store['code'] == 'White Rabbit')) {
      $where['product_group_id'] = NULL;
    }

    $setting = ManagerHolder::get('StoreInventoryParserSetting')->getOneWhere($where, 'e.*');
    if (empty($setting)) {
      $setting = $where;
      $setting['url'] = '';
//      $setting['config'] = NULL;
    } else {
//      $setting['config'] = unserialize($setting['config']);
    }

    $this->layout->setLayout('ajax');
    $this->layout->set('setting', $setting);
    $this->layout->view('store/parser_setting');
  }

  /**
   * Ajax web parser setting process
   */
  public function ajax_web_parser_setting_process() {
    if (!isset($_GET['product_id']) || !isset($_GET['product_group_id']) || !isset($_GET['store_id'])) {
      show_404();
    }

    $store = ManagerHolder::get('Store')->getById($_GET['store_id'], 'e.*');
    if (empty($store)) {
      die('ERROR');
    }

    $where = array_copy_by_keys($_GET, array('product_id', 'product_group_id', 'store_id'));
    if (empty($_GET['product_group_id']) || ($store['code'] == 'i-love-mum' || $store['code'] == 'White Rabbit')) {
      $where['product_group_id'] = NULL;
    }

    $setting = $where;
    $setting['url'] = $_POST['url'];

    $exists = ManagerHolder::get('StoreInventoryParserSetting')->existsWhere($where);
    if ($exists) {
      unset($setting['product_group_id']);
      ManagerHolder::get('StoreInventoryParserSetting')->updateAllWhere($where, $setting);
    } else {
      $dayAgo = date(DOCTRINE_DATE_FORMAT, 0);
      $setting['last_parse_at'] = $dayAgo;
      ManagerHolder::get('StoreInventoryParserSetting')->insert($setting);
    }

    die('Настройки сохранены');
  }

  public function standard_store_qty_save() {
    $data = array();
    $data['value'] = $_GET['value'];
    $data['bar_code'] = $_GET['bar_code'];

    $product = ManagerHolder::get('Product')->getOneWhere(array('bar_code' => $data['bar_code']), 'bar_code');
    $productParameterGroup = ManagerHolder::get('ParameterGroup')->getOneWhere(array('bar_code' => $data['bar_code']), 'bar_code');

    if (!empty($data['bar_code']) && isset($data['value'])) {
      if ($product['bar_code'] == $data['bar_code']) {
        ManagerHolder::get('Product')->updateAllWhere(array('bar_code' => $data['bar_code']), array('standard_store_qty' => $data['value']));
      } elseif ($productParameterGroup['bar_code'] == $productParameterGroup['bar_code']) {
        ManagerHolder::get('ParameterGroup')->updateAllWhere(array('bar_code' => $data['bar_code']), array('standard_store_qty' => $data['value']));
      }
    }
  }


  public function standard_store_qty_order_proccess() {
    $where = array();
    $where['published'] = TRUE;

    if (isset($_GET['product_brand']) && !empty($_GET['product_brand'])) {
      $where['brand_id'] = (int)$_GET['product_brand'];
    }
    if (isset($_GET['product_category']) && !empty($_GET['product_category'])) {
      $where['category_id'] = (int)$_GET['product_category'];
    }

    // Search
    if (isset($_GET['q'])) {
      $search["search_string"] = trim($_GET['q']);
      if (!isset($search["search_type"])) {
        $search["search_type"] = $this->searchMode;
      }
      if (!isset($search["search_in"])) {
        $search["search_in"] = 'name,product_code';
      }
      ManagerHolder::get('Product')->setSearch($search["search_string"], $search["search_in"], $search["search_type"]);
      $this->layout->set("search", $search);
    }

    if (isset($_GET['no_bar_code']) && $_GET['no_bar_code'] == 1) {

      $noBarCodeWhere = $where;
      $noBarCodeWhere['parameter_groups.id<>'] = 'NULL';

      $noBarCodeWhere['parameter_groups.bar_code'] = NULL;
      $productsGroupNull = ManagerHolder::get('Product')->getAllWhere($noBarCodeWhere, 'e.*,parameter_groups.*,inventories.*, reserves.*');
      $noBarCodeWhere['parameter_groups.bar_code'] = '';
      $productsGroupEmpty = ManagerHolder::get('Product')->getAllWhere($noBarCodeWhere, 'e.*,parameter_groups.*,inventories.*, reserves.*');

      $noBarCodeWhere = $where;
      $noBarCodeWhere['parameter_groups.id'] = NULL;

      $noBarCodeWhere['bar_code'] = NULL;
      $productsNull = ManagerHolder::get('Product')->getAllWhere($noBarCodeWhere, 'e.*,parameter_groups.*,inventories.*, reserves.*');

      $noBarCodeWhere['bar_code'] = '';
      $productsEmpty = ManagerHolder::get('Product')->getAllWhere($noBarCodeWhere, 'e.*,parameter_groups.*,inventories.*, reserves.*');

      $products = array_merge($productsGroupNull, $productsGroupEmpty, $productsNull, $productsEmpty);

    } elseif (isset($_GET['bar_code_duplicate']) && $_GET['bar_code_duplicate'] == 1) {
      $duplicateProductBarcodes = ManagerHolder::get('Product')->executeNativeSQL('SELECT bar_code FROM product GROUP BY bar_code HAVING COUNT(bar_code) > 1');
      $duplicateProductBarcodes = get_array_vals_by_second_key($duplicateProductBarcodes, 'bar_code');
      $duplicateGroupBarcodes = ManagerHolder::get('ParameterGroup')->executeNativeSQL('SELECT bar_code FROM parameter_group GROUP BY bar_code HAVING COUNT(bar_code) > 1');
      $duplicateGroupBarcodes = get_array_vals_by_second_key($duplicateGroupBarcodes, 'bar_code');

      $productsGroup = array();
      if (!empty($duplicateGroupBarcodes)) {
        $duplicateWhere = $where;
        $duplicateWhere['parameter_groups.bar_code'] = $duplicateGroupBarcodes;
        $productsGroup = ManagerHolder::get('Product')->getAllWhere($duplicateWhere, 'e.*,parameter_groups.*,inventories.*, reserves.*');
      }

      $products = array();
      if (!empty($duplicateProductBarcodes)) {
        $duplicateWhere = $where;
        $duplicateWhere['parameter_groups.id'] = NULL;
        $duplicateWhere['bar_code'] = $duplicateProductBarcodes;
        $products = ManagerHolder::get('Product')->getAllWhere($duplicateWhere, 'e.*,parameter_groups.*,inventories.*, reserves.*');
      }

      $products = array_merge($productsGroup, $products);
    } else {
      // Search
      if (isset($_GET['bar_code']) && !empty($_GET['bar_code'])) {
        $barCode = $_GET['bar_code'];

        $productByBarCode = ManagerHolder::get('Product')->getOneWhere(array('bar_code' => $barCode), 'id');
        if (empty($productByBarCode)) {
          $groupByBarCode = ManagerHolder::get('ParameterGroup')->getOneWhere(array('bar_code' => $barCode), 'id');
          if (!empty($groupByBarCode)) {
            $where['parameter_groups.id'] = $groupByBarCode['id'];
          } else {
            set_flash_error('Товар с таким штрих-кодом не найден');
          }
        } else {
          $where['id'] = $productByBarCode['id'];
        }
      }

      $products = ManagerHolder::get('Product')->getAllWhere($where, 'e.*, inventories.*, parameter_groups.*, reserves.*');
    }

    $productIds = get_array_vals_by_second_key($products, 'id');
    $onWayProducts = ManagerHolder::get('SupplierRequest')->getOnWayData($productIds);

    $list = array();

    foreach ($products as $k => $product) {

      $inventories = array();
      if (!empty($product['inventories'])) {
        foreach ($product['inventories'] as $inventory) {
          if (empty($inventory['store_id'])) {
            continue;
          }

          $inventories[$inventory['bar_code']][$inventory['store_id']] = $inventory;
          if (isset($inventories[$inventory['bar_code']]['total'])) {
            $inventories[$inventory['bar_code']]['total'] += $inventory['qty'];
          } else {
            $inventories[$inventory['bar_code']]['total'] = $inventory['qty'];
          }
        }
      }

      $reserves = array();
      if (!empty($product['reserves'])) {
        foreach ($product['reserves'] as $reserve) {
          if (empty($reserve['store_id'])) {
            continue;
          }

//          $reserves[$reserve['product_id']][$reserve['product_group_id']][$reserve['store_id']] = $reserve;
          if (isset($reserves[$reserve['product_id']][$reserve['product_group_id']][$reserve['store_id']]['total'])) {
            $reserves[$reserve['product_id']][$reserve['product_group_id']][$reserve['store_id']]['total'] += $reserve['qty'];
          } else {
            $reserves[$reserve['product_id']][$reserve['product_group_id']][$reserve['store_id']]['total'] = $reserve['qty'];
          }
        }
      }

      if (empty($product['parameter_groups'])) {
        $row = array();
        $row['name'] = $product['name'];
        $row['product_code'] = $product['product_code'];
        $row['bar_code'] = $product['bar_code'];
        $row['standard_store_qty'] = $product['standard_store_qty'];
        $row['product_id'] = $product['id'];
        $row['product_group_id'] = NULL;
        $row['cost_price'] = $product['cost_price'];
        $row['price'] = $product['price'];

        if (isset($inventories[$product['bar_code']])) {
          $row['inventory_total'] = $inventories[$product['bar_code']]['total'];
          if (isset($inventories[$product['bar_code']][ZAMMLER_STORE_ID])) {
            $row['inventory_zammler'] = $inventories[$product['bar_code']][ZAMMLER_STORE_ID]['qty'];
          } else {
            $row['inventory_zammler'] = 0;
          }
          if (isset($inventories[$product['bar_code']][MC_STORE_ID])) {
            $row['inventory_mc'] = $inventories[$product['bar_code']][MC_STORE_ID]['qty'];
          } else {
            $row['inventory_mc'] = 0;
          }
        } else {
          $row['inventory_total'] = 0;
          $row['inventory_zammler'] = 0;
          $row['inventory_mc'] = 0;
        }

        if (isset($reserves[$row['product_id']][$row['product_group_id']])) {
          $row['reserve'] = $reserves[$row['product_id']][$row['product_group_id']];
        } else {
          $row['reserve'] = array();
        }
        if (isset($onWayProducts[$row['product_id']][$row['product_group_id']])) {
          $row['on_way'] = $onWayProducts[$row['product_id']][$row['product_group_id']];
        } else {
          $row['on_way'] = array();
        }


        $list[] = $row;
      } else {
        foreach ($product['parameter_groups'] as $group) {
          $row = array();
          $row['name'] = $product['name'] . ' ' . $group['main_parameter_value']['name'];
          $row['product_code'] = $product['product_code'];
          $row['bar_code'] = $group['bar_code'];
          $row['standard_store_qty'] = $group['standard_store_qty'];
          $row['product_id'] = $product['id'];
          $row['product_group_id'] = $group['id'];
          $row['cost_price'] = $product['cost_price'];
          if (!empty($group['price'])) {
            $row['price'] = $group['price'];
          } else {
            $row['price'] = $product['price'];
          }
          if (isset($inventories[$group['bar_code']])) {
            $row['inventory_total'] = $inventories[$group['bar_code']]['total'];
            if (isset($inventories[$group['bar_code']][ZAMMLER_STORE_ID])) {
              $row['inventory_zammler'] = $inventories[$group['bar_code']][ZAMMLER_STORE_ID]['qty'];
            } else {
              $row['inventory_zammler'] = 0;
            }

            if (isset($inventories[$group['bar_code']][MC_STORE_ID])) {
              $row['inventory_mc'] = $inventories[$group['bar_code']][MC_STORE_ID]['qty'];
            } else {
              $row['inventory_mc'] = 0;
            }
          } else {
            $row['inventory_total'] = 0;
            $row['inventory_zammler'] = 0;
            $row['inventory_mc'] = 0;
          }
          if (isset($reserves[$row['product_id']][$row['product_group_id']])) {
            $row['reserve'] = $reserves[$row['product_id']][$row['product_group_id']];
          } else {
            $row['reserve'] = array();
          }
          if (isset($onWayProducts[$row['product_id']][$row['product_group_id']])) {
            $row['on_way'] = $onWayProducts[$row['product_id']][$row['product_group_id']];
          } else {
            $row['on_way'] = array();
          }

          $list[] = $row;
        }
      }
    }

    foreach ($list as $k => $v) {
      $item = array();
      $item['name'] = $v['name'];
      $item['product_code'] = $v['product_code'];
      $item['bar_code'] = $v['bar_code'];
      // add to file "inventory_mc, reserve_mc,on_way_mc"
      $item['inventory_mc'] = $v['inventory_mc'];
      $item['reserve_mc'] = isset($v['reserve'][MC_STORE_ID]) ? $v['reserve'][MC_STORE_ID]['total'] : 0;
      $item['on_way_mc'] = isset($v['on_way'][MC_STORE_ID]) ? $v['on_way'][MC_STORE_ID] : 0;

      $item['inventory_zammler'] = $v['inventory_zammler'];
      $item['reserve_zammler'] = isset($v['reserve'][ZAMMLER_STORE_ID]) ? $v['reserve'][ZAMMLER_STORE_ID]['total'] : 0;
      $item['on_way_zammler'] = isset($v['on_way'][ZAMMLER_STORE_ID]) ? $v['on_way'][ZAMMLER_STORE_ID] : 0;
      $item['standard_store_qty'] = $v['standard_store_qty'];
      $item['inventory_total'] = $v['inventory_total'] - $v['inventory_zammler'];

      if (!empty($item['standard_store_qty']) && $item['standard_store_qty'] > 0) {
        $item['standard_store_qty_order'] = $v['standard_store_qty'] - $v['inventory_zammler'] - $v['inventory_mc'] + $item['reserve_mc'] + $item['reserve_zammler'];
      } else {
        $item['standard_store_qty'] = 0;
        $item['standard_store_qty_order'] = 0;
      }
	    $item['cost_price'] = $v['cost_price'];
      $item['price'] = $v['price'];
      $list[$k] = $item;
    }

    require_once('./lib/phpExcel/PHPExcel.php');
    require_once('./lib/phpExcel/PHPExcel/Writer/Excel5.php');

    $borderStyle = array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_MEDIUM,
      'color' => array('rgb' => '000000')));

    $fontStyle = array('name' => 'Arial', 'size' => 11);
    $fontBoldStyle = array_merge($fontStyle, array('bold' => true));

    $date = date("d/m/y");

    $xls = new PHPExcel();
    $xls->setActiveSheetIndex(0);
    $sheet = $xls->getActiveSheet();
    $sheet->setTitle('Заказ на нормативный склад');

    $sheet->getColumnDimension("A")->setWidth(25);
    $sheet->getStyle('A')->getFont()->applyFromArray($fontStyle);
    $sheet->getStyle('A')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->getColumnDimension("B")->setWidth(15);
    $sheet->getStyle('B')->getFont()->applyFromArray($fontStyle);
    $sheet->getStyle('B')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->getColumnDimension("C")->setWidth(15);
    $sheet->getStyle('B')->getFont()->applyFromArray($fontStyle);
    $sheet->getStyle('B')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->getColumnDimension("D")->setWidth(15);
    $sheet->getStyle('C')->getFont()->applyFromArray($fontStyle);
    $sheet->getStyle('C')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->getColumnDimension("E")->setWidth(15);
    $sheet->getStyle('D')->getFont()->applyFromArray($fontStyle);
    $sheet->getStyle('D')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->getColumnDimension("F")->setWidth(15);
    $sheet->getStyle('E')->getFont()->applyFromArray($fontStyle);
    $sheet->getStyle('E')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->getColumnDimension("G")->setWidth(15);
    $sheet->getStyle('F')->getFont()->applyFromArray($fontStyle);
    $sheet->getStyle('F')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->getColumnDimension("H")->setWidth(17);
    $sheet->getStyle('G')->getFont()->applyFromArray($fontStyle);
    $sheet->getStyle('G')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->getColumnDimension("I")->setWidth(17);
    $sheet->getStyle('H')->getFont()->applyFromArray($fontStyle);
    $sheet->getStyle('H')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->getColumnDimension("J")->setWidth(25);
    $sheet->getStyle('I')->getFont()->applyFromArray($fontStyle);
    $sheet->getStyle('I')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->getColumnDimension("K")->setWidth(25);
    $sheet->getStyle('I')->getFont()->applyFromArray($fontStyle);
    $sheet->getStyle('I')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->getColumnDimension("L")->setWidth(32);
    $sheet->getStyle('K')->getFont()->applyFromArray($fontStyle);
    $sheet->getStyle('K')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->getColumnDimension("M")->setWidth(17);
    $sheet->getStyle('L')->getFont()->applyFromArray($fontStyle);
    $sheet->getStyle('L')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->getColumnDimension("N")->setWidth(10);
    $sheet->getStyle('M')->getFont()->applyFromArray($fontStyle);
    $sheet->getStyle('M')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

//    $sheet->setCellValue("A1", 'Заказ на нормативный склад от ' . $date);
//    $sheet->getStyle('A1')->getFont()->applyFromArray($fontBoldStyle);
//    $sheet->mergeCells('A1:D1');
//    $sheet->getStyle('A1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

    $sheet->setCellValue("A1", 'Наименование товара');
    $sheet->getStyle('A1')->getFont()->applyFromArray($fontBoldStyle);
    $sheet->getStyle('A1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->setCellValue("B1", 'Артикул');
    $sheet->getStyle('B1')->getFont()->applyFromArray($fontBoldStyle);
    $sheet->getStyle('B1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->setCellValue("C1", 'Штрих-код');
    $sheet->getStyle('C1')->getFont()->applyFromArray($fontBoldStyle);
    $sheet->getStyle('C1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->setCellValue("D1", 'Сток МС');
    $sheet->getStyle('D1')->getFont()->applyFromArray($fontBoldStyle);
    $sheet->getStyle('D1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->setCellValue("E1", 'Резерв МС');
    $sheet->getStyle('E1')->getFont()->applyFromArray($fontBoldStyle);
    $sheet->getStyle('E1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->setCellValue("F1", 'В пути МС');
    $sheet->getStyle('F1')->getFont()->applyFromArray($fontBoldStyle);
    $sheet->getStyle('F1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->setCellValue("G1", 'Заммлер');
    $sheet->getStyle('G1')->getFont()->applyFromArray($fontBoldStyle);
    $sheet->getStyle('G1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->setCellValue("H1", 'Резерв заммлер');
    $sheet->getStyle('H1')->getFont()->applyFromArray($fontBoldStyle);
    $sheet->getStyle('H1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->setCellValue("I1", 'В пути заммлер');
    $sheet->getStyle('I1')->getFont()->applyFromArray($fontBoldStyle);
    $sheet->getStyle('I1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->setCellValue("J1", 'Нормативный склад');
    $sheet->getStyle('J1')->getFont()->applyFromArray($fontBoldStyle);
    $sheet->getStyle('J1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->setCellValue("K1", 'Склады поставщиков');
    $sheet->getStyle('K1')->getFont()->applyFromArray($fontBoldStyle);
    $sheet->getStyle('K1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->setCellValue("L1", 'Заказ на нормативный склад');
    $sheet->getStyle('L1')->getFont()->applyFromArray($fontBoldStyle);
    $sheet->getStyle('L1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->setCellValue("M1", 'Себестоимость');
    $sheet->getStyle('M1')->getFont()->applyFromArray($fontBoldStyle);
    $sheet->getStyle('M1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->setCellValue("N1", 'Цена');
    $sheet->getStyle('N1')->getFont()->applyFromArray($fontBoldStyle);
    $sheet->getStyle('N1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $xls->getActiveSheet()->fromArray($list, NULL, 'A2', true);

    // Send HTTP-headers
    header("Expires: Mon, 1 Apr 1974 05:00:00 GMT");
    header("Last-Modified: " . gmdate("D,d M YH:i:s") . " GMT");
    header("Cache-Control: no-cache, must-revalidate");
    header("Pragma: no-cache");
    header("Content-type: application/vnd.ms-excel");
    header("Content-Disposition: attachment; filename=Заказ_на_нормативный_склад_от_(" . $date . ").xls");

    // Throw file to output
    $objWriter = new PHPExcel_Writer_Excel5($xls);
    $objWriter->save('php://output');
  }

  /**
   * Reserves
   * @param $productId
   * @param null $productGroupId
   */
  public function reserves($storeId, $productId, $productGroupId = NULL) {
    $reserves = ManagerHolder::get('StoreReserve')->getAllWhere(array('store_id' => $storeId, 'product_id' => $productId, 'product_group_id' => $productGroupId), 'e.*, siteorder_item.*');
    $siteOrderIds = array();
    foreach ($reserves as $reserve) {
      $siteOrderIds[] = $reserve['siteorder_item']['siteorder_id'];
    }
    $siteOrderIds = array_unique($siteOrderIds);
    $siteOrderIds = array_values($siteOrderIds);
    $siteOrders = ManagerHolder::get('SiteOrder')->getAsViewArray(array(), array('id' => 'code'), null, array('id' => $siteOrderIds));

    $this->layout->setLayout('ajax');
    $this->layout->set('siteOrders', $siteOrders);
    $this->layout->set('reserves', $reserves);
    $this->layout->view('store/reserves');
  }

}