<?php if (!defined("BASEPATH")) exit("No direct script access allowed");
/**
 * xAdmin_Question
 * This class has been auto-generated by Itirra
 */
require_once APPPATH . 'controllers/admin/base/base_admin_controller.php';
class xAdmin_Question extends Base_Admin_Controller {

  /** Filters. */
  protected $filters = array("user.id" => "");

  /** DateFilters. */
  protected $dateFilters = array("date");

  /**
   * setViewParamsIndex
   * @param  $entities
   * @param  $pager
   * @param  $hasSidebar
   */
  protected function setViewParamsIndex(&$entities, &$pager, $hasSidebar) {
    $this->layout->set("processListUrl", $this->processListUrl);
    $this->layout->set("isDeleteAllAllowed", $this->isDeleteAllAllowed);
    $this->layout->set("isListSortable", $this->isListSortable);
    $this->layout->set("maxLines", $this->maxLines);
    $this->layout->set("export", $this->export);
    $this->layout->set("import", $this->import);
    unset($this->actions['add']);
    $this->layout->set("actions", $this->actions);
    $this->layout->set("hasSidebar", $hasSidebar);
    $this->layout->set("menuItems", $this->menuItems);
    $this->layout->set("defOrderBy", $this->defOrderBy);
    $this->layout->set("params", $this->listParams);
    $this->layout->set("fields", $this->fields);
    $this->layout->set("entities", $entities);
    $this->layout->set("pager", $pager);
    $this->layout->set("autocompleteEnabled", $this->autocompleteEnabled);
    $this->layout->set("listViewIgnoreLinks", $this->listViewIgnoreLinks);
    $this->layout->set("listViewLinksRewrite", $this->listViewLinksRewrite);
    $this->layout->set("listViewValuesRewrite", $this->listViewValuesRewrite);
    $this->layout->set("additionalPostParams", $this->additionalPostParams);
    $this->layout->set("additionalActions", $this->additionalActions);
    $this->layout->set("batchUpdateFields", $this->batchUpdateFields);
  }  

  /**
   * Implementation of PRE_UPDATE event callback
   * @param Object $entity reference
   * @return Object
   */
  protected function preUpdate(&$entity) {
    $entity['page_url'] = surround_with_slashes($entity['page_url']);
    $entityFromDb = ManagerHolder::get($this->managerName)->getById($entity['id'], 'page_url');
    if ($entityFromDb['page_url'] != $entity['page_url']) {
      $redirectData = array('old_url' => $entityFromDb['page_url'],
          'new_url' => $entity['page_url']);
      // Check if we already have a redirect from current old url or eternal cycle
      $checkWhereArray = array(array('old_url' => $redirectData['old_url']),
          array('old_url' => $redirectData['new_url'],
              'new_url' => $redirectData['old_url']));
      foreach ($checkWhereArray as $where) {
        $redirectUrl = ManagerHolder::get('RedirectUrl')->getOneWhere($where, 'e.*');
        if (!empty($redirectUrl)) {
          ManagerHolder::get('RedirectUrl')->deleteById($redirectUrl['id']);
        }
      }
      ManagerHolder::get('RedirectUrl')->insert($redirectData);
    }
  }

  /**
   * Add edit entity.
   * @param integer $entityId
   */
  public function add_edit($entityId = null) {
    $this->fields['page_url']['attrs']['startwith'] .= $entityId . '/';
    parent::add_edit($entityId);
  }
}