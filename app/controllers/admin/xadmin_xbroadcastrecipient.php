<?php if (!defined("BASEPATH")) exit("No direct script access allowed");
/**
 * xAdmin_XBroadcastRecipient
 * This class has been auto-generated by Itirra
 */
require_once APPPATH . 'controllers/admin/base/base_admin_controller.php';
class xAdmin_XBroadcastRecipient extends Base_Admin_Controller {

  /** List view file. */
  protected $listView = 'xbroadcast_recipient/entity_list';

  /** Filters. */
  protected $filters = array("status" => "",
                             "is_successfully_sent" => "",
                             "is_read" => "",
                             "is_link_visited" => "",
                             "user.country" => "",
                             "broadcast.template.type.id" => ""
  );

  /** DateFilters. */
  protected $dateFilters = array("sent_date");

  /** SearchParams. */
  protected $searchParams = array("email");

  /** An array of properties to rewrite creating links in list view. */
  protected $listViewLinksRewrite = array('links_visited' => 'xbroadcastvisitedlink');

  /** Additional Actions. */
  protected $additionalItemActions = array('preview');

  /** Additional Actions. */
  protected $additionalActions = array('custom_export');

  /**
   * preview
   * @param int $entityId
   */
  public function preview($entityId) {
    $entity = ManagerHolder::get($this->entityName)->getById($entityId, 'id');
    if (empty($entity)) {
      show_404();
    }
    $this->load->library('BroadcastApp');
    $html = $this->broadcastapp->getRecipientHtml($entityId);
    die($html);
  }

  /**
   * Pre process params.
   * @return string
   */
  protected function preProcessParams($addParams = null) {
    return parent::preProcessParams('broadcast.*');
  }

  /**
   * setViewParamsIndex
   * @param  $entities
   * @param  $pager
   * @param  $hasSidebar
   */
  protected function setViewParamsIndex(&$entities, &$pager, $hasSidebar) {
    foreach (array('add', 'edit', 'delete') as $a) {
      unset($this->actions[$a]);
    }
    $this->listParams[] = array(
        'links_visited' => 'url',
        'broadcast_type' => 'name'
    );

    if (!empty($entities)) {
      foreach ($entities as &$e) {
        $subjectArray = json_decode($e['broadcast']['subject'], TRUE);
        $e['broadcast']['subject'] = $subjectArray[$e['template_variant']];
        $e['template_variant']++;

        $e['links_visited'] =  ManagerHolder::get('XBroadcastVisitedLink')->getAllWhere(array('recipient_id' => $e['id']), 'e.*');
      }
    }

    parent::setViewParamsIndex($entities, $pager, $hasSidebar);
  }

  /**
   * setSearch
   * @param $manager
   */
  protected function setSearchAndOrderBy(&$manager){
    parent::setSearchAndOrderBy($manager);
    if (isset($_GET['broadcast_subject'])) {
      $search["search_string"] = trim($_GET['broadcast_subject']);
      $search["search_type"] = 'contains';
      $search["search_in"] = 'broadcast.subject';
      $manager->setSearch($search["search_string"], $search["search_in"], $search["search_type"]);
    }
  }

  /**
   * Search action for ajax autocomplete in admin_entity_list.
   */
  public function search_autocomplete() {
    if (!isset($_GET['query'])) die();
    $result = '{"query":"%s","suggestions":[%s],"data":[%s]}';
    $suggestions = array();
    $suggestionsData = array();

    $manager = ManagerHolder::get($this->managerName);
    $search = array();
    $search["search_string"] = trim($_GET['query']);
    if (!isset($search["search_type"])) {
      $search["search_type"] = $this->searchMode;
    }
    if (!isset($search["search_in"])) {
      $search["search_in"] = implode(',', $this->searchParams);
    }
    $manager->setSearch($search["search_string"], $search["search_in"], $search["search_type"]);

    $entities = $manager->getAllWhere(array(), implode(',', $this->searchParams), 5, array(), null, 'email');

    foreach ($entities as $e) {
      $e = array_make_plain_with_dots($e);
      $suggestionData = "";
      foreach ($this->searchParams as $i => $sp) {
        if ($i == 0) {
          $suggestion = htmlspecialchars($e[$sp]);
        } else {
          $suggestionData .= htmlspecialchars($e[$sp]) . ', ';
        }
      }
      $suggestionData = trim($suggestionData);
      $suggestionData = rtrim($suggestionData, ',');
      $suggestions[] = json_encode($suggestion);
      $suggestionsData[] = json_encode($suggestionData);
    }
    $result = sprintf($result, $_GET["query"], implode(',', $suggestions), implode(',', $suggestionsData));
    die($result);
  }

  /**
   * Search action for ajax autocomplete in admin_entity_list.
   */
  public function search_autocomplete_filters() {
      if(empty($_GET['type']) || empty($_GET['query'])) {
        die();
      }

      if ($_GET['type'] == 'broadcast_subject') {
        $searchParams = array('subject');
        $managerNames = array('XBroadcast');
      }

      $result = '{"query":"%s","suggestions":[%s],"data":[%s]}';
      $suggestions = array();
      $suggestionsData = array();

      foreach ($managerNames as $managerName) {

        $manager = ManagerHolder::get($managerName);
        $search = array();
        $search["search_string"] = trim($_GET['query']);
        if (!isset($search["search_type"])) {
          $search["search_type"] = 'contains';
        }
        if (!isset($search["search_in"])) {
          $search["search_in"] = implode(',', $searchParams);
        }
        $manager->setSearch($search["search_string"], $search["search_in"], $search["search_type"]);

        $entities = $manager->getAllWhere(array(), implode(',', $searchParams), 5, array(), null, 'subject');

        foreach ($entities as $e) {
          $e = array_make_plain_with_dots($e);
          $suggestionData = "";
          foreach ($searchParams as $i => $sp) {
            $dataArr = json_decode($e[$sp], true);
            foreach ($dataArr as $d) {
              if (strpos(strtolower($d), strtolower($_GET['query'])) === false) {
                continue;
              }
              if ($i == 0) {
                $suggestion = htmlspecialchars($d);
              } else {
                $suggestionData .= htmlspecialchars($d) . ', ';
              }
            }
          }
          $suggestionData = trim($suggestionData);
          $suggestionData = rtrim($suggestionData, ',');
          $suggestions[] = json_encode($suggestion);
          $suggestionsData[] = json_encode($suggestionData);
        }
      }

      $result = sprintf($result, $_GET["query"], implode(',', $suggestions), implode(',', $suggestionsData));
      die($result);
  }

  /**
   * Custom export
   */
  public function custom_export() {

    $manager = ManagerHolder::get($this->managerName);

    $this->setSearchAndOrderBy($manager);
    $this->setFilter();

    $where = $this->filters;
    $what = 'e.*, broadcast.*, user.*, XBroadcastVisitedLink.*';

    $result = $manager->getAllWhere($where, $what);
    if(empty($result)) {
      set_flash_error('No data');
      redirect_to_referral();
    }

    $headerFields = [];
    $fields = array('updated_at', 'broadcast_type', 'template_name', 'broadcast_subject', 'template_variant', 'email', 'is_read', 'XBroadcastVisitedLink', 'user.country');
    foreach ($fields as $f) {
      $headerFields[] = lang('admin.xbroadcastrecipient.custom_import.' . $f);
    }

    // Load CSV Library
    $this->load->library('common/csv');

    // Set headers
    $this->csv->addHeader($headerFields);

    // Process Rows
    $rows = array();
    foreach ($result as $r) {
      $row = array();

      foreach ($fields as $key) {
        if(strpos($key, '.') !== FALSE) {
          $keyArr = explode('.', $key);
          $row[$key] = $r[$keyArr[0]][$keyArr[1]];
        } elseif ($key == 'template_variant') {
          $row[$key] = $r[$key]+1;
        } elseif ($key == 'broadcast_type') {
          $row[$key] = isset($r['broadcast']['template']['type']['name']) ? $r['broadcast']['template']['type']['name'] : '' ;
        } elseif ($key == 'template_name') {
          $row[$key] = isset($r['broadcast']['template']['name']) ? $r['broadcast']['template']['name'] : '' ;
        } elseif ($key == 'broadcast_subject') {
          $subject = null;
          if (isset($r['broadcast']['subject']) && !empty($r['broadcast']['subject'])) {
            $subjectArr = json_decode($r['broadcast']['subject'], true);
            if (isset($subjectArr[$r['template_variant']])) {
              $subject = $subjectArr[$r['template_variant']];
            }
          }
          $row[$key] = $subject;
        } elseif ($key == 'XBroadcastVisitedLink') {
          $links = '';
          if(!empty($r[$key])) {
            foreach ($r[$key] as $k => $linkData) {
              $links .= $linkData['url'];
              if($k != count($r[$key]) - 1) {
                $links .= '; ';
              }
            }
          }
          $row[$key] = $links;
        } else {
          $row[$key] = hsc($r[$key]);
        }
      }

      $rows[] = $row;
    }

    $this->csv->addRows($rows);

    // Send file to output
    $this->csv->flushFile(lang('admin.entity_list.' . strtolower($this->entityName) . '.list_title') . '.csv');
    die();
  }

}