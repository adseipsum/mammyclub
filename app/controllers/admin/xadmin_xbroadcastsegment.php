<?php if (!defined("BASEPATH")) exit("No direct script access allowed");
/**
 * xAdmin_XBroadcastSegment
 * This class has been auto-generated by Itirra
 */
require_once APPPATH . 'controllers/admin/base/base_admin_controller.php';
class xAdmin_XBroadcastSegment extends Base_Admin_Controller {

  /** Filters. */
  protected $filters = array("child_gender" => "",
                             "weeks.id" => "",
                             "ages.id" => "",
                             "countries.id" => "");

  /** SearchParams. */
  protected $searchParams = array("name");

  /** An array of properties to rewrite creating links in list view. */
  protected $listViewLinksRewrite = array('weeks' => 'pregnancyweek');

  /** AdditionalItemActions. */
  protected $additionalItemActions = array("add_recipients_via_csv");

  /** $savedBroadcastTypes. */
  private $savedBroadcastTypes;

  public function add_recipients_via_csv($id) {
    $e = ManagerHolder::get($this->entityName)->getById($id, 'e.*');
    $this->layout->set('entity', $e);
    $this->layout->set('backUrl', admin_site_url(strtolower($this->entityName)));
    $this->layout->set('actionUrl', admin_site_url(strtolower($this->entityName) . '/add_recipients_via_csv_process'));
    $this->layout->view('xbroadcast_segment/add_recipients_via_csv');
  }

  public function add_recipients_via_csv_process() {
    $e = ManagerHolder::get($this->entityName)->getById($_POST['id']);
    if (empty($e) || !isset($_FILES['file'])) {
      show_404();
    }

    // Load CSV Library
    $this->load->library('common/csv');

    $this->csv->setInputFileEncoding('utf-8');

    $this->csv->setSeparator("\r");

    // Read CSV File
    $this->csv->readFile($_FILES['file']['tmp_name']);

    $emails = array();

    while (($row = $this->csv->readRow()) !== FALSE) {
      foreach ($row as $r) {
        $emails[] = $r;
      }
    }

    if (empty($emails)) {
      set_flash_error('Неправильный формат файла. Email-ы должны начинаться с новой строки без затяных и пробелов. Например: email1@mail.ru -> (Enter)');
      redirect_to_referral();
    }

    $refEntity = $this->entityName . 'User';
    $fKey = 'broadcast_segment_id';
    $users = ManagerHolder::get('User')->getAllWhere(array('auth_info.email' => $emails), 'e.*');
    ManagerHolder::get($refEntity)->deleteAllWhere(array($fKey => $e['id']));
    if (!empty($users)) {
      foreach ($users as $u) {
        ManagerHolder::get($refEntity)->insert(array($fKey => $e['id'], 'user_id' => $u['id']));
      }
    }

    set_flash_notice('Добавлено ' . count($users) . ' пользователей');
    redirect(admin_site_url(strtolower($this->entityName)) . '/' . 'add_edit' . '/' . $_POST['id']);
  }

  /**
   * remove_recipients_process
   * @param integer $id
   */
  public function remove_recipients_process($id) {
    $refEntity = $this->entityName . 'User';
    $fKey = 'broadcast_segment_id';
    ManagerHolder::get($refEntity)->deleteAllWhere(array($fKey => $id));
    set_flash_notice('Получатели удалены');
    redirect(admin_site_url(strtolower($this->entityName)) . '/' . 'add_edit' . '/' . $id);
  }

  /**
   * preProcessFields
   * the method is called before passing
   * fields to the layout
   */
  protected function preProcessFields(&$entity) {
    parent::preProcessFields($entity);

    // Holy shit!!! This is a hack O_O
    if (isset($entity['users']) && !empty($entity['users'])) {
      foreach ($entity['users'] as &$user) {
        $user['name'] = $user['auth_info']['email'];
      }
    }
    if (isset($entity['weeks']) && !empty($entity['weeks'])) {
      foreach ($entity['weeks'] as &$week) {
        $week['name'] = $week['number'];
      }
    }

    $this->layout->set('broadcastTypesOptions', ManagerHolder::get('XBroadcastType')->getAsViewArray());
  }

  /**
   * CreateEntityId.
   * Creates Entity By Id;
   * @param integer $entityId
   * @return Object
   */
  protected function createEntityId($entityId = null) {
    $entity = new $this->managerName;
    $entityObject = $entity;
    $entity = $entity->toArray();
    if ($entityId) {
      $params = "id, broadcast_segment_broadcast_type_rels.*,";
      foreach ($this->fields as $k => $v) {
          $params .= $k . ",";
      }
      if (in_array('can_be_deleted', array_keys($entity))) {
        $params .= "can_be_deleted";
      }
      $params = rtrim($params, ',');
      ManagerHolder::get($this->managerName)->clearCacheGroup();
      $entity = ManagerHolder::get($this->managerName)->getById($entityId, $params);
      if (empty($entity)) {
        redirect($this->adminBaseRoute . '/' .  strtolower($this->entityUrlName));
      }
      if (!empty($entity['broadcast_types']) && !empty($entity['broadcast_segment_broadcast_type_rels'])) {
        foreach ($entity['broadcast_types'] as $k => $v) {
          $entity['broadcast_types'][$k] = array_merge($v, $entity['broadcast_segment_broadcast_type_rels'][$k]);
        }
      }
      // Decode json fields
      if (!empty($entity['last_login_filter'])) {
        $entity['last_login_filter'] = json_decode($entity['last_login_filter'], TRUE);
      }
      if (!empty($entity['receipt_type_filter'])) {
        $entity['receipt_type_filter'] = json_decode($entity['receipt_type_filter'], TRUE);
      }
      if (!empty($entity['open_type_filter'])) {
        $entity['open_type_filter'] = json_decode($entity['open_type_filter'], TRUE);
      }
      if (!empty($entity['page_visit_filter'])) {
        $entity['page_visit_filter'] = json_decode($entity['page_visit_filter'], TRUE);
      }
    }
    return $entity;
  }

  /**
   * CreateEntityPOST.
   * Prepares POST.
   * Creates Entity From Post.
   * Validates Entity.
   * @return Object
   */
  protected function createEntityPOST() {

    $jsonFieldsToProcess = array('last_login_filter', 'receipt_type_filter', 'open_type_filter', 'page_visit_filter');

    $this->savedBroadcastTypes = !empty($_POST['broadcast_types']) ? $_POST['broadcast_types'] : null;
    unset($_POST['broadcast_types']);

    $savedJsonFieldsData = array();
    foreach ($jsonFieldsToProcess as $f) {
      if ($f == 'last_login_filter') {
        $savedJsonFieldsData[$f] = !empty($_POST[$f]['operator']) ? $_POST[$f] : null;
      } else {
        $savedJsonFieldsData[$f] = !empty($_POST[$f]) ? $_POST[$f] : null;
      }
      unset($_POST[$f]);
    }

    $entity = parent::createEntityPOST();

    foreach ($jsonFieldsToProcess as $f) {
      $entity[$f] = !empty($savedJsonFieldsData[$f]) ? json_encode($savedJsonFieldsData[$f], JSON_FORCE_OBJECT) : null;
    }

    return $entity;
  }

  /**
   * postSave
   * @see Base_Admin_Controller::postSave()
   */
  protected function postSave($entity) {
    $this->processBroadcastTypes($entity, $this->savedBroadcastTypes);
  }

  /**
   * processBroadcastTypes
   * @param array $entity
   * @param array $broadcastTypes
   */
  private function processBroadcastTypes($entity, $broadcastTypes) {
    ManagerHolder::get('XBroadcastSegmentXBroadcastType')->deleteAllWhere(array('broadcast_segment_id' => $entity['id']));
    if (!empty($broadcastTypes)) {
      foreach ($broadcastTypes as $bt) {
        $bt['broadcast_segment_id'] = $entity['id'];
        ManagerHolder::get('XBroadcastSegmentXBroadcastType')->insert($bt);
      }
    }
  }

}