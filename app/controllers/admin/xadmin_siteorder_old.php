<?php if (!defined("BASEPATH")) exit("No direct script access allowed");
/**
 * xAdmin_SiteOrder
 * This class has been auto-generated by Itirra
 */
require_once APPPATH . 'controllers/admin/base/base_admin_controller.php';
class xAdmin_SiteOrder extends Base_Admin_Controller {

  /** Export */
  protected $export = TRUE;

  /** Additional Actions. Simple Array. Ex. array('view', 'print')*/
  protected $additionalItemActions = array('preview', 'generate_order_shipmet_doc_on_confirmed_stock', 'generate_order_shipmet_doc');

  /** Additional Actions. */
  protected $additionalActions = array('siteorder_report');

  /** Pre update cart items */
  protected $preUpdateCartItems = array();

  /** SearchParams. */
//   protected $searchParams = array("email");

  /** Filters. */
  protected $filters = array("paid" => "",
                             "siteorder_status.id" => "",
                             "manager.id" => "",
                             "shipment_store.id" => "",
                             "request_review" => "");

  /** DateFilters. */
  protected $dateFilters = array("created_at", "shipment_date");

  /** SearchParams. */
  protected $searchParams = array("fio", "email", "phone", "involvement_chanel");

  /**
   * generate_order_shipmet_doc
   * @param array $sitorderId
   */
  public function generate_order_shipmet_doc($sitorderId) {

    $siteOrder = ManagerHolder::get('SiteOrder')->getById($sitorderId, 'e.*, Cart.*');
    if (empty($siteOrder) || !isset($siteOrder['Cart'][0]['items']) || empty($siteOrder['Cart'][0]['items'])) {
      redirect_to_referral();
    }

    require_once('./lib/phpExcel/PHPExcel.php');
    require_once('./lib/phpExcel/PHPExcel/Writer/Excel5.php');

    $borderStyle = array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_MEDIUM,
                                               'color' => array('rgb' => '000000')));

    $fontStyle = array('name' => 'Times New Roman', 'size' => 11);
    $fontBoldStyle = array_merge($fontStyle, array('bold' => true));

    $xls = new PHPExcel();
    $xls->setActiveSheetIndex(0);
    $sheet = $xls->getActiveSheet();
    $sheet->setTitle('Відвантаження');

    $sheet->getColumnDimension("B")->setWidth(20);
    $sheet->getColumnDimension("D")->setWidth(30);
    $sheet->getColumnDimension("E")->setWidth(13);

    $sheet->setCellValue("A1", 'Заказ от MammyClub НА КЛИЕНТА');
    $sheet->getStyle('A1')->getFont()->applyFromArray($fontBoldStyle);
    $sheet->mergeCells('A1:F1');
    $sheet->getStyle('A1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

    $sheet->setCellValue("A3", 'Получатель:');
    $sheet->getStyle('A3')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
    $sheet->getStyle('A3')->getFont()->applyFromArray($fontBoldStyle);
//
//    $sheet->setCellValue("C2", $siteOrder['code']);
//    $sheet->getStyle('C2')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
//    $sheet->getStyle('C2')->getFont()->applyFromArray($fontStyle);
//    $sheet->getStyle('C2')->getBorders()->applyFromArray($borderStyle);

//    $sheet->setCellValue("D2", 'Дата заявки:');
//    $sheet->getStyle('D2')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
//    $sheet->getStyle('D2')->getFont()->applyFromArray($fontBoldStyle);
//
//    $sheet->setCellValue("E2", date('Y-m-d'));
//    $sheet->getStyle('E2')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
//    $sheet->getStyle('E2')->getFont()->applyFromArray($fontStyle);
//    $sheet->getStyle('E2')->getBorders()->applyFromArray($borderStyle);

    // Order table
//    $addressDelivery = $siteOrder['delivery_post'];
    $addressDelivery = 'НЕТ';
    if ($siteOrder['delivery_type'] == 'delivery-to-home') {
      $addressDelivery = $siteOrder['delivery_street'] . ', ' . $siteOrder['delivery_house'] . ', ' . $siteOrder['delivery_flat'];
    }
    $postDelivery = 'НЕТ';
    if ($siteOrder['delivery_type'] == 'delivery-to-post') {
      $postDelivery = $siteOrder['delivery_post'];
    }

    $orderData = array(
                       'ФИО' => $siteOrder['fio'],
                       'Телефон' => $siteOrder['phone'] . ' ',
                       'Город' => $siteOrder['delivery_city'],
                       'Адресная доставка' => $addressDelivery,
                       'Доставка на склад Новой Почты' => $postDelivery,

//                       'Замовник' => 'ФОП Пода (MammyClub.com)',
//                       'Перевізник' => 'Новая Почта',
//                       'Платник доставки' => 'ФОП Пода, ЕДРПО 282845605576',
//                       'Форма розрахунку за доставку' => 'Безготiвкова',
//                       'Сума наложеного платежу' => $siteOrder['total'],
//                       'Платник за наложку' => 'Отримувач',
//                       'Внутрішній № замовлення' => $siteOrder['code'],
//                       'Сума післяплати товар' => $siteOrder['payment_type']=='cash'?$siteOrder['total']:'0',
//                       'Інші додаткові послуги' => 'нет',
//                       'ІПН Відправника' => '2845605576'
    );

    $rowNum = 4;
    foreach ($orderData as $k => $v) {
      $sheet->mergeCellsByColumnAndRow(0, $rowNum, 1, $rowNum);
      $sheet->setCellValueByColumnAndRow(0, $rowNum, $k);
      $sheet->mergeCellsByColumnAndRow(2, $rowNum, 5, $rowNum);
      $sheet->setCellValueByColumnAndRow(2, $rowNum, (string)$v);
      for ($i=2; $i<=5; $i++) {
        $sheet->getStyleByColumnAndRow($i, $rowNum)->getBorders()->applyFromArray($borderStyle);
      }
      $sheet->getStyleByColumnAndRow(2, $rowNum)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
      $rowNum++;
    }
    $rowNum++;

    $sheet->setCellValueByColumnAndRow(0, $rowNum, 'Оплата доставки:');
    $sheet->getStyleByColumnAndRow(0, $rowNum)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
    $sheet->getStyleByColumnAndRow(0, $rowNum)->getFont()->applyFromArray($fontBoldStyle);
    $rowNum++;

    $sheet->setCellValueByColumnAndRow(0, $rowNum, 'Оплата доставки ЗА НАШ СЧЕТ');
    $sheet->getStyleByColumnAndRow(0, $rowNum)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
    $rowNum++;

    $sheet->setCellValueByColumnAndRow(0, $rowNum, 'Просим вас оплатить доставку, мы гарантируем возврат этих денег');
    $sheet->getStyleByColumnAndRow(0, $rowNum)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
    $rowNum+=2;


    $sheet->setCellValueByColumnAndRow(0, $rowNum, 'Наложенный платеж:');
    $sheet->getStyleByColumnAndRow(0, $rowNum)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
    $sheet->getStyleByColumnAndRow(0, $rowNum)->getFont()->applyFromArray($fontBoldStyle);
    $rowNum++;

    $total = 'Без наложенного платежа';
    if ($siteOrder['payment_type'] == 'cash') {
      $total = $siteOrder['total'];
    }
    $sheet->setCellValueByColumnAndRow(0, $rowNum, $total);
    $sheet->getStyleByColumnAndRow(0, $rowNum)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
    $rowNum++;

    $payment = '';
    if ($siteOrder['payment_type'] == 'cash') {
      $payment = 'Оплата наложенного платежа за счет получателя';
    }
    $sheet->setCellValueByColumnAndRow(0, $rowNum, $payment);
    $sheet->getStyleByColumnAndRow(0, $rowNum)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
    $rowNum+=2;

    // Product table
    $sheet->getRowDimension($rowNum)->setRowHeight('34,5');

    $productDataFields = array(0 => 'index', 1 => 'bar_code', 2 => 'product_code', 3 => 'name', 5 => 'qty');

    $productData = array();
    foreach ($siteOrder['Cart'][0]['items'] as $i => $cartItem) {
    	$productName = $cartItem['product']['name'];
    	$productBarCode = !empty($cartItem['product']['bar_code'])?$cartItem['product']['bar_code']:'';
    	$productCode = !empty($cartItem['product']['product_code'])?$cartItem['product']['product_code']:'';
    	if (!empty($cartItem['additional_product_params'])) {
    		$cartItem['additional_product_params'] = ManagerHolder::get('ParameterValue')->getAsViewArray(array(), 'name', null, array('id' => unserialize($cartItem['additional_product_params'])));
    		$productName .= ' [' . implode(', ', $cartItem['additional_product_params']) . ']';
    		// Check for parameter group by parameter values
    		foreach ($cartItem['additional_product_params'] as $paramId => $paramName) {
    			$paramGroup = ManagerHolder::get('ParameterGroup')->getOneWhere(array('product_id' => $cartItem['product_id'], 'main_parameter_value_id' => $paramId), 'e.*');
    			if (!empty($paramGroup)) {
            $productBarCode = !empty($paramGroup['bar_code'])?$paramGroup['bar_code']:'';
            $productCode = !empty($paramGroup['product_code'])?$paramGroup['product_code']:'';
    				break;
    			}
    		}
    	}
    	$productData[] = array('index' => $i+1,
								 	    			 'bar_code'  => $productBarCode . ' ',
                             'product_code' => $productCode,
									    			 'name'  => $productName,
									    			 'qty'   => $cartItem['qty']);
    }
    // Product table header
    $sheet->mergeCellsByColumnAndRow(3, $rowNum, 4, $rowNum);
    for ($i=0; $i<=5; $i++) {
      $sheet->getStyleByColumnAndRow($i, $rowNum)->getBorders()->applyFromArray($borderStyle);
      $sheet->getStyleByColumnAndRow($i, $rowNum)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER)->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
      if (isset($productDataFields[$i])) {
        $sheet->setCellValueByColumnAndRow($i, $rowNum, lang('excel.shipment.product_table.header.' . $productDataFields[$i]));
      }
    }

    // Product table products
    $rowNum++;
    foreach ($productData as $p) {
      $sheet->mergeCellsByColumnAndRow(3, $rowNum, 4, $rowNum);
      foreach ($p as $k => $v) {
        for ($i=0; $i<=5; $i++) {
          $sheet->getStyleByColumnAndRow($i, $rowNum)->getBorders()->applyFromArray($borderStyle);
          $sheet->getStyleByColumnAndRow($i, $rowNum)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
          if ($i == array_search($k, $productDataFields)) {
            $sheet->setCellValueByColumnAndRow($i, $rowNum, $v);
          }
        }
      }
      $rowNum++;
    }

    // Send HTTP-headers
    header ( "Expires: Mon, 1 Apr 1974 05:00:00 GMT" );
    header ( "Last-Modified: " . gmdate("D,d M YH:i:s") . " GMT" );
    header ( "Cache-Control: no-cache, must-revalidate" );
    header ( "Pragma: no-cache" );
    header ( "Content-type: application/vnd.ms-excel" );
    header ( "Content-Disposition: attachment; filename=MammyClub_на_клиента_" . $siteOrder['code'] . ".xls" );

    // Throw file to output
    $objWriter = new PHPExcel_Writer_Excel5($xls);
    $objWriter->save('php://output');
  }


  /**
   * generate_order_shipmet_doc_on_confirmed_stock
   * @param array $sitorderId
   */
  public function generate_order_shipmet_doc_on_confirmed_stock($sitorderId) {
    $siteOrder = ManagerHolder::get('SiteOrder')->getById($sitorderId, 'e.*, Cart.*');
    if (empty($siteOrder) || !isset($siteOrder['Cart'][0]['items']) || empty($siteOrder['Cart'][0]['items'])) {
      redirect_to_referral();
    }

    require_once('./lib/phpExcel/PHPExcel.php');
    require_once('./lib/phpExcel/PHPExcel/IOFactory.php');

    $xls = @PHPExcel_IOFactory::load('./web/supplier_request_zammler_template.xlsx');
    foreach ($xls->getWorksheetIterator() as $sheet) {
      $sheet->setCellValue("B1", trim($siteOrder['id']));
      $sheet->setCellValue("B12", '');


      $rowNum = 18;
      $productData = array();
      foreach ($siteOrder['Cart'][0]['items'] as $i => $cartItem) {
        $productName = $cartItem['product']['name'];
        $productCode = !empty($cartItem['product']['bar_code'])?$cartItem['product']['bar_code']:'';
        if (!empty($cartItem['additional_product_params'])) {
          $cartItem['additional_product_params'] = ManagerHolder::get('ParameterValue')->getAsViewArray(array(), 'name', null, array('id' => unserialize($cartItem['additional_product_params'])));
          $productName .= ' [' . implode(', ', $cartItem['additional_product_params']) . ']';
          // Check for parameter group by parameter values
          foreach ($cartItem['additional_product_params'] as $paramId => $paramName) {
            $paramGroup = ManagerHolder::get('ParameterGroup')->getOneWhere(array('product_id' => $cartItem['product_id'], 'main_parameter_value_id' => $paramId), 'e.*');
            if (!empty($paramGroup)) {
              $productCode = !empty($paramGroup['bar_code'])?$paramGroup['bar_code']:'';
              break;
            }
          }
        }
        $productData[] = array('index' => $i+1,
          'bar_code'  => $productCode,
          'name'  => $productName,
          'qty'   => $cartItem['qty'],
          'store'  => 'склад ТОВ "ЗАММЛЕР ФУЛФІЛМЕНТ"',
          'weight' => ''
        );
      }

      $productDataFields = array('name', 'bar_code', 'qty', 'weight', 'store', 'standart');

      // Product table products
      foreach ($productData as $p) {
        foreach ($p as $k => $v) {
          for ($i=0; $i<=5; $i++) {
            if ($i == array_search($k, $productDataFields)) {
              $sheet->setCellValueByColumnAndRow($i, $rowNum, trim($v));
            }
          }
        }
        $rowNum++;
      }

      // Send HTTP-headers
      header ( "Expires: Mon, 1 Apr 1974 05:00:00 GMT" );
      header ( "Last-Modified: " . gmdate("D,d M YH:i:s") . " GMT" );
      header ( "Cache-Control: no-cache, must-revalidate" );
      header ( "Pragma: no-cache" );
      header ( "Content-type: application/vnd.ms-excel" );
      header ( "Content-Disposition: attachment; filename=" . $siteOrder['code'] . "_відвантаження.xls" );

      // Throw file to output
      $objWriter = new PHPExcel_Writer_Excel5($xls);
      $objWriter->save('php://output');
      die();
    }
  }

  /**
   * generate_order_shipmet_doc_on_confirmed_stock
   * @param array $sitorderId
   */
  public function generate_order_shipmet_doc_on_confirmed_stock_old($sitorderId) {

    $siteOrder = ManagerHolder::get('SiteOrder')->getById($sitorderId, 'e.*, Cart.*');
    if (empty($siteOrder) || !isset($siteOrder['Cart'][0]['items']) || empty($siteOrder['Cart'][0]['items'])) {
      redirect_to_referral();
    }

    require_once('./lib/phpExcel/PHPExcel.php');
    require_once('./lib/phpExcel/PHPExcel/Writer/Excel5.php');

    $borderStyle = array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_MEDIUM,
      'color' => array('rgb' => '000000')));

    $fontStyle = array('name' => 'Times New Roman', 'size' => 11);
    $fontBoldStyle = array_merge($fontStyle, array('bold' => true));

    $xls = new PHPExcel();
    $xls->setActiveSheetIndex(0);
    $sheet = $xls->getActiveSheet();
    $sheet->setTitle('Відвантаження');

    $sheet->getColumnDimension("A")->setWidth(53);
    $sheet->getColumnDimension("B")->setWidth(29);
    $sheet->getColumnDimension("C")->setWidth(13);
    $sheet->getColumnDimension("D")->setWidth(5);
    $sheet->getColumnDimension("E")->setWidth(34);
    $sheet->getColumnDimension("F")->setWidth(20);

    $sheet->setCellValue("A1", 'Заявка на відвантаження товара №');
//    $sheet->getStyle('A1')->getFont()->applyFromArray($fontBoldStyle);
//    $sheet->mergeCells('A1:F1');
//    $sheet->getStyle('A1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
    $sheet->setCellValue("B1", $siteOrder['id']);
    $sheet->setCellValue("C1", 'Фізособи - ІМ');
    $sheet->setCellValue("D1", 'від');

    $sheet->setCellValue("A2", 'Замовник');
    $sheet->setCellValue("A3", 'Вантажовідправник');
    $sheet->setCellValue("A4", 'Платник');
    $sheet->setCellValue("A5", 'Вантажоодержувач:');
    $sheet->setCellValue("A6", 'Пункт розвантаження:');
    $sheet->setCellValue("A7", 'Контакт');
    $sheet->setCellValue("A8", 'Контактний номер');
    $sheet->setCellValue("A9", 'Перевізник');
    $sheet->setCellValue("A10", 'Account');
    $sheet->setCellValue("A11", 'Cost-Center');
    $sheet->setCellValue("A12", 'Номера Видаткових накладних');
    $sheet->setCellValue("A13", 'Особливі умови поставки');
    $sheet->setCellValue("A14", 'Дата постачання');
    $sheet->setCellValue("B12", '');
    $sheet->mergeCells('A14:A15');

    $sheet->getStyle('A14')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

//    $sheet->getColumnDimension("B")->setWidth(20);
//    $sheet->getColumnDimension("D")->setWidth(30);
//    $sheet->getColumnDimension("E")->setWidth(13);
//
//    $sheet->setCellValue("A1", 'Заявка на відвантаження товару');
//    $sheet->getStyle('A1')->getFont()->applyFromArray($fontBoldStyle);
//    $sheet->mergeCells('A1:F1');
//    $sheet->getStyle('A1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
//
//    $sheet->setCellValue("B2", '№ заявки:');
//    $sheet->getStyle('B2')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
//    $sheet->getStyle('B2')->getFont()->applyFromArray($fontBoldStyle);
//
//    $sheet->setCellValue("C2", $siteOrder['code']);
//    $sheet->getStyle('C2')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
//    $sheet->getStyle('C2')->getFont()->applyFromArray($fontStyle);
//    $sheet->getStyle('C2')->getBorders()->applyFromArray($borderStyle);
//
//    $sheet->setCellValue("D2", 'Дата заявки:');
//    $sheet->getStyle('D2')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
//    $sheet->getStyle('D2')->getFont()->applyFromArray($fontBoldStyle);
//
//    $sheet->setCellValue("E2", date('Y-m-d'));
//    $sheet->getStyle('E2')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
//    $sheet->getStyle('E2')->getFont()->applyFromArray($fontStyle);
//    $sheet->getStyle('E2')->getBorders()->applyFromArray($borderStyle);
//
//    // Order table
//    $addressDelivery = $siteOrder['delivery_post'];
//    if ($siteOrder['delivery_type'] == 'delivery-to-home') {
//      $addressDelivery = $siteOrder['delivery_street'] . ', ' . $siteOrder['delivery_house'] . ', ' . $siteOrder['delivery_flat'];
//    }
//    $orderData = array('Замовник' => 'ФОП Пода (MammyClub.com)',
//      'Перевізник' => 'Новая Почта',
//      'Місто доставки' => $siteOrder['delivery_city'],
//      'Адреса отримувача' => $addressDelivery,
//      'ПІБ отримувача' => $siteOrder['fio'],
//      'Телефон отримувача' => $siteOrder['phone'] . ' ',
//      'Платник' => 'ФОП Пода',
//      'Форма розрахунку' => 'Безготивкова',
//      'Оголошена вартість вантажу' => $siteOrder['total'],
//      'Внутрішній № замовлення' => $siteOrder['code'],
//      'Сума післяплати товар' => $siteOrder['payment_type']=='cash'?$siteOrder['total']:'0',
//      'Інші додаткові послуги' => 'нет',
//      'ІПН Відправника' => '2845605576');
//
//    $rowNum = 4;
//    foreach ($orderData as $k => $v) {
//      $sheet->mergeCellsByColumnAndRow(0, $rowNum, 1, $rowNum);
//      $sheet->setCellValueByColumnAndRow(0, $rowNum, $k);
//      $sheet->mergeCellsByColumnAndRow(2, $rowNum, 5, $rowNum);
//      $sheet->setCellValueByColumnAndRow(2, $rowNum, $v);
//      for ($i=2; $i<=5; $i++) {
//        $sheet->getStyleByColumnAndRow($i, $rowNum)->getBorders()->applyFromArray($borderStyle);
//      }
//      $sheet->getStyleByColumnAndRow(2, $rowNum)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
//      $rowNum++;
//    }
//    $rowNum++;
//
//    // Product table
//    $sheet->getRowDimension($rowNum)->setRowHeight('34,5');

    $rowNum = 17;

    // Product table header
    $productDataFields = array('name', 'bar_code', 'qty', 'weight', 'store', 'standart');
    for ($i=0; $i<=5; $i++) {
      $sheet->getStyleByColumnAndRow($i, $rowNum)->getBorders()->applyFromArray($borderStyle);
      $sheet->getStyleByColumnAndRow($i, $rowNum)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER)->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
      if (isset($productDataFields[$i])) {
        $sheet->setCellValueByColumnAndRow($i, $rowNum, lang('excel.shipment.product_table.header.' . $productDataFields[$i]));
        $sheet->getStyleByColumnAndRow($i, $rowNum)->getFont()->applyFromArray($fontBoldStyle);
        $sheet->getStyleByColumnAndRow($i, $rowNum)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
      }
    }

    $rowNum++;


    $productData = array();
    foreach ($siteOrder['Cart'][0]['items'] as $i => $cartItem) {
      $productName = $cartItem['product']['name'];
      $productCode = !empty($cartItem['product']['bar_code'])?$cartItem['product']['bar_code']:'';
      if (!empty($cartItem['additional_product_params'])) {
        $cartItem['additional_product_params'] = ManagerHolder::get('ParameterValue')->getAsViewArray(array(), 'name', null, array('id' => unserialize($cartItem['additional_product_params'])));
        $productName .= ' [' . implode(', ', $cartItem['additional_product_params']) . ']';
        // Check for parameter group by parameter values
        foreach ($cartItem['additional_product_params'] as $paramId => $paramName) {
          $paramGroup = ManagerHolder::get('ParameterGroup')->getOneWhere(array('product_id' => $cartItem['product_id'], 'main_parameter_value_id' => $paramId), 'e.*');
          if (!empty($paramGroup)) {
            $productCode = !empty($paramGroup['bar_code'])?$paramGroup['bar_code']:'';
            break;
          }
        }
      }
      $productData[] = array('index' => $i+1,
        'bar_code'  => $productCode,
        'name'  => $productName,
        'qty'   => $cartItem['qty'],
        'store'  => 'склад ТОВ "ЗАММЛЕР ФУЛФІЛМЕНТ"',
        'weight' => ''
      );
    }
    // Product table header
//    $sheet->mergeCellsByColumnAndRow(2, $rowNum, 3, $rowNum);
//    for ($i=0; $i<=5; $i++) {
//      $sheet->getStyleByColumnAndRow($i, $rowNum)->getBorders()->applyFromArray($borderStyle);
//      $sheet->getStyleByColumnAndRow($i, $rowNum)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER)->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
//      if (isset($productDataFields[$i])) {
//        $sheet->setCellValueByColumnAndRow($i, $rowNum, lang('excel.shipment.product_table_confirmed_stock.header.' . $productDataFields[$i]));
//      }
//    }

    // Product table products
    foreach ($productData as $p) {
      foreach ($p as $k => $v) {
        for ($i=0; $i<=5; $i++) {
          $sheet->getStyleByColumnAndRow($i, $rowNum)->getBorders()->applyFromArray($borderStyle);
          $sheet->getStyleByColumnAndRow($i, $rowNum)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
          if ($i == array_search($k, $productDataFields)) {
            $sheet->setCellValueByColumnAndRow($i, $rowNum, $v);
          }
        }
      }
      $rowNum++;
    }

    // Send HTTP-headers
    header ( "Expires: Mon, 1 Apr 1974 05:00:00 GMT" );
    header ( "Last-Modified: " . gmdate("D,d M YH:i:s") . " GMT" );
    header ( "Cache-Control: no-cache, must-revalidate" );
    header ( "Pragma: no-cache" );
    header ( "Content-type: application/vnd.ms-excel" );
    header ( "Content-Disposition: attachment; filename=" . $siteOrder['code'] . "_відвантаження.xls" );

    // Throw file to output
    $objWriter = new PHPExcel_Writer_Excel5($xls);
    $objWriter->save('php://output');
  }

  /**
   * Siteorder report
   */
  public function siteorder_report() {

    $this->setFilter();
    $where = $this->filters;

    $this->layout->set("backUrl", $this->adminBaseRoute . '/' .  strtolower($this->entityName));
    $this->layout->set("processLink", $this->adminBaseRoute . '/' .  strtolower($this->entityName) . '/siteorder_report_process');
    $this->layout->view('siteorder/report');
  }

  /**
   * Siteorder report
   */
  public function siteorder_report_process() {

    $this->load->helper('project');

    $params = get_get_params();
    $params .= !empty($params)?'&':'?';
    $params .= 'toemail=' . $_POST['email'];

    $url = site_url('siteorder_report/30ad3a3a1d2c7c63102e09e6fe4bb253' . $params);
    send_curl_request($url);

    set_flash_notice('Операция прошла успешно');
    redirect_to_referral();
  }

  /**
   * preview
   * @param int $id
   */
  public function preview($id) {


    $manager = ManagerHolder::get($this->managerName);

    $e = $manager->getById($id, 'e.*, shipment_store.name, manager.name');
    $cart = $this->getSiteorderCartWithItems($e['id']);

    $this->layout->set('fields', $this->fields);
    $this->layout->set('e', $e);
    $this->layout->set('cart', $cart);
    $this->layout->set('entityName', strtolower($this->entityName));

    $this->layout->view('siteorder_preview');
  }

  /**
   * CreateEntityId.
   * Creates Entity By Id;
   * @param integer $entityId
   * @return Object
   */
  protected function createEntityId($entityId = null) {
    $entity = new $this->managerName;
    $entityObject = $entity;
    $entity = $entity->toArray();
    if ($entityId) {
      $params = "id,blocked_admin_id,";
      foreach ($this->fields as $k => $v) {
        $params .= $k . ",";
      }
      if (in_array('can_be_deleted', array_keys($entity))) {
        $params .= "can_be_deleted";
      }
      $params = rtrim($params, ',');
      ManagerHolder::get($this->managerName)->clearCacheGroup();
      $entity = ManagerHolder::get($this->managerName)->getById($entityId, $params);
      if (empty($entity)) {
        redirect($this->adminBaseRoute . '/' .  strtolower($this->entityUrlName));
      }
    }
    // Check for other admin in order
    if(!empty($entity)) {
      $currentAdmin = $this->session->userdata('LOGGED_IN_ADMIN_SESSION_KEY');
      if(!empty($entity['blocked_admin_id']) && $entity['blocked_admin_id'] != $currentAdmin['id']) {
        $blockedAdmin = ManagerHolder::get('Admin')->getById($entity['blocked_admin_id'], 'e.*');
        set_flash_error('С данным заказом уже работает админ ' . $blockedAdmin['email']);
        redirect(admin_site_url('siteorder'));
      }
      ManagerHolder::get('SiteOrder')->updateById($entity['id'], 'blocked_admin_id', $currentAdmin['id']);
    }
    return $entity;
  }

  /**
   * SetAddEditDataAndShowView.
   * Set all needed view data and show add_edit form.
   * @param object $entity
   */
  protected function setAddEditDataAndShowView($entity) {
    $this->load->helper('project');

    // Set statuses
    $siteOrderStatuses = ManagerHolder::get('SiteOrderStatus')->getAll('e.*');
    $this->layout->set("siteOrderStatuses", $siteOrderStatuses);

    $this->preProcessFields($entity);

    $cart = $this->getSiteorderCartWithItems($entity['id']);

    if (!empty($entity['user'])) {
      $user = ManagerHolder::get('User')->getById($entity['user'], 'e.*');
    }

    // Get all product params
    $productParams = ManagerHolder::get('ProductParams')->getAll('e.*');
    $productParamsIDs = get_array_vals_by_second_key($productParams, 'id');

    $products = ManagerHolder::get('Product')->getAll('e.*, product_params.*,inventories.*');
    foreach ($products as &$product) {
//       if (!empty($user) && !empty($user['pregnancyweek_current_id'])) {
//         ManagerHolder::get('Sale')->addAvailableSaleToProducts($user['pregnancyweek_current_id'], $product);
//       }
      if (!empty($product['product_params_id'])) {
        $ppKey = array_search($product['product_params_id'], $productParamsIDs);
        if($ppKey !== FALSE) {
          $product['params'] = $productParams[$ppKey];
        }
      }
    }
    unset($product);

    $this->layout->setLayout('empty');

    $productIds = get_array_vals_by_second_key($products, 'id');
    $onWayProducts = ManagerHolder::get('SupplierRequest')->getOnWayData($productIds);
    $this->layout->set('onWayProducts', $onWayProducts);

    $this->fields['cart_items_data'] = array('type'=> 'html');
    $siteOrderStatus = ManagerHolder::get('SiteOrderStatus')->getById($cart['siteorder']['siteorder_status_id'], 'e.*');
    // Cart data table
    $this->layout->set('cart', $cart);
    $this->layout->set('siteOrderStatus', $siteOrderStatus);

    $entity['cart_items_data'] = $this->layout->view('siteorder/cart', TRUE);

    // Add product block
    $this->layout->set('products', $products);
    $entity['cart_items_data'] .= $this->layout->view('siteorder/add_to_cart', TRUE);

    // Cut inv_channel fields and past to the end
    $tempFields = array();
    foreach ($this->fields as $k => $v) {
      if(strpos($k, 'inv_channel') !== FALSE) {
        $tempFields[$k] = $v;
        unset($this->fields[$k]);
      }
    }
    if(!empty($tempFields)) {
      $this->fields = array_merge($this->fields, $tempFields);
    }

    // Check user's inv_channel fields
    if(isset($user)) {
      $this->fields['user_inv_data'] = array('type'=> 'html');
      $entity['user_inv_data'] =  '<ul>';
      $entity['user_inv_data'] .= '<li>Канал привлечения подписки:' . $user['inv_channel'] .'</li>';
      $entity['user_inv_data'] .= '<li>current.src подписки:' . $user['inv_channel_src'] .'</li>';
      $entity['user_inv_data'] .= '<li>current.mdm подписки:' . $user['inv_channel_mdm'] .'</li>';
      $entity['user_inv_data'] .= '<li>current.cmp подписки:' . $user['inv_channel_cmp'] .'</li>';
      $entity['user_inv_data'] .= '<li>current.cnt подписки:' . $user['inv_channel_cnt'] .'</li>';
      $entity['user_inv_data'] .= '<li>current.trm подписки:' . $user['inv_channel_trm'] .'</li>';
      $entity['user_inv_data'] .= '</ul>';
    }

    $this->layout->set("fields", $this->fields);
    $pageNum = ManagerHolder::get($this->managerName)->getEntityPageNum($entity['id'], $this->perPage);
    $backUrl = $this->adminBaseRoute . '/' .  strtolower($this->entityUrlName . ($pageNum > 1 ? ('/' . $this->config->item('page_prefix') . $pageNum) : '' ) . get_get_params());
    $this->layout->set("backUrl", $backUrl);
    if (!empty($entity['id'])) {
      $this->layout->set("nextUrl", $this->adminBaseRoute . '/' .  strtolower($this->entityUrlName) . '/next/' . $entity['id'] . '/' . get_get_params());
      $this->layout->set("prevUrl", $this->adminBaseRoute . '/' .  strtolower($this->entityUrlName) . '/prev/' . $entity['id'] . '/' . get_get_params());
    }
    $this->layout->set("processLink", $this->adminBaseRoute . '/' .  strtolower($this->entityUrlName) . '/add_edit_process');
    $this->preAddEditView($entity);
    $this->layout->set("entity", $entity);
    $this->layout->set("actions", $this->actions);
    $this->layout->set("print", $this->print);
    $this->layout->setLayout('admin');
    $this->layout->view('add_edit_siteorder');
  }

  /**
   * getSiteorderCartWithItems
   * @param int $siteOrderId
   */
  private function getSiteorderCartWithItems($siteOrderId) {

    $cart = ManagerHolder::get('Cart')->getOneWhere(array('siteorder_id' => $siteOrderId));

	  if (isset($cart['items']) && !empty($cart['items'])) {
      foreach ($cart['items'] as &$cartItem) {

        // Add supplier request item
        $cartItem['supplier_request_item'] = ManagerHolder::get('SupplierRequestProductParameterGroup')->getOneWhere(array('cart_item_id' => $cartItem['id']), 'e.*, supplier_request.*');

        // Add product
        $cartItem['product'] = ManagerHolder::get('Product')->getById($cartItem['product_id'], 'e.*, brand.*');



        // Add selected by user parameters
        if (!empty($cartItem['additional_product_params'])) {
          $cartItem['additional_product_params'] = unserialize($cartItem['additional_product_params']);
        }

        // Add item parameter group
        if (!empty($cartItem['parameter_group_id'])) {
          $cartItem['parameter_group'] = ManagerHolder::get('ParameterGroup')->getById($cartItem['parameter_group_id'], 'e.*');
        }

        // Get possible parameters
        $cartItem['product']['possible_parameters'] = ManagerHolder::get('ParameterProduct')->getById($cartItem['product']['possible_parameters_id'], 'e.*, parameter_main.*, parameter_secondary.*, possible_parameter_values.*');

        // Get parameter groups of the product
        $cartItem['product']['parameter_groups'] = ManagerHolder::get('ParameterGroup')->getAllWhere(array('product_id' => $cartItem['product']['id']), 'e.*, main_parameter_value.*, secondary_parameter_values_out.*, image.*');
        if(!empty($cartItem['product']['parameter_groups'])) {
          foreach ($cartItem['product']['parameter_groups'] as &$group) {

            $secondaryParamValueIds = get_array_vals_by_second_key($group['secondary_parameter_values_out'], 'id');

            $group['secondary_parameter_values'] = array();
            foreach ($cartItem['product']['possible_parameters']['possible_parameter_values'] as $possibleParamValue) {
              if($cartItem['product']['possible_parameters']['parameter_secondary_id'] == $possibleParamValue['parameter_id']) {
                $possibleParamValue['not_in_stock'] = FALSE;
//                if(in_array($possibleParamValue['id'], $secondaryParamValueIds) || $group['not_in_stock'] == TRUE) {
//                  $possibleParamValue['not_in_stock'] = TRUE;
//                }
                $group['secondary_parameter_values'][] = $possibleParamValue;
              }
            }
          }
        }

	      // Set delivery time
	      $cartItem['delivery_time'] = '';
	      if (!empty($cartItem['zammler_inventory_qty'])){
		      $cartItem['delivery_time'] = "Есть на складе";
	      } elseif (!empty($cartItem['other_stores_inventory_qty'])){
		      $cartItem['delivery_time'] = $cartItem['product']['brand']['delivery_time'];
	      }
        // Add all available parameters
        if (isset($cartItem['product']['product_params_id']) && !empty($cartItem['product']['product_params_id'])) {
          $cartItem['product']['params'] = ManagerHolder::get('ProductParams')->getById($cartItem['product']['product_params_id'], 'e.*');
          $cartItem['product']['params'] = unserialize($cartItem['product']['params']['product_params']);
        }

        $cartItem['reserves'] = ManagerHolder::get('StoreReserve')->getOneWhere(array('cart_item_id' => $cartItem['id'], 'store_id' => ZAMMLER_STORE_ID), 'e.*');
      }
    }

    return $cart;
  }

  /**
   * Add edit
   * @param null $entityId
   */
  public function add_edit($entityId = null) {
    $supplierNewRequests = ManagerHolder::get('SupplierRequest')->getAllWhere(array('status' => 'new'), 'e.*');
    $this->layout->set("supplierNewRequests", $supplierNewRequests);

    // Add stores
    $stores = ManagerHolder::get('Store')->getAsViewArray();
    $this->layout->set('stores', $stores);

    parent::add_edit($entityId);
  }

  /**
   * Add Edit process.
   */
  public function add_edit_process() {
    $this->processTyBroadcast();
    $this->processOrderBroadcast();
    $entity = $this->createEntityPOST();
    $this->processOrderDiscount($entity);
    $this->loadAndResizeImages($entity);
    $this->loadFiles($entity);
    $this->loadVideos($entity);
    $entity = $this->addEditEntity($entity);
    if (isset($_POST['save_and_return_to_list'])) {
      ManagerHolder::get($this->managerName)->updateById($entity['id'], 'blocked_admin_id', NULL);
      $pageNum = ManagerHolder::get($this->managerName)->getEntityPageNum($entity['id'], $this->perPage);
      redirect($this->adminBaseRoute . '/' .  strtolower($this->entityUrlName . ($pageNum > 1 ? ('/' . $this->config->item('page_prefix') . $pageNum) : '' ) . get_get_params()));
    }
    $this->redirectToReffer($entity['id']);
  }

  /**
   * ajax_process_broadcast
   * @param string $broadcastType
   */
  public function ajax_process_broadcast($broadcastType) {
    if (empty($_POST['user'])) {
      return false;
    }

    if ($broadcastType == 'order') {
      $this->processOrderBroadcast();
    } elseif ($broadcastType == 'ty') {
      $this->processTyBroadcast();
    }
  }

  /**
   * Process order discount
   * @param $entity
   */
  private function processOrderDiscount($entity) {
    $cart = ManagerHolder::get('Cart')->getOneWhere(array('siteorder_id' => $entity['id']), 'total');

    $update = array();
    if (isset($_POST['total_discount'])) {
      $update['total_discount'] = $_POST['total_discount'];
      $update['total_with_discount'] = $cart['total'] - $_POST['total_discount'];
      ManagerHolder::get('Cart')->updateAllWhere(array('id' => $cart['id']), $update);
    }
  }

  /**
   * Process Ty Broadcast
   */
  private function processTyBroadcast() {
    if (isset($_POST['send_ty_broadcast'])) {
      $broadcast = ManagerHolder::get('TyBroadcast')->getAll('e.*');
      if (empty($broadcast)) {
        return false;
      }
      $broadcast = $broadcast[0];

      $siteorder = ManagerHolder::get('SiteOrder')->getById($_POST['id'], 'e.*, Cart.*');
      $user = ManagerHolder::get('User')->getById($_POST['user'], 'e.*, auth_info.*, pregnancyweek_current.*');
      if (empty($user)) {
        return false;
      }
      $user['name'] = $_POST['send_ty_broadcast'];
      unset($_POST['send_ty_broadcast']);

      $this->load->helper('project');

      // Create MandrillBroadcast
      $broadcastData = array('subject' => $broadcast['subject'],
                             'text' => '',
                             'recipients_count' => 1,
                             'read_count' => 0,
                             'link_visited_count' => 0,
                             'created_at' => date(DOCTRINE_DATE_FORMAT),
                             'type' => TY_BROADCAST);

      $broadcastId = ManagerHolder::get('MandrillBroadcast')->insert($broadcastData);

      // Collect data to array
      $viewData = ManagerHolder::get('TyBroadcast')->createFirstYearBroadcastContent($broadcast, $user);

      // Save Broadcast Links
      foreach ($viewData as $data) {
        if (!empty($data)) {
          ManagerHolder::get('MandrillBroadcast')->saveBroadcastLinks($data, $broadcastId);
        }
      }

      // Insert recipient data
      $userData = array('email' => $siteorder['email'],
                        'user_id' => $user['id'],
                        'is_read' => 0,
                        'is_send' => 0,
                        'data' => serialize($user),
                        'broadcast_id' => $broadcastId,
                        'updated_at' => date(DOCTRINE_DATE_FORMAT));
      $recipientId = ManagerHolder::get('MandrillBroadcastRecipient')->insert($userData);

      try {
        $metaData = array('broadcast_id' => $broadcastId,
                          'recipient_id' => $recipientId);
        ManagerHolder::get('EmailMandrill')->setMetadata($metaData);
        ManagerHolder::get('EmailMandrill')->sendTemplate($userData['email'], 'ty_broadcast/view', $viewData, $viewData['subject']);
        log_message('debug', '[send_ty_broadcast_single] - Email sent to ' . $userData['email'] . '; Subject: ' . $viewData['subject']);

        ManagerHolder::get('MandrillBroadcast')->updateById($broadcastId, 'sent_date', date(DOCTRINE_DATE_FORMAT));
        ManagerHolder::get('SiteOrder')->updateById($siteorder['id'], 'request_review', TRUE);
      } catch (Exception $e) {
        log_message('error', '[send_ty_broadcast_single] - Broadcast send error:' . $e->getMessage() . '; on email: ' . $user['auth_info']['email']);
      }

      ManagerHolder::get('EmailNotice')->sendNoticeAboutBroadcastEnd(TY_BROADCAST, 1);
    }
  }

  /**
   * Process Order Broadcast
   */
  private function processOrderBroadcast() {
    if (isset($_POST['send_order_broadcast'])) {

      $tempPost = array('fio' => $_POST['fio'],
                        'ttn_code' => $_POST['ttn_code'],
                        'phone' => $_POST['phone']);

      $broadcast = ManagerHolder::get('OrderBroadcast')->getAll('e.*');
      if (empty($broadcast)) {
        return false;
      }
      $broadcast = $broadcast[0];

      $siteorder = ManagerHolder::get('SiteOrder')->getById($_POST['id'], 'e.*, Cart.*');
      if (empty($siteorder)) {
        return false;
      }
      foreach ($tempPost as $k => $f) {
        if (isset($_POST['order_' . $k])) {
          $siteorder[$k] = $_POST['order_' . $k];
          $_POST[$k] = $_POST['order_' . $k];
        }
      }

      $user = ManagerHolder::get('User')->getById($_POST['user'], 'e.*, auth_info.*');
      if (empty($user)) {
        return false;
      }
      $user['name'] = $_POST['fio'];

      $this->load->helper('project');

      // Create MandrillBroadcast
      $broadcastData = array('subject' => kprintf($broadcast['subject'], $_POST),
                             'text' => '',
                             'recipients_count' => 1,
                             'read_count' => 0,
                             'link_visited_count' => 0,
                             'created_at' => date(DOCTRINE_DATE_FORMAT),
                             'type' => ORDER_BROADCAST);

      $broadcastId = ManagerHolder::get('MandrillBroadcast')->insert($broadcastData);

      // Collect data to array
      $viewData = ManagerHolder::get('OrderBroadcast')->createBroadcastContent($broadcast, $user, $siteorder);

      // Save Broadcast Links
      foreach ($viewData as &$data) {
        if (!empty($data)) {
          ManagerHolder::get('MandrillBroadcast')->saveBroadcastLinks($data, $broadcastId);
        }
      }

      // Insert recipient data
      $userData = array('email' => $siteorder['email'],
                        'user_id' => $user['id'],
                        'is_read' => 0,
                        'is_send' => 0,
                        'data' => serialize($user),
                        'broadcast_id' => $broadcastId,
                        'updated_at' => date(DOCTRINE_DATE_FORMAT));
      $recipientId = ManagerHolder::get('MandrillBroadcastRecipient')->insert($userData);

      try {
        $metaData = array('broadcast_id' => $broadcastId,
                          'recipient_id' => $recipientId);
        ManagerHolder::get('EmailMandrill')->setMetadata($metaData);
        ManagerHolder::get('EmailMandrill')->sendTemplate($userData['email'], 'order_broadcast/view', $viewData, $viewData['subject']);
        log_message('debug', '[send_order_broadcast_single] - Email was sent to ' . $userData['email']. '; Subject: ' . $viewData['subject']);

        ManagerHolder::get('MandrillBroadcast')->updateById($broadcastId, 'sent_date', date(DOCTRINE_DATE_FORMAT));
      } catch (Exception $e) {
        log_message('error', '[send_order_broadcast_single] - Broadcast send error:' . $e->getMessage() . '; on email: ' . $user['auth_info']['email']);
      }

      ManagerHolder::get('EmailNotice')->sendNoticeAboutBroadcastEnd(ORDER_BROADCAST, 1);

      // Send SMS to user
      if (isset($_POST['phone']) && !empty($_POST['phone'])) {
        $smsMsg = $_POST['fio'] . ', Ваш заказ отправлен. ТТН ' . $_POST['ttn_code'];
        ManagerHolder::get('AlphaSMS')->sendMessage($_POST['phone'], str_replace(' ', '+', $smsMsg));
        log_message('debug', '[send_order_broadcast_single] - SMS was sent to: ' . $_POST['phone']);
      }

      foreach ($tempPost as $k => $f) {
        $_POST[$k] = $f;
      }
    }
  }

  /**
   * getRefUriString
   */
  private function getRefUriString() {
    $section = str_replace(admin_site_url(''), '', $_SERVER['HTTP_REFERER']);
    if(strpos($section, '?') !== FALSE) {
      $sectionArr = explode('?', $section);
      $section = $sectionArr[0];
    }
    return $section;
  }

  /**
   * admin_activity_tracking.
   */
  public function ajax_admin_activity_tracking() {
    if(!empty($this->loggedInAdmin)) {
      $updateArr = array('last_section_visited' => $this->getRefUriString(),
                         'last_activity_date'   => date(DOCTRINE_DATE_FORMAT));
      ManagerHolder::get('Admin')->updateAllWhere(array('id' => $this->loggedInAdmin['id']), $updateArr);
    }
  }

  /**
   * ajax_check_activity.
   */
  public function ajax_check_activity() {
    if(!empty($this->loggedInAdmin)) {
      $section = $this->getRefUriString();
      $where = array('last_section_visited'  => $section,
                     'last_activity_date >=' => date(DOCTRINE_DATE_FORMAT, time() - 20));
      $otherAdminsInThisSection = ManagerHolder::get('Admin')->getAllWhere($where, 'id, email', null, array($this->loggedInAdmin['id']));
      die(json_encode($otherAdminsInThisSection));
    }
  }

  /**
   * ajax_check_broadcast_send.
   * @param int $id
   * @param string $type
   */
  public function ajax_check_broadcast_send($id, $broadcastType) {
    $entity = ManagerHolder::get($this->entityName)->getById($id, 'e.*');
    if (empty($entity)) {
      show_404();
    }
    $this->layout->setLayout('ajax');
    $this->layout->set('siteorder', $entity);
    $this->layout->view('siteorder/ajax_check_' . $broadcastType . '_broadcast_send');
  }

  /**
   * ajax_check_order_shipmet_doc.
   * @param int $id
   * @param string $type
   */
  public function ajax_check_order_shipmet_doc($id) {
    $entity = ManagerHolder::get($this->entityName)->getById($id, 'e.*, siteorder_status.*');
    if (empty($entity)) {
      show_404();
    }
    $this->layout->setLayout('ajax');
    $this->layout->set('siteorder', $entity);
    $this->layout->view('siteorder/ajax_check_order_shipment_doc');
  }


  /**
   * Export process.
   */
  public function export_process() {
    if (!$this->export) show_404();

    $entityObject = new $this->entityName;

    $_POST = array_make_plain_with_dots($_POST);

    $fields = array();
    if (!isset($this->fields['id'])) {
      $fields = array('id');
    }

    foreach ($this->fields as $k => $v) {
      if (!isset($_POST[$k]) || $_POST[$k] == 0) continue;
      $fields[] = $k;
    }

    // Export filters
    $exportFilters = array();

    if (isset($_POST['exportfilter_batch_export_ids'])) {
      $exportFilters['id'] = explode(',', $_POST['exportfilter_batch_export_ids']);
    } else {

      // foreignKeys
      $foreignKeys = ManagerHolder::get($this->managerName)->getForeignKeys();
      $foreignKeysAliases = array();
      foreach($foreignKeys as $alias => $fk) {
        $foreignKeysAliases[$fk['local']] = $alias;
      }

      foreach ($this->filters as $k => $v) {
        $key = 'exportfilter_' . str_replace('.', '_', $k);
        if (isset($_POST[$key])) {
          $exportFilters[$k] = $_POST[$key];
          // company_id => company
          if($foreignKeysAliases && isset($foreignKeysAliases[$k])) {
            $k = $foreignKeysAliases[$k];
          }
          if (!in_array($k, $fields)) {
            $fields[] = $k;
          }
        }
      }
      foreach ($this->dateFilters as $k) {
        $key = 'exportfilter_' . str_replace('.', '_', $k);
        if (isset($_POST[$key])) {
          if (strpos($_POST[$key], 'BETWEEN') !== FALSE) {
            $exportFilters[$k . 'BETWEEN'] = trim(str_replace('BETWEEN', '', $_POST[$key]));
          }
          if (strpos($_POST[$key], '>') !== FALSE) {
            $exportFilters[$k . '>'] = trim(str_replace('>', '', $_POST[$key])) . ' 00:00:00';
          }
          if (strpos($_POST[$key], '<') !== FALSE) {
            $exportFilters[$k . '<'] = trim(str_replace('<', '', $_POST[$key])) . ' 23:59:59';
          }
          // company_id => company
          if($foreignKeysAliases && isset($foreignKeysAliases[$k])) {
            $k = $foreignKeysAliases[$k];
          }
          if (!in_array($k, $fields)) {
            $fields[] = $k;
          }
        }
      }
    }

    if (!empty($this->extraWhere)) {
      $exportFilters = array_merge($exportFilters, $this->extraWhere);
    }

    if (!empty($exportFilters)) {
      $entities = ManagerHolder::get($this->managerName)->export($exportFilters, $fields);
    } else {
      // Get everything from DB
      $entities = ManagerHolder::get($this->managerName)->export(array(), $fields);
    }

    $entityObject = new $this->entityName;

    // Load CSV Library
    $this->load->library('common/csv');

    if (!isset($_POST['id']) || empty($_POST['id'])) {
      unset($fields[array_search('id', $fields)]);
    }

    // Set headers
    $ftrans = array();
    $fields[] = 'user_inv_channel';
    $fields[] = 'user_inv_channel_src';
    $fields[] = 'user_inv_channel_mdm';
    $fields[] = 'user_inv_channel_cmp';
    $fields[] = 'user_inv_channel_cnt';
    $fields[] = 'user_inv_channel_trm';


    foreach ($fields as $f) {
      $ftrans[] = html_entity_decode(lang('admin.add_edit.' . strtolower($this->entityName) . '.' .  str_replace('.*', '', $f)));
    }
    $ftrans[] = 'Сумма';

    $this->csv->addHeader($ftrans);
    if ($entities) {

      // Get all carts
      $carts = array();
      $soIds = get_array_vals_by_second_key($entities, 'id');
      $tempCarts = ManagerHolder::get('Cart')->getAllWhere(array('siteorder_id' => $soIds), 'e.*');
      if(!empty($tempCarts)) {
        foreach ($tempCarts as $tc) {
          if(!isset($carts[$tc['siteorder_id']])) {
            $carts[$tc['siteorder_id']] = $tc;
          }
        }
      }

      // Get all users
      $users = ManagerHolder::get('User')->getAllWhere(array('orders.id' => $soIds), 'id, inv_channel, inv_channel_src, inv_channel_mdm, inv_channel_cmp, inv_channel_cnt, inv_channel_trm');
      foreach ($users as &$u) {
        $orderIds = array();
        foreach ($u['orders'] as $o) {
          $orderIds[] = $o['id'];
        }
        $u['orders'] = $orderIds;
      }

      // Process Rows
      $rows = array();
      foreach ($entities as $e) {

        // Process user_inv_data
        $e['user_inv_channel']  = '';
        $e['user_inv_channel_src']  = '';
        $e['user_inv_channel_mdm']  = '';
        $e['user_inv_channel_cmp']  = '';
        $e['user_inv_channel_cnt']  = '';
        $e['user_inv_channel_trm']  = '';
        foreach ($users as $u) {
          if(in_array($e['id'], $u['orders'])) {
            $e['user_inv_channel']  = $u['inv_channel'];
            $e['user_inv_channel_src']  = $u['inv_channel_src'];
            $e['user_inv_channel_mdm']  = $u['inv_channel_mdm'];
            $e['user_inv_channel_cmp']  = $u['inv_channel_cmp'];
            $e['user_inv_channel_cnt']  = $u['inv_channel_cnt'];
            $e['user_inv_channel_trm']  = $u['inv_channel_trm'];
            break;
          }
        }

        $row = array();
        foreach ($fields as $key) {
          $row[$key] = $e[$key];
        }
        // Process cart total
        if(isset($carts[$e['id']])) {
          $row[] = $carts[$e['id']]['total'];
        }

        $row = $this->preProcessExportRow($row, $fields);
        $rows[] = $row;
      }
      $this->csv->addRows($rows);
    }

    // Send file to output
    $this->csv->flushFile(lang('admin.entity_list.' . strtolower($this->entityName) . '.list_title') . '.csv');
    die();
  }

  /**
   * Change status AJAX
   */
  public function change_status() {
    if (!isset($_GET['vl']) || !isset($_GET['siteOrderId'])) {
      die('ERROR1');
    }
    $siteOrderId = $_GET['siteOrderId'];
    $statusId = $_GET['vl'];
    $newstatus = 'ok';
    $smsview = '';

    $siteOrderStatus = ManagerHolder::get('SiteOrderStatus')->getById($statusId, 'e.*');
    $siteorder = ManagerHolder::get('SiteOrder')->getById($siteOrderId, 'e.*, siteorder_status.*, blocked_admin.*');
    if (empty($siteorder)) {
      die('ERROR2');
    }
    if (!empty($siteorder['siteorder_status']) && $siteorder['siteorder_status']['k'] == SITEORDER_STATUS_CANCELED) {
      $message = array('status' => 'busy', 'message' => 'Нельзя изменить статус, заказ был отменен');
      $data = json_encode($message);
      die($data);
    }
    if (!empty($siteorder['blocked_admin_id']) && $siteorder['blocked_admin_id'] != $this->loggedInAdmin['id']) {
      $message = array('status' => 'busy', 'message' => 'Заказ заблокирован! Сейчас его редактирует ' . $siteorder['blocked_admin']['name']);
      $data = json_encode($message);
      die($data);
    }
    if ($siteOrderStatus['k'] == SITEORDER_STATUS_CLIENT_CONFIRMED && (empty($siteorder['shipment_store_id']) || empty($siteorder['shipment_date']))) {
      $message = array('status' => 'busy', 'message' => 'Не указан склад отгрузки или дата отгрузки');
      $data = json_encode($message);
      die($data);
    }
    if ($statusId == 'NULL') {
      ManagerHolder::get('SiteOrder')->updateById($siteOrderId, 'siteorder_status_id', null);
    } else {
      $status = ManagerHolder::get('SiteOrderStatus')->getById($statusId, 'e.*');
      if (empty($status)) {
        die('ERROR3');
      }
      ManagerHolder::get('SiteOrder')->updateById($siteOrderId, 'siteorder_status_id', $statusId);
      $this->layout->setLayout('ajax');
      $templates = array();
      if ($status['k'] == SITEORDER_STATUS_WAIT) {
        $templates = ManagerHolder::get('SmsTemplate')->getAllWhere(array('type' => SMS_TEMPLATE_PAYMENT), 'e.*');
        $smsview = $this->layout->render('includes/admin/siteorder/smssend', array('templates' => $templates, 'order' => $siteorder), TRUE);
      }
//       if ($status['k'] == SITEORDER_STATUS_SHIPPED) {
//         $templates = ManagerHolder::get('SmsTemplate')->getAllWhere(['type' => SMS_TEMPLATE_TTN], 'e.*');
//         $smsview = $this->layout->render('includes/admin/siteorder/smssend', array('templates' => $templates, 'order' => $siteorder), TRUE);
//       }
      $newstatus = $status['k'];
    }
    $this->processStatusChange($siteorder['id']);
    $data = json_encode(array('status' => $newstatus, 'sms' => $smsview));
    die($data);
  }

  /**
   * Change shipment store AJAX
   */
  public function change_shipment_store() {
    if (!isset($_GET['vl']) || !isset($_GET['siteOrderId'])) {
      die('ERROR1');
    }
    $siteOrderId = $_GET['siteOrderId'];
    $shipmentStoreId = $_GET['vl'];
    $siteorder = ManagerHolder::get('SiteOrder')->getById($siteOrderId, 'e.*, blocked_admin.*');
    if (empty($siteorder)) {
      die('ERROR2');
    }
    if (!empty($siteorder['blocked_admin_id']) && $siteorder['blocked_admin_id'] != $this->loggedInAdmin['id']) {
      $message = array('status' => 'busy', 'message' => 'Заказ заблокирован! Сейчас его редактирует ' . $siteorder['blocked_admin']['name']);
      $data = json_encode($message);
      die($data);
    }
    if ($shipmentStoreId == 'NULL') {
      ManagerHolder::get('SiteOrder')->updateById($siteOrderId, 'shipment_store_id', null);
    } else {
      $shipmentStore = ManagerHolder::get('Store')->getById($shipmentStoreId, 'e.*');
      if (empty($shipmentStore)) {
        die('ERROR3');
      }
      ManagerHolder::get('SiteOrder')->updateById($siteOrderId, 'shipment_store_id', $shipmentStoreId);
      $this->layout->setLayout('ajax');
    }

    $data = json_encode(array('status' => 'ok'));
    die($data);
  }

  /**
   * Change status AJAX
   */
  public function change_manager() {
    if (!isset($_GET['vl']) || !isset($_GET['siteOrderId'])) {
      die('ERROR1');
    }
    $siteOrderId = $_GET['siteOrderId'];
    $managerId = $_GET['vl'];
    $siteorder = ManagerHolder::get('SiteOrder')->getById($siteOrderId, 'e.*, blocked_admin.*');
    if (empty($siteorder)) {
      die('ERROR2');
    }

    if (!empty($siteorder['blocked_admin_id']) && $siteorder['blocked_admin_id'] != $this->loggedInAdmin['id']) {
      $message = array('status' => 'busy', 'message' => 'Заказ заблокирован! Сейчас его редактирует ' . $siteorder['blocked_admin']['name']);
      $data = json_encode($message);
      die($data);
    }
    if ($managerId == 'NULL') {
      ManagerHolder::get('SiteOrder')->updateById($siteOrderId, 'manager_id', null);
    } else {
      $manager = ManagerHolder::get('Admin')->getById($managerId, 'e.*');
      if (empty($manager)) {
        die('ERROR3');
      }
      ManagerHolder::get('SiteOrder')->updateById($siteOrderId, 'manager_id', $managerId);
      $this->layout->setLayout('ajax');
    }

    $data = json_encode(array('status' => 'ok'));
    die($data);
  }

  /**
   * Change shipment date AJAX
   */

  public function change_shipment_date() {
    if (!isset($_GET['vl']) || !isset($_GET['siteOrderId'])) {
      die('ERROR1');
    }
    $siteOrderId = $_GET['siteOrderId'];
    $shipmentDate = $_GET['vl'];
    $siteorder = ManagerHolder::get('SiteOrder')->getById($siteOrderId, 'e.*, blocked_admin.*');
    if (!empty($siteorder['blocked_admin_id']) && $siteorder['blocked_admin_id'] != $this->loggedInAdmin['id']) {
      $message = array('status' => 'busy', 'message' => 'Заказ заблокирован! Сейчас его редактирует ' . $siteorder['blocked_admin']['name']);
      $data = json_encode($message);
      die($data);
    }
    ManagerHolder::get('SiteOrder')->updateById($siteOrderId, 'shipment_date', $shipmentDate);
    $data = json_encode(array('status' => 'ok'));
    die($data);
  }

  /**
   * Change paid AJAX
   */
  public function change_paid() {
    if (!isset($_GET['vl']) || !isset($_GET['siteOrderId'])) {
      die('ERROR1');
    }
    $siteOrderId = $_GET['siteOrderId'];
    $paid = $_GET['vl'];
    $siteorder = ManagerHolder::get('SiteOrder')->getById($siteOrderId, 'e.*, blocked_admin.*');
    if (!empty($siteorder['blocked_admin_id'])) {
      $message = array('status' => 'busy', 'message' => 'Заказ заблокирован! Сейчас его редактирует ' . $siteorder['blocked_admin']['name']);
      $data = json_encode($message);
      die($data);
    }
    ManagerHolder::get('SiteOrder')->updateById($siteOrderId, 'paid', $paid);

    $data = json_encode(array('status' => 'ok'));
    die($data);
  }

  /**
   * Change TTN number AJAX
   */

  public function change_ttn() {
    if (!isset($_GET['vl']) || !isset($_GET['siteOrderId'])) {
      die('ERROR1');
    }
    $siteOrderId = $_GET['siteOrderId'];
    $paid = $_GET['vl'];
    $siteorder = ManagerHolder::get('SiteOrder')->getById($siteOrderId, 'e.*, blocked_admin.*');
    if (!empty($siteorder['blocked_admin_id'])) {
      $message = array('status' => 'busy', 'message' => 'Зака заблокирован! Сейчас его редактирует ' . $siteorder['blocked_admin']['name']);
      $data = json_encode($message);
      die($data);
    }
    ManagerHolder::get('SiteOrder')->updateById($siteOrderId, 'ttn_code', $_GET['vl']);
    $data = json_encode(array('status' => 'ok'));
    die($data);
  }

  /**
   * Change SMS Template AJAX
   */

  public function change_sms_template() {
    if (!isset($_POST['order']) || !isset($_POST['template'])) {
      die('ERROR INCOME DATA');
    }
    $orderId = $_POST['order'];
    $templateId = $_POST['template'];
    $template = ManagerHolder::get('SmsTemplate')->getById($templateId, 'e.*');
    $order = ManagerHolder::get('SiteOrder')->getById($orderId, 'e.*');
    if (empty($order) || empty($template)) {
      die('INCORRECT DATA');
    }
    if($template['type'] == SMS_TEMPLATE_TTN){
      $from = array('{ttn}', '{name}', '{order}', '  ');
      $to = array($order['ttn_code'], $order['fio'], $order['code'], '');
    }
    if($template['type'] == SMS_TEMPLATE_PAYMENT){
      $from = array('{sum}', '{name}', '{order}', '  ');
      $to = array($order['total'], $order['fio'], $order['code'], '');
    }
    $newtext = str_replace($from, $to, $template['text']);
    die($newtext);
  }

  /**
   * Send SMS AJAX
   */
  public function send_sms() {
    if (!isset($_GET['phone']) || !isset($_GET['smstext'])) {
      die('ERROR INCOME DATA');
    }
    $phone = $_GET['phone'];
    $text = str_replace(' ', '+', $_GET['smstext']);
    ManagerHolder::get('AlphaSMS')->sendMessage($phone, $text);
    die('ok');
  }



  /**
   * @param Object $entity
   * @return Object|void
   */
  protected function postUpdate(&$entity) {
    $this->processStatusChange($entity['id']);
//    $this->checkProductsCount($entity['id']);
  }

  /**
   * @param Object $entity
   * @return Object|void
   */
  protected function preUpdate(&$entity) {
    if ($entity['is_canceled']) {
      $cancelStatusId = ManagerHolder::get('SiteOrderStatus')->getIDByKey(SITEORDER_STATUS_CANCELED);
      $isSiteOrderCanceled = ManagerHolder::get('SiteOrder')->existsWhere(array('id' => $entity['id'], 'siteorder_status_id' => $cancelStatusId));
      if ($isSiteOrderCanceled) {
        $entity['siteorder_status_id'] = $cancelStatusId;
      }
    }
  }

  /**
   * Set filter
   */
  protected function setFilter() {
    parent::setFilter();

    foreach ($this->filters as $k => $filter) {
      if (strpos($k, 'shipment_date') !== FALSE) {
        unset($this->filters[$k]);
        break;
      }
    }

    if (isset($_GET['shipment_date_from']) && isset($_GET['shipment_date_to'])) {
      $this->filters['shipment_date BETWEEN'] = $_GET['shipment_date_from'] . ' AND ' . $_GET['shipment_date_to'];
    } else {
      if (isset($_GET['shipment_date_from'])) {
        $this->filters['shipment_date>='] = $_GET['shipment_date_from'];
      }
      if (isset($_GET['shipment_date_to'])) {
        $this->filters['shipment_date<='] = $_GET['shipment_date_to'];
      }
    }
  }

  /**
   * Post status change
   * @param $siteOrderId
   */
  protected function processStatusChange($siteOrderId) {
    $siteOrder = ManagerHolder::get('SiteOrder')->getById($siteOrderId, 'id, siteorder_status_id, is_canceled');
    $siteOrderStatus = ManagerHolder::get('SiteOrderStatus')->getById($siteOrder['siteorder_status_id']);

    if ($siteOrderStatus['is_cancel_reserve_status']) {
      $cart = ManagerHolder::get('Cart')->getOneWhere(array('siteorder_id' => $siteOrder['id']), 'e.*');
      $cartItems = ManagerHolder::get('CartItem')->getAllWhere(array('cart_id' => $cart['id']), 'e.*');
      foreach ($cartItems as $cartItem) {
        ManagerHolder::get('StoreReserve')->deleteWhere('cart_item_id', $cartItem['id']);
      }
    }

    $notCountUpdateStatuses = array(SITEORDER_STATUS_SHIPPED, SITEORDER_STATUS_DELIVERED, SITEORDER_STATUS_RETURNED, SITEORDER_STATUS_CANCELED);
    if (in_array($siteOrderStatus['k'], $notCountUpdateStatuses) && !$siteOrder['is_canceled']) {
      ManagerHolder::get('SiteOrder')->updateById($siteOrderId, 'is_canceled', TRUE);
    }
   }

   /**
   * Check products count
   * @param $siteOrderId
   */
  protected function checkProductsCount($siteOrderId) {
    // TODO: delete
    return TRUE;

    $cart = ManagerHolder::get('Cart')->getOneWhere(array('siteorder_id' => $siteOrderId), 'id');
    $cartItems = ManagerHolder::get('CartItem')->getAllWhere(array('cart_id' => $cart['id']), 'e.*, product.*, parameter_group.*');
    $endedProducts = array('product_ids' => array(), 'parameter_group_ids' => array());

    foreach ($cartItems as $cartItem) {
      if ($cartItem['product']['our_stock'] && $cartItem['product']['count'] <= 0) {
        $endedProducts['product_ids'][] = $cartItem['product_id'];
      }
      if (!empty($cartItem['parameter_group']) && $cartItem['parameter_group']['our_stock'] && $cartItem['parameter_group']['count'] <= 0) {
        $endedProducts['parameter_group_ids'][] = $cartItem['parameter_group_id'];
      }
    }

    if (!empty($endedProducts['product_ids']) || !empty($endedProducts['parameter_group_ids'])) {
      ManagerHolder::get('EmailNotice')->sendOurStockProductEndedToAdmins($endedProducts);
    }
  }

  /**
   * Ajax get cart view
   * @param $siteOrderId
   */
  public function ajax_get_cart_view($siteOrderId) {
    $cart = $this->getSiteorderCartWithItems($siteOrderId);
    $supplierNewRequests = ManagerHolder::get('SupplierRequest')->getAllWhere(array('status' => 'new'), 'e.*');

    $this->load->helper('project');

    // RENDER NEW HTML OF CART DATA-----------------------------------------------------------------
    $html = '';

    $this->layout->setLayout('empty');

    $stores = ManagerHolder::get('Store')->getAsViewArray();
    $siteOrderStatus = ManagerHolder::get('SiteOrderStatus')->getById($cart['siteorder']['siteorder_status_id'], 'e.*');
    $onWayProducts = ManagerHolder::get('SupplierRequest')->getOnWayData();
    $this->layout->set('onWayProducts', $onWayProducts);
    $this->layout->set('siteOrderStatus', $siteOrderStatus);
    $this->layout->set('stores', $stores);
    $this->layout->set('cart', $cart);
    $this->layout->set("supplierNewRequests", $supplierNewRequests);
    $html .= $this->layout->view('siteorder/cart', TRUE);

    $products = ManagerHolder::get('Product')->getAll('e.*, product_params.*');
    foreach ($products as &$product) {
      if (!empty($product['product_params_id'])) {
        $product['params'] = ManagerHolder::get('ProductParams')->getById($product['product_params_id'], 'e.*');
      }
    }
    unset($product);

    $this->layout->set('products', $products);
    $html .= $this->layout->view('siteorder/add_to_cart', TRUE);

    die($html);
  }

  /**
   * Ajax reserve
   * @param $cartItemId
   */
  public function ajax_reserve($cartItemId) {
    $cartItem = ManagerHolder::get('CartItem')->getById($cartItemId, 'e.*');
    if (!empty($cartItem['parameter_group_id'])) {
      $productGroup = ManagerHolder::get('ParameterGroup')->getById($cartItem['parameter_group_id'], 'e.*, product.*, inventories.*, reserves.*, main_parameter_value.*');
      $product = $productGroup['product'];
      $reserves = $productGroup['reserves'];
      $inventories = $productGroup['inventories'];
    } else {
      $product = ManagerHolder::get('Product')->getById($cartItem['product_id'], 'e.*, inventories.*, reserves.*');
      $reserves = $product['reserves'];
      $inventories = $product['inventories'];
      $productGroup = array();
    }

    $storeReserves = array();
    $currentReserve = array('qty' => 0);
    foreach ($reserves as $reserve) {
      if (isset($storeReserves[$reserve['store_id']])) {
        $storeReserves[$reserve['store_id']] += $reserve['qty'];
      } else {
        $storeReserves[$reserve['store_id']] = $reserve['qty'];
      }
      if ($reserve['cart_item_id'] == $cartItem['id']) {
        $currentReserve = $reserve;
      }
    }

    $storeInventories = array();
    foreach ($inventories as $inventory) {
      $storeInventories[$inventory['store_id']]['qty'] = $inventory['qty'];
      if (isset($storeReserves[$inventory['store_id']])) {
        $storeInventories[$inventory['store_id']]['free_qty'] = $inventory['qty'] - $storeReserves[$inventory['store_id']];
      } else {
        $storeInventories[$inventory['store_id']]['free_qty'] = $inventory['qty'];
      }
    }

    $this->layout->setLayout('ajax');
    $this->layout->set('cartItem', $cartItem);
    $this->layout->set('product', $product);
    $this->layout->set('storeInventories', $storeInventories);
    $this->layout->set('storeReserves', $storeReserves);
    $this->layout->set('currentReserve', $currentReserve);
    $this->layout->set('productGroup', $productGroup);
    $this->layout->set('isSaved', FALSE);

    $this->layout->view('siteorder/reserve');
  }

  /**
   * Ajax reserve process
   * @param $cartItemId
   */
  public function ajax_reserve_process($cartItemId) {
    $cartItem = ManagerHolder::get('CartItem')->getById($cartItemId, 'e.*');
    if (empty($cartItem)) {
      show_404();
    }

    foreach ($_POST['stores'] as $storeId => $data) {
      $reserve = array();
      $reserve['store_id'] = $storeId;
      $reserve['cart_item_id'] = $cartItem['id'];

      $exists = ManagerHolder::get('StoreReserve')->existsWhere($reserve);
      if (!$exists) {
        $reserve['product_id'] = $cartItem['product_id'];
        $reserve['product_group_id'] = $cartItem['parameter_group_id'];
        $reserve['qty'] = $data['qty'];
        ManagerHolder::get('StoreReserve')->insert($reserve);
      } else {
        ManagerHolder::get('StoreReserve')->updateWhere($reserve, 'qty', $data['qty']);
      }
    }
    $this->load->helper('common/itirra_ajax');
    set_flash_notice('Резерв успешно обновлен');
    uni_redirect(admin_site_url('siteorder/ajax_reserve/' . $cartItem['id']));
  }


  /**
   * Ajax total discount process
   */
  public function ajax_total_discount_process() {
    $entity = array('id' => $_GET['siteOrderId']);
    $this->processOrderDiscount($entity);

    die('DONE');
  }

}