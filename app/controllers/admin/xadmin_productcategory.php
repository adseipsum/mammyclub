<?php if (!defined("BASEPATH")) exit("No direct script access allowed");
/**
 * xAdmin_ProductCategory
 * This class has been auto-generated by Itirra
 */
require_once APPPATH . 'controllers/admin/base/base_admin_tree_controller.php';
class xAdmin_ProductCategory extends Base_Admin_Tree_Controller {

  /** Filters. */
  protected $filters = array("published" => "");

	/**
	 * Implementation  PRE_SAVE event callback
	 * @param Object $entity reference
	 * @return Object
	 */
	protected function preSave(&$entity) {
		$parentFilterExists = ManagerHolder::get('ProductCategoryFilter')->existsWhere(array('product_category_id' => $_POST['parent_id']));
		if ($parentFilterExists){
			set_flash_error('Необходимо удалить фильтры родительской категории');
			redirect_to_referral();
		}
		return parent::preSave($entity); // TODO: Change the autogenerated stub
	}


	/**
	 * Add edit entity.
	 * @param $entityId
	 * @param $parentId
	 */
	public function add_edit($entityId = null, $parentId = null) {
		$categoryFilterExists = ManagerHolder::get('ProductCategoryFilter')->existsWhere(array('product_category_id' => $entityId));
		if (!empty($entityId)){
			$children = ManagerHolder::get($this->entityName)->getChildren($entityId);
			if (!empty($children) && empty($categoryFilterExists)){
				unset($this->fields['filters']);
			}
		}
		parent::add_edit($entityId, $parentId); // TODO: Change the autogenerated stub
	}


	/**
	 * Add child.
	 * @param $entityId
	 * @param $parentId
	 */
	public function add_child($parentId, $entityId = null) {
		$parentFilterExists = ManagerHolder::get('ProductCategoryFilter')->existsWhere(array('product_category_id' => $parentId));
		if ($parentFilterExists) {
			set_flash_error('Необходимо удалить фильтры родительской категории');
			redirect_to_referral();
		}
		parent::add_child($parentId, $entityId); // TODO: Change the autogenerated stub
	}


	/**
   * Implementation of PRE_UPDATE event callback
   * @param Object $entity reference
   * @return Object
   */
  protected function preUpdate(&$entity) {
    $entityFromDb = ManagerHolder::get($this->managerName)->getById($entity['id'], 'page_url, filters.*');
    if ($entityFromDb['page_url'] != $entity['page_url']) {
          $redirectData = array('old_url' => $entityFromDb['page_url'],
                            'new_url' => $entity['page_url']);
      // Check if we already have a redirect from current old url or eternal cycle
      $checkWhereArray = array(array('old_url' => $redirectData['old_url']),
                               array('old_url' => $redirectData['new_url'],
                                     'new_url' => $redirectData['old_url']));
      foreach ($checkWhereArray as $where) {
        $redirectUrl = ManagerHolder::get('RedirectUrl')->getOneWhere($where, 'e.*');
        if (!empty($redirectUrl)) {
          ManagerHolder::get('RedirectUrl')->deleteById($redirectUrl['id']);
        }
      }
      ManagerHolder::get('RedirectUrl')->insert($redirectData);
    }

    $entArr = $entity->toArray();
    $filterIds = array();
    if(!empty($entArr['filters'])) {
      $filterIds = get_array_vals_by_second_key($entArr['filters'], 'id');
      // Check for child categories
      $childCats = ManagerHolder::get($this->entityName)->getDescendants($entArr['id'], null, FALSE, Doctrine_Core::HYDRATE_ARRAY);
      if(!empty($childCats)) {
        $childCatsIds = get_array_vals_by_second_key($childCats, 'id');
        $childCats = ManagerHolder::get($this->entityName)->getAllWhere(array('id' => $childCatsIds), 'e.*, filters.*');
        foreach ($entArr['filters'] as $filter) {
          foreach ($childCats as $c) {
            $categoryFilterIds = get_array_vals_by_second_key($c['filters'], 'id');
            if(!in_array($filter['id'], $categoryFilterIds)) {
              $data = array('product_category_id' => $c['id'],
                            'filter_id'           => $filter['id']);
              ManagerHolder::get('ProductCategoryFilter')->insert($data);
            }
          }
        }
      }
    }

    // Get missing filters and remove them from products
    $products = ManagerHolder::get('Product')->getAllWhere(array('category_id' => $entityFromDb['id']), 'id');
    $pIds = get_array_vals_by_second_key($products, 'id');
    if(!empty($entityFromDb['filters'])) {
      foreach ($entityFromDb['filters'] as $dbFilter) {
        if(!in_array($dbFilter['id'], $filterIds)) {
          // Get all filtervalues
          $filterValueIds = get_array_vals_by_second_key($dbFilter['filtervalues'], 'id');
          ManagerHolder::get('ProductFilterValue')->deleteAllWhere(array('product_id' => $pIds, 'filter_value_id' => $filterValueIds));
        }
      }
    }

    ManagerHolder::get('ProductCategoryProductCategory')->deleteAllWhere(array('product_category_id' => $entityFromDb['id']));
  }

}