<?php if (!defined("BASEPATH")) exit("No direct script access allowed");
/**
 * xAdmin_Product
 * This class has been auto-generated by Itirra
 */
require_once APPPATH . 'controllers/admin/base/base_admin_controller.php';
class xAdmin_Product extends Base_Admin_Controller {

  /** Additional Actions. */
  protected $additionalActions = array('feed_export', 'sortorder_recount', 'barcode_import', 'our_stock_export');

  /** Additional Actions. Simple Array. Ex. array('view', 'print')*/
  protected $additionalItemActions = array('view', 'clone_product');

  /** Filters. */
  protected $filters = array("published" => "",
                             "category.id" => "",
                             "brand.id" => "",
                             "stock_status" => "");

  /** SearchParams. */
  protected $searchParams = array("name", "product_code");

  /** An array of properties to rewrite creating links in list view. */
  protected $listViewLinksRewrite = array("category" => "productcategory", "brand" => "productbrand");

  /** Entity view file. */
  protected $itemView = 'product/add_edit_entity';

  /** savedPossibleParameters. */
  private $savedPossibleParameters = array();

  /** savedParameterGroups. */
  private $savedParameterGroups = array();

  /** $savedParameterProductLinks. */
  private $savedParameterProductLinks = array();

  /** $savedParameterValueLink. */
  private $savedParameterValueLink = NULL;

  /** savedFilterValues. */
  private $savedFilterValues = array();


  /** Import */
  protected $import = TRUE;

  /** Import Exclude Fields */
  protected $importExcludeFields = array('image', 'images', 'head_section_code', 'possible_parameters', 'parameter_groups', 'page_url', 'video', 'parameter_link', 'parameter_product_links', 'parameter_value_link', 'filter_values');

  /** Export */
  protected $export = TRUE;

  /** Export Exclude Fields */
  protected $exportExcludeFields = array('image', 'images', 'head_section_code', 'possible_parameters', 'parameter_groups', 'page_url', 'video', 'parameter_link', 'parameter_product_links', 'parameter_value_link', 'filter_values');

  /**
   * Process templates for existing entities
   */
  public function process_templates() {
    $entities = ManagerHolder::get($this->entityName)->getAll('e.*');
    foreach ($entities as $e) {
      if (isset($e['templates_ignore']) && $e['templates_ignore'] == FALSE) {
        ManagerHolder::get($this->entityName)->processTemplates($e['id'], 'e.*', TRUE);
      }
    }
    set_flash_notice('done');
    redirect(admin_site_url(strtolower($this->entityName)));
  }

  /**
   * Add edit process
   */
  public function add_edit_process() {
    if (isset($_POST['save_and_update_revision_date'])) {
      $_POST['last_revision_date'] = date(DOCTRINE_DATE_FORMAT);
      $_POST['save_and_return_to_list'] = 1;
    }
    parent::add_edit_process();
  }

  /**
   * barcode_import
   */
  public function barcode_import() {
    $this->setFilter();
    $this->layout->set("processLink", $this->adminBaseRoute . '/' .  strtolower($this->entityUrlName) . '/barcode_import_process' . get_get_params());
    $this->layout->set("backUrl", $this->adminBaseRoute . '/' .  strtolower($this->entityUrlName) . get_get_params());
    $this->layout->view('product/barcode_import');
  }

  /**
   * barcode_import_process
   */
  public function barcode_import_process() {
    set_time_limit(0);
    $this->load->helper('project');
    $langMap = array('barcode_key' => 'штрихкод',
                     'items_left'  => 'остаток');

    $this->setFilter();
    $where = $this->filters;
    $products = ManagerHolder::get('Product')->getAllWhere($where, 'e.*, parameter_groups.*');
    if(empty($products)) {
      set_flash_error('Не найдено товаров в пределах заданных фильтров');
      redirect_to_referral();
    }

    // Get all rows into array
    $this->fileoperations->set_upload_lib_config_value("allowed_types", 'csv');
    try {
      $uploadResult = $this->fileoperations->upload('import_file', TRUE, './web');
    } catch (Exception $e) {
      set_flash_error($e->getMessage());
      log_message('error', $e->getMessage());
      $this->redirectToReffer();
    }
    $fileInfo = $this->fileoperations->file_info;

    // Load CSV Library
    $this->load->library('common/csv');

    // Read CSV File
    $this->csv->readFile($fileInfo['file_path'] . $fileInfo['file_name']);

    // Header
    $header = $this->csv->readRow();
    if (!$header || count($header) < 1) {
      set_flash_error('admin.import.error.wrong_file_format');
      $this->redirectToReffer();
    }
    foreach ($header as $k => $v) {
      $header[$k] = mb_strtolower($v, 'utf-8');
    }

    $processedRows = array();
    $rowsInfo = array('processed' => 0, 'updated' => 0, 'failed' => 0);
    while (($row = $this->csv->readRow()) !== FALSE) {

      $rowsInfo['processed']++;

      if(count($header) != count($row)) {
        $rowsInfo['failed']++;
        continue;
      }

      $row = array_combine($header, $row);

      if(!isset($row[$langMap['barcode_key']]) || empty($row[$langMap['barcode_key']])  || !isset($row[$langMap['items_left']])) {
        $rowsInfo['failed']++;
        continue;
      }

      $processedRows[] = array('bar_code' => string_clean_up($row[$langMap['barcode_key']]),
//                               'on_order' => $row[$langMap['items_left']] == 0,
                               'count' => $row[$langMap['items_left']]);
    }

    if(empty($processedRows)) {
      set_flash_error('В файле не найдено товаров для обработки');
      redirect_to_referral();
    }

    // Filter products on groups
    $groups = array('simple' => array(),
                    'with_param_groups' => array());
    foreach ($products as $k => $p) {
      if($p['not_in_stock'] == TRUE) {
        continue;
      }
      if($p['our_stock'] == TRUE) {
        continue;
      }
      if(empty($p['parameter_groups'])) {
        if(!empty($p['bar_code'])) {
          $groups['simple'][] = $p;
        }
      } else {
        if(!empty($p['bar_code'])) {
          continue;
        }
        // Check if prodtct has at least 1 param group with bc filled
        $paramGroupsWithBC = array();
        foreach ($p['parameter_groups'] as $pg) {
          if($pg['our_stock'] == TRUE) {
            continue;
          }
          if(!empty($pg['bar_code'])) {
            $paramGroupsWithBC[] = $pg;
          }
        }
        if(empty($paramGroupsWithBC)) {
          continue;
        }
        $p['parameter_groups'] = $paramGroupsWithBC;
        $groups['with_param_groups'][] = $p;
      }
    }

    // 1. Check simple products
    if(!empty($groups['simple'])) {
      $simpleProductBC = get_array_vals_by_second_key($groups['simple'], 'bar_code');
      foreach ($processedRows as $row) {
        $productKey = array_search($row['bar_code'], $simpleProductBC);
        if($productKey !== FALSE && isset($groups['simple'][$productKey])) {
          $updated = FALSE;
          $product = $groups['simple'][$productKey];
          if ($product['count'] != $row['count']) {
            ManagerHolder::get('Product')->updateById($product['id'], 'count', $row['count']);
            $updated = TRUE;
          }
          ManagerHolder::get('Product')->updateById($product['id'], 'last_revision_date', date(DOCTRINE_DATE_FORMAT));
//          if($product['on_order'] != $row['on_order']) {
//            ManagerHolder::get('Product')->updateById($product['id'], 'on_order', $row['on_order']);
//            $updated = TRUE;
//          }
          if ($updated) {
            $rowsInfo['updated']++;
          }
          unset($groups['simple'][$productKey]);
        }
      }
//      if(!empty($groups['simple'])) {
//        // Set 'on_order' => TRUE to all simple products which are left
//        $simpleProductsLeftIDs = get_array_vals_by_second_key($groups['simple'], 'id');
//        ManagerHolder::get('Product')->updateAllWhere(array('id' => $simpleProductsLeftIDs), array('on_order' => TRUE, 'count' => 0));
//      }
    }

    // 2. Check products with_param_groups
    if(!empty($groups['with_param_groups'])) {
      $productWithParamGroupsIDs = array();
      $paramGroupsWithBarcodes = array();
      foreach ($groups['with_param_groups'] as $p) {
        $productWithParamGroupsIDs[] = $p['id'];
        foreach ($p['parameter_groups'] as $pg) {
          $paramGroupsWithBarcodes[] = $pg;
        }
      }
      $paramGroupsWithBarcodesBC = get_array_vals_by_second_key($paramGroupsWithBarcodes, 'bar_code');
      foreach ($processedRows as $row) {
        $paramKey = array_search($row['bar_code'], $paramGroupsWithBarcodesBC);
        if($paramKey !== FALSE) {
          $updated = FALSE;
          $paramGroup = $paramGroupsWithBarcodes[$paramKey];
          if($paramGroup['count'] != $row['count']) {
            ManagerHolder::get('ParameterGroup')->updateById($paramGroup['id'], 'count', $row['count']);
            $updated = TRUE;
          }
          ManagerHolder::get('Product')->updateById($paramGroup['product_id'], 'last_revision_date', date(DOCTRINE_DATE_FORMAT));
//          if($paramGroup['on_order'] != $row['on_order']) {
//            ManagerHolder::get('ParameterGroup')->updateById($paramGroup['id'], 'on_order', $row['on_order']);
//            $updated = TRUE;
//          }
          if ($updated) {
            $rowsInfo['updated']++;
          }
          unset($paramGroupsWithBarcodes[$paramKey]);
        }
      }

      if(!empty($paramGroupsWithBarcodes)) {
        // Set count 0 (dont give a fuck why) to all $paramGroupsWithBarcodes which are left
        $paramGroupsWithBarcodesLeftIDs = get_array_vals_by_second_key($paramGroupsWithBarcodes, 'id');
//        ManagerHolder::get('ParameterGroup')->updateAllWhere(array('id' => $paramGroupsWithBarcodesLeftIDs), array('on_order' => TRUE, 'count' => 0));
        ManagerHolder::get('ParameterGroup')->updateAllWhere(array('id' => $paramGroupsWithBarcodesLeftIDs), array('count' => 0));
      }

//      // Process products based on parameter groups
//      $productsWithParams = ManagerHolder::get('Product')->getAllWhere(array('id' => $productWithParamGroupsIDs), 'e.*, parameter_groups.*');
//      if(!empty($productsWithParams)) {
//        foreach ($productsWithParams as $p) {
//          $onOrder = TRUE;
//          foreach ($p['parameter_groups'] as $g) {
//            if($g['on_order'] == FALSE) {
//              $onOrder = FALSE;
//              break;
//            }
//          }
//          if($p['on_order'] != $onOrder) {
//            ManagerHolder::get('Product')->updateById($p['id'], 'on_order', $onOrder);
//          }
//        }
//      }
    }

    set_flash_notice('Импорт прошел успешно! processed: ' . $rowsInfo['processed'] . '; updated: ' . $rowsInfo['updated'] . '; failed: ' . $rowsInfo['failed']);
    $this->redirectToReffer();
  }

  /**
   * Our stock export
   */
  public function our_stock_export() {
    $fields = array();
    $fields[] = 'name';
    $fields[] = 'price';
    $fields[] = 'cost_price';
    $fields[] = 'count';
    $fields[] = 'product_code';
    $fields[] = 'bar_code';
    $fields[] = 'category.name';
    $fields[] = 'brand.name';
    $fields[] = 'main_parameter.name';
    $fields[] = 'main_parameter.value';
    $fields[] = 'main_parameter.count';
    $fields[] = 'main_parameter.price';

    $this->setFilter();
    $baseWhere = $this->filters;

    $productWhere = $baseWhere;
    $productWhere['our_stock'] = TRUE;
    $productWhere['parameter_groups.id'] = NULL;
    $products = ManagerHolder::get('Product')->getAllWhere($productWhere, 'e.*, category.name, brand.name');

    $productWithOurStockParamsWhere = $baseWhere;
    $productWithOurStockParamsWhere['parameter_groups.our_stock'] = TRUE;
    $productWithOurStockParams = ManagerHolder::get('Product')->getAllWhere($productWithOurStockParamsWhere, 'e.*, category.name, brand.name, parameter_groups.*');

    if (!empty($productWithOurStockParams)) {
      // Get all possible parameters
      $paramsKVArr = ManagerHolder::get('Parameter')->getAsViewArray();

      foreach ($productWithOurStockParams as $productWithOurStockParam) {
        $params = $productWithOurStockParam['parameter_groups'];
        $productWithOurStockParam['parameter_groups'] = array();
        $products[] = $productWithOurStockParam;
        foreach ($params as $param) {
          $product = array();
          $param['name'] = $paramsKVArr[$param['main_parameter_value']['parameter_id']];
          $param['value'] = $param['main_parameter_value']['name'];
          $product['parameter_groups'] = $param;
          $products[] = $product;
        }
      }
    }

    // Load CSV Library
    $this->load->library('common/csv');

    $this->csv->addHeader($fields);
    foreach ($products as $product) {
      $row = array();

      $product = array_make_plain_with_dots($product);
      foreach ($fields as $field) {
        $field = str_replace('main_parameter', 'parameter_groups', $field);
        if (isset($product[$field])) {
          $row[] = $product[$field];
        } else {
          $row[] = '';
        }
      }
      $this->csv->addRow($row);
    }

    $this->csv->flushFile('Наш склад.csv');
  }

  /**
   * Pre process params.
   * @return string
   */
  protected function preProcessParams($addParams = null) {
    $params = parent::preProcessParams($addParams);
    $params .= ', not_in_stock';
    return $params;
  }

  /**
   * setViewParamsIndex
   * @param  $entities
   * @param  $pager
   * @param  $hasSidebar
   */
  protected function setViewParamsIndex(&$entities, &$pager, $hasSidebar) {
    $this->listParams[] = 'stock_status';
    if(!empty($entities)) {
      foreach ($entities as &$e) {
        $e['stock_status'] = 'in_stock';
        if ($e['not_in_stock'] == TRUE) {
          $e['stock_status'] = 'not_in_stock';
//        } elseif ($e['on_order'] == TRUE) {
//           $e['stock_status'] = 'on_order';
        }
      }
    }
    parent::setViewParamsIndex($entities, $pager, $hasSidebar);
  }

  /**
   * Set filter.
   * Uses GET parameters.
   */
  protected function setFilter() {
    parent::setFilter();
    if(isset($this->filters['stock_status'])) {
      if($this->filters['stock_status'] == 'not_in_stock') {
        $this->filters['not_in_stock'] = TRUE;
      } else if ($this->filters['stock_status'] == 'in_stock') {
        $this->filters['not_in_stock'] = FALSE;
      }
      unset($this->filters['stock_status']);
    }
  }

  /**
   * Load and resize images
   * @param array $images - image names
   * @return array
   */
  protected function loadAndResizeImages(&$entity) {
    parent::loadAndResizeImages($entity);
    // Upload, resize and save images
    foreach ($this->fields as $fieldName => $params) {
      if ($params["type"] == "image_list_ajax") {
        $this->saveImageListOrder($entity, $fieldName);
      }
    }
  }

  /**
   * ajax_file_upload.
   */
  public function ajax_file_upload($fieldName, $eId) {

    $this->fileoperations->set_base_dir('./web/images');
    $folder = $this->session->userdata(self::FOLDER_SESSION_KEY);
    if ($folder) {
      $this->fileoperations->add_folder_to_uploads_dir($folder);
    }

    if(!empty($_FILES)) {
      foreach ($_FILES as $fName => $params) {
        foreach ($params as $k => $v) {
          $_FILES[$fName][$k] = array_pop($v);
        }
      }
    }

    $image = $this->loadAndResizeImage($fieldName);
    $image = $image->toArray();
    if ($image) {
      $rel = array('product_id' => $eId,
                   'image_id'   => $image['id']);
      ManagerHolder::get('ProductImage')->insert($rel);

      $data = array('file' => array('id'           => $image['id'],
                    'name'         => $image['file_name'],
                    'size'         => $image['size'],
                    'imgUrl'       => site_image_url($image),
                    'thumbnailUrl' => site_image_thumb_url('_admin', $image),
                    'deleteUrl'    => admin_site_url(strtolower($this->entityName) . '/delete_image/' . $image['id']),
                    'deleteType'   => 'DELETE'));

      die(json_encode($data));
    }
  }

  /**
   * Export.
   */
  public function export() {
    if (!$this->export) show_404();

    // Add Id field
    $this->fields = array_merge(array('id' => array('type' => 'input')), $this->fields);

    // Remove excluded fields
    if (!empty($this->exportExcludeFields)) {
      foreach ($this->exportExcludeFields as $exField) {
        if (isset($this->fields[$exField])) {
          unset($this->fields[$exField]);
        }
      }
    }

    $nestedFields = $this->getFieldsNestedArray($this->fields);

    $this->setFilter();

    $this->layout->set("fields", $this->fields);
    $this->layout->set("nestedFields", $nestedFields);
    $this->layout->set("requiredFields", ManagerHolder::get($this->entityName)->getRequiredFields());
    $this->layout->set("import", $this->import);
    $this->layout->set("importUrl", $this->adminBaseRoute . '/' . strtolower($this->entityUrlName) . '/import'. get_get_params());
    $this->layout->set("backUrl", $this->adminBaseRoute . '/' .  strtolower($this->entityUrlName . get_get_params()));
    $this->layout->set("processLink", $this->adminBaseRoute . '/' .  strtolower($this->entityUrlName) . '/export_process' . get_get_params());
    $this->layout->set('importExcludeFields', $this->importExcludeFields);
    $this->layout->view('product/export');
  }

  /**
   * Export process.
   */
  public function export_process() {
    if (!$this->export) show_404();

    $_POST = array_make_plain_with_dots($_POST);

    $this->setFilter();
    $where = $this->filters;

    $fields = array();
    if (!isset($this->fields['id'])) {
      $fields = array('id');
    }

    foreach ($this->fields as $k => $v) {
      if (!isset($_POST[$k]) || $_POST[$k] == 0) continue;
      if($k == 'category') {
        $fields[] = 'category.name';
        $fields[] = 'category.id';
      } elseif($k == 'brand') {
        $fields[] = 'brand.name';
      } else {
        $fields[] = $k;
      }
    }

    // Add parameter fields
    $fields[] = 'main_parameter.name';
    $fields[] = 'main_parameter.value';
//    $fields[] = 'main_parameter.on_order';
    $fields[] = 'main_parameter.our_stock';
    $fields[] = 'main_parameter.count';
    $fields[] = 'main_parameter.price';

    // Get everything from DB
    $entities = ManagerHolder::get($this->managerName)->getAllWhere($where, 'e.*, brand.*, category.*, parameter_groups.*, header.*');

    // Load CSV Library
    $this->load->library('common/csv');

    if (!isset($_POST['id']) || empty($_POST['id'])) {
      unset($fields[array_search('id', $fields)]);
    }

    // Set headers
    $ftrans = array();
    foreach ($fields as $f) {
//       $ftrans[] = html_entity_decode(lang('admin.add_edit.' . strtolower($this->entityName) . '.' .  str_replace('.*', '', $f)));
      $ftrans[] = str_replace('.*', '', $f);
    }

    $this->csv->addHeader($ftrans);
    if ($entities) {

      // Get all possible parameters
      $paramsKVArr = ManagerHolder::get('Parameter')->getAsViewArray();

      // Process Rows
      $rows = array();
      foreach ($entities as $e) {
        // Process default fields
        $row = array();
        foreach ($fields as $key) {
          if(strpos($key, 'main_parameter') === FALSE) {
            if(strpos($key, '.') !== FALSE) {
              $keyArr = explode('.', $key);
              $row[$key] = !empty($e[$keyArr[0]])?$e[$keyArr[0]][$keyArr[1]]:'';
            } else {
              $row[$key] = $e[$key];
            }
          }
        }
        $row = $this->preProcessExportRow($row, $fields);
        $rows[] = $row;

        // Process parameter_groups fields
        if(!empty($e['parameter_groups'])) {
          foreach ($e['parameter_groups'] as $pg) {
            $pgRow = array('id' => $e['id']);
            foreach ($fields as $key) {
              if(strpos($key, 'main_parameter') === FALSE && $key != 'id') {
                $pgRow[$key] = '';
                if($key == 'bar_code') {
                  $pgRow[$key] = $pg[$key];
                }
              }
            }
            $pgRow['main_parameter.name'] = $paramsKVArr[$pg['main_parameter_value']['parameter_id']];
            $pgRow['main_parameter.value'] = $pg['main_parameter_value']['name'];
//            $pgRow['main_parameter.on_order'] = $pg['on_order'];
            $pgRow['main_parameter.our_stock'] = $pg['our_stock'];
            $pgRow['main_parameter.count'] = $pg['count'];
            $pgRow['main_parameter.price'] = $pg['price'];
            $rows[] = $pgRow;
          }
        }
      }

      $this->csv->addRows($rows);
    }

    // Send file to output
    $this->csv->flushFile(lang('admin.entity_list.' . strtolower($this->entityName) . '.list_title') . '.csv');
    die();
  }

  /**
   * Import.
   */
  public function import() {
    if (!$this->import) show_404();
    $this->layout->set("required", ManagerHolder::get($this->entityName)->getRequiredFields());

    // Remove excluded fields
    if (!empty($this->importExcludeFields)) {
      foreach ($this->importExcludeFields as $exField) {
        if (isset($this->fields[$exField])) {
          unset($this->fields[$exField]);
        }
      }
    }

    $this->layout->set("fields", $this->fields);
    $this->layout->set("export", $this->export);
    $this->layout->set("exportUrl", $this->adminBaseRoute . '/' . strtolower($this->entityUrlName) . '/export'. get_get_params());
    $this->layout->set("backUrl", $this->adminBaseRoute . '/' .  strtolower($this->entityUrlName) . get_get_params());
    $this->layout->set("processLink", $this->adminBaseRoute . '/' .  strtolower($this->entityUrlName) . '/import_process' . get_get_params());

    $this->layout->view('product/import');
  }

  /**
   * Import process.
   */
  public function import_process() {
    if (!$this->import) show_404();
    set_time_limit(0);
    $this->load->helper('project');

    $debug = 0;

    $requiredFields = ManagerHolder::get($this->entityName)->getRequiredFields();

    $transactionStarted = FALSE;
    $ignoreErrors = (isset($_POST['ignore_errors']) && $_POST['ignore_errors'] == 1) ? TRUE : FALSE;

    $entityObject = new $this->entityName;
    $addCount = 0;
    $editCount = 0;

    try {

      $rowNum = 0;

      $uploadResult = FALSE;

      $this->fileoperations->set_upload_lib_config_value("allowed_types", 'csv');
      $uploadResult = $this->fileoperations->upload('import_file', TRUE, './web');
      $fileInfo = $this->fileoperations->file_info;

      if ($uploadResult) {

        $postFields = array();
        foreach ($_POST as $k => $v) {
          if ($v == 1) {
            if (strpos($k, '_') !== FALSE) {
              $kk = str_replace('_', '.', $k);
              if (isset($this->fields[$kk])) {
                $postFields[$kk] = $this->fields[$kk];
              } else if (isset($this->fields[$k])) {
                $postFields[$k] = $this->fields[$k];
              }
            } else {
              if (isset($this->fields[$k])) {
                $postFields[$k] = $this->fields[$k];
              }
            }
          }
        }

        // Add required fields
        foreach ($requiredFields['all'] as $addField) {
          if (!isset($postFields[$addField]) && !in_array($addField, $this->importExcludeFields)) {
            $postFields[$addField] = $this->fields[$addField];
          }
        }
        $postFieldsKeys = array_keys($postFields);

        // Form the translation for fields
        $ftrans = array();
        $field['name'] = 'id';
        $field['key'] = 'id';
        $field['val']['type'] = 'input_integer';
        $ftrans[] = $field;
        foreach ($this->fields as $f => $val) {
          if(in_array($f, $postFieldsKeys)) {
            if($f == 'category') {
//               $field['name'] = trim(html_entity_decode(lang('admin.add_edit.' . strtolower($this->entityName) . '.category.id')));
              $field['name'] = 'category.id';
              $field['key'] = 'category.id';
              $field['val'] = $val;
              $ftrans[] = $field;
            } elseif($f != 'brand') {
//               $field['name'] = trim(html_entity_decode(lang('admin.add_edit.' . strtolower($this->entityName) . '.' .  str_replace('.*', '', $f))));
              $field['name'] = trim(str_replace('.*', '', $f));
              $field['key'] = trim(str_replace('.*', '', $f));
              $field['val'] = $val;
              $ftrans[] = $field;
            }
          }
        }

        // Add parameter fields
        $field['name'] = trim('main_parameter.name');
        $field['key'] = 'main_parameter.name';
        $ftrans[] = $field;
        $field['name'] = trim('main_parameter.value');
        $field['key'] = 'main_parameter.value';
        $ftrans[] = $field;
//        $field['name'] = trim('main_parameter.on_order');
//        $field['key'] = 'main_parameter.on_order';
//        $ftrans[] = $field;
        $field['name'] = trim('main_parameter.our_stock');
        $field['key'] = 'main_parameter.our_stock';
        $ftrans[] = $field;
        $field['name'] = trim('main_parameter.count');
        $field['key'] = 'main_parameter.count';
        $ftrans[] = $field;
        $field['name'] = trim('main_parameter.price');
        $field['key'] = 'main_parameter.price';
        $ftrans[] = $field;

        // Load CSV Library
        $this->load->library('common/csv');

//         $this->csv->setInputFileEncoding('utf-8');

//         $this->csv->setSeparator('\t');

        // Read CSV File
        $this->csv->readFile($fileInfo['file_path'] . $fileInfo['file_name']);

        // Header
        $header = $this->csv->readRow();

//         $header = iconv('UCS-2LE', 'UTF-8', substr($header[0], 0, -1));

        if (!$header || count($header) < 1) {
          set_flash_error('admin.import.error.wrong_file_format');
          $this->redirectToReffer();
        }
        if ($header[0] != 'id' && $_POST['import_type'] != 'add_only') {
          set_flash_error('admin.import.error.first_column_must_be_id');
          $this->redirectToReffer();
        }

        foreach($header as &$h) {
          $h = mb_strtoupper($h, 'UTF-8');
        }

        if($_POST['import_type'] != 'edit_only') {
          foreach ($ftrans as $f) {
            if (in_array($f['key'], $requiredFields['simple'])) {
              if (!in_array(mb_strtoupper($f['name'], 'UTF-8'), $header)) {
                set_flash_error('admin.import.error.missing_required_fields', array('fname' => $f['name']));
                $this->redirectToReffer();
              }
            }
          }
        }

        // Set Indexes
        $parameterIndexes = array();
        $barCodeIndex = null;
        foreach ($ftrans as $k => &$fs) {
          $index = array_key_by_value(mb_strtoupper($fs['name'], 'UTF-8'), $header, TRUE);
          if ($index !== null) {
            $fs['index'] = $index;
            if(strpos($fs['key'], 'main_parameter.') !== FALSE || $fs['key'] == 'bar_code') {
              if ($fs['key'] == 'bar_code') {
                $barCodeIndex = $index;
              }
              $parameterIndexes[] = $index;
            }
          }
        }

        if($debug == TRUE) {
          trace($ftrans);
          trace($parameterIndexes);
        }

        $parameterRows = array();

        ManagerHolder::get($this->entityName)->startTransaction();
        $transactionStarted = TRUE;
        while (($row = $this->csv->readRow()) !== FALSE) {

          $row = $this->preProcessImportRow($row);
          $rowNum += 1;

          // Check for empty row
          $columns = count($row);
          $emptyColumns = 0;
          foreach ($row as $k => &$v) {
            $v = trim($v);
            if (empty($v)) {
              $emptyColumns++;
            }
          }
          if ($columns == $emptyColumns) {
            continue;
          }

          // Check if we have to process default import row or parameters
          $haveToProcessParametersRow = FALSE;
          foreach ($parameterIndexes as $i) {
            if(isset($row[$i]) && !empty($row[$i])) {
              if ($barCodeIndex !== null && $i == $barCodeIndex) {
                continue;
              }
              $haveToProcessParametersRow = TRUE;
              break;
            }
          }

          if($debug == TRUE) {
            trace($row);
          }

          $entity = array();
          foreach ($ftrans as $field) {

            // Skip lines with no ID for EDIT ONLY
            if ($field['key'] == 'id' && $_POST['import_type'] == 'edit_only') {
              if (!isset($row[$field['index']]) || empty($row[$field['index']])) {
                continue;
              }
            }

            if($haveToProcessParametersRow == TRUE) {

              if($field['key'] == 'id') {

                $parameterRows[$row[$field['index']]][] = $row;

              }
            } else {

              // Skip parameter fields
              if(isset($field['index']) && in_array($field['index'], $parameterIndexes)) {
                if ($field['index'] !== $barCodeIndex) {
                  unset($row[$field['index']]);
                  continue;
                }
              }

              // Field found in import
              if (isset($field['index']) && isset($row[$field['index']])) {

                $rowProcessValue = $this->processImportRow($field, $row);

                if ($rowProcessValue !== null) {
                  $row[$field['index']] = $rowProcessValue;
                } else {
                  if ($field['key'] == 'bar_code') {
                    $row[$field['index']] = string_clean_up($row[$field['index']]);
                  }
                  // Check for double
                  if ($field['val']['type'] == 'input_double') {
                    $row[$field['index']] = (double)str_replace(',', '.', $row[$field['index']]);
                  }
                  // Check for double/interger
                  if ($row[$field['index']] === '' && ($field['val']['type'] == 'input_double' || $field['val']['type'] == 'input_integer')) {
                    $row[$field['index']] = null;
                  }
                  // Check for Enum
                  if ($field['val']['type'] == 'enum') {
                    $enumValues = ManagerHolder::get($this->entityName)->getEnumValues($field['key']);
                    foreach ($enumValues as $enval) {
                      $lng = lang('enum.' . strtolower($this->entityName) . '.' . $field['key'] . '.' . $enval);
                      if (trim($row[$field['index']]) == $lng) {
                        $row[$field['index']] = $enval;
                        break;
                      }
                    }
                  }
                  // Check for select
                  if ($field['val']['type'] == 'select') {
                    $refEntityName = $field['val']['relation']['entity_name'];
                    $refEnt = ManagerHolder::get($refEntityName)->getById($row[$field['index']], 'id');
                    if (!$refEnt) {
                      $row[$field['index']] = null;
                    }
                    $entity['category_id'] = $row[$field['index']];
                    continue;
                  }
                }

                $entity[$field['key']] = $row[$field['index']];
              }

            }

          }

          if(!empty($entity)) {

            if($debug == TRUE) {
              trace($entity);
            }

            try {
              if (count(array_keys($entity)) > 1) {
                if (isset($entity['id']) || !empty($entity['id'])) {
                  if (isset($entity['count'])) {
                    $entity['last_revision_date'] = date(DOCTRINE_DATE_FORMAT);

//                    if ($entity['count'] <= 0) {
//                      $entity['on_order'] = TRUE;
//                    } else {
//                      $entity['on_order'] = FALSE;
//                    }
                  }

                  ManagerHolder::get($this->entityName)->update($entity);
                  $this->addAdminLogRecord($entity, 'edit', NULL, 'import');
                  $editCount++;
                }
              }
            } catch (Exception $e) {
              if (!$ignoreErrors) {
                throw $e;
              }
            }

          }

        }

        // Process parameter rows (update only on_order and price)
        if(!empty($parameterRows)) {

          // 1. Get all products with parameters (change e. on_order to e.not_in_stock)
          $products = ManagerHolder::get($this->entityName)->getAllWhere(array('id' => array_keys($parameterRows)), 'e.not_in_stock, parameter_groups.*');
          $productIds = get_array_vals_by_second_key($products, 'id');

          // 2. Loop through param rows
          foreach ($parameterRows as $productId => $rows) {
            $pKey = array_search($productId, $productIds);
            if ($pKey === FALSE) {
              continue;
            }

            $product = $products[$pKey];
            // 2.1 Check if product has current parameter value
            if(!empty($product['parameter_groups'])) {
//              $allParamOnOrder = TRUE;
              $countChange = FALSE;
              foreach ($rows as $row) {

                $paramEntity = array();
                foreach ($ftrans as $field) {
                  if(isset($field['index']) && in_array($field['index'], $parameterIndexes)) {
                    $paramEntity[str_replace('main_parameter.', '', $field['key'])] = $row[$field['index']];
                  }
                }
//                if (isset($paramEntity['count']) && $paramEntity['count'] <= 0) {
//                  $paramEntity['not_in_stock'] = TRUE;
//                }
//                if (isset($paramEntity['count']) && $paramEntity['count'] > 0) {
//                  $paramEntity['not_in_stock'] = FALSE;
//                  $allParamOnOrder = FALSE;
//                }

                foreach ($product['parameter_groups'] as $pGroup) {

                  if($pGroup['main_parameter_value']['name'] == $paramEntity['value']) {

                    $groupUpdateArr = array();
                    $fieldsToCheck = array('our_stock', 'count', 'price', 'bar_code');
                    foreach ($fieldsToCheck as $fcheck) {
                      if(isset($paramEntity[$fcheck]) && $pGroup[$fcheck] != $paramEntity[$fcheck]) {
                        $groupUpdateArr[$fcheck] = $paramEntity[$fcheck];
                        if($fcheck == 'bar_code') {
                          $groupUpdateArr[$fcheck]  = string_clean_up($groupUpdateArr[$fcheck]);
//                          // Process exponential number to string (Excel shit)
//                           $groupUpdateArr[$fcheck]  = string_clean_up(number_format(str_replace(',', '.', $groupUpdateArr[$fcheck]), 0, '', ''));
                        }
                      }
                    }

                    if (isset($pGroup['count'])) {
                      $countChange = TRUE;
                    }

                    if(!empty($groupUpdateArr)) {
                      try {
                        ManagerHolder::get('ParameterGroup')->updateAllWhere(array('id' => $pGroup['id']), $groupUpdateArr);
                      } catch (Exception $e) {
                        log_message('error', 'IMPORT->ParameterGroup->updateAllWhere: $groupUpdateArr:' . print_r($groupUpdateArr, TRUE));
                        throw new Exception($e->getMessage());
                      }
                    }

                    if($debug == TRUE) {
                      trace($groupUpdateArr);
                      trace($pGroup);
                      trace($paramEntity);
                    }

                    break;
                  }

                }
              }

              if ($countChange) {
                ManagerHolder::get('Product')->updateById($productId, 'last_revision_date', date(DOCTRINE_DATE_FORMAT));
              }
//              if ($allParamOnOrder && !$product['on_order']) {
//                ManagerHolder::get('Product')->updateById($productId, 'on_order', TRUE);
//              }
//              if (!$allParamOnOrder && $product['on_order']) {
//                ManagerHolder::get('Product')->updateById($productId, 'on_order', FALSE);
//              }
            }
          }
        }

        ManagerHolder::get($this->entityName)->commitTransaction();
      }
      $this->fileoperations->delete_file($fileInfo['file_name'], $fileInfo['file_path']);

      if($debug == TRUE) {
        die();
      }

    } catch (Exception $e) {
      if ($transactionStarted) {
        ManagerHolder::get($this->entityName)->rollbackTransaction();
      }

      $this->fileoperations->delete_file($fileInfo['file_name'], $fileInfo['file_path']);

      $errors = array();
      if ($e->getCode() == DOCTRINE_DUPLICATE_ENTRY_EXCEPTION_CODE) {
        $errors[] = 'admin.import.' . strtolower($this->entityName) . '.error.duplicate';
      }
      if ($rowNum > 0) {
        $errors[] = kprintf(lang('admin.import.error.on_line'), array('line' => $rowNum + 1));
      }
      $message =  $e->getMessage();
      if ($message == 'Failed to refresh. Record does not exist.') {
        $message = kprintf(lang('admin.import.error.falied_to_refresh'), array('id' => $entity['id']));
      }
      $errors[] = $message;
      set_flash_error($errors);
      log_message('error', $e->getMessage());
      $this->redirectToReffer();
    }

    set_flash_notice('admin.import.message.imported', array('added' => $addCount, 'edited' => $editCount));
    $this->redirectToReffer();
  }


  /**
   * clone_product.
   */
  public function clone_product($id) {
    $e = ManagerHolder::get($this->entityName)->getById($id, 'e.*, parameter_groups.*, possible_parameters.*');
    if (empty($e)) {
      set_flash_error('Продукт не может быть склонирован, так как он не существует.');
      redirect_to_referral();
    }

    $tempPossibleParameters = $e['possible_parameters'];
    $tempParameterGroups    = $e['parameter_groups'];

    unset($e['id']);
    unset($e['page_url']);
    unset($e['product_code']);
    unset($e['bar_code']);
    unset($e['image_id']);
    unset($e['possible_parameters']);
    unset($e['parameter_groups']);
    unset($e['product_params_id']);
    unset($e['possible_parameters_id']);
    unset($e['header_id']);

    $e['published'] = FALSE;
    $e['not_in_stock'] = TRUE;
    $e['standard_store_qty'] = 0;
    $e['name'] = $e['name'] . lang('clone.word');

    // Check for existing clones
    ManagerHolder::get($this->entityName)->setSearch($e['name'], 'name', 'starts_with');
    $clones = ManagerHolder::get($this->entityName)->getAll('name');
    if(!empty($clones)) {
      $number = 1;
      foreach($clones as $clone) {
        if(preg_match("@" . lang('clone.word') . "([0-9]+)$@", $clone['name'], $matches)) {
          $n = $matches[1];
          if($n >= $number) {
            $number = $n + 1;
          }
        }
      }
      $e['name'] .= $number;
    }

    $e['id'] = ManagerHolder::get($this->entityName)->insert($e);

    // Process possible parameters
    if(!empty($tempPossibleParameters)) {
      $posParamsData = array();
      $posParamsData['parameter_main_id'] = $tempPossibleParameters['parameter_main_id'];
      $posParamsData['parameter_secondary_id'] = $tempPossibleParameters['parameter_secondary_id'];
      $posParamsData['possible_parameter_values'] = get_array_vals_by_second_key($tempPossibleParameters['possible_parameter_values'], 'id');
      $posParamsData['id'] = ManagerHolder::get('ParameterProduct')->insert($posParamsData);
      ManagerHolder::get($this->entityName)->updateById($e['id'], 'possible_parameters_id', $posParamsData['id']);
    }

    // Process parameter groups
    if(!empty($tempParameterGroups)) {
      $tempParameterGroups = array_sort($tempParameterGroups, 'id');
      foreach ($tempParameterGroups as $g) {
        $groupData = array();
//        $groupData['on_order'] = $g['on_order'];
        $groupData['price'] = $g['price'];
        $groupData['product_id'] = $e['id'];
        $groupData['main_parameter_value_id'] = $g['main_parameter_value_id'];
        $groupData['secondary_parameter_values_out'] = get_array_vals_by_second_key($g['secondary_parameter_values_out'], 'id');
        $groupData['image_id'] = NULL;
        $groupData['standard_store_qty'] = 0;
        $groupData['id'] = ManagerHolder::get('ParameterGroup')->insert($groupData);
      }
    }

    set_flash_notice('Товар клонирован успешно');
    redirect_to_referral();
  }

  /**
   * view.
   */
  public function view($id) {
    $this->load->helper('project');
    $e = ManagerHolder::get($this->managerName)->getById($id, 'id, page_url');
    redirect(shop_url($e['page_url']));
  }

  /**
   * sortorder_recount
   */
  public function sortorder_recount() {
    ManagerHolder::get($this->entityName)->processSortorder();
    set_flash_notice('Приоритет пересчитан успешно.');
    redirect_to_referral();
  }

  /**
   * preProcessFields
   * the method is called before passing
   * fields to the layout
   */
  protected function preProcessFields(&$entity) {

    $filterIds = array();
    if(!empty($entity['category']) && !empty($entity['category']['filters'])) {
      $filterIds = get_array_vals_by_second_key($entity['category']['filters'], 'id');
    }
    if(!empty($filterIds)) {
      $filterOptions = ManagerHolder::get('Filter')->getAllWhere(array('id' => $filterIds), 'e.*, filtervalues.*');
      $this->fields['filter_values']['filter']['options'] = $filterOptions;
    } else {
      unset($this->fields['filter_values']);
    }

    parent::preProcessFields($entity);

    $this->fields['possible_parameters']['options'][''] = lang('admin.add_edit.' . strtolower($this->entityName) . '.possible_parameters.default');
    $this->fields['possible_parameters']['options'] += ManagerHolder::get('Parameter')->getAsViewArray();

    $paramValueTypes = array('main', 'secondary');
    foreach ($paramValueTypes as $type) {

      $optionsName = $type . '_values_options';

      $this->fields['possible_parameters'][$optionsName] = array();
      if(is_not_empty($entity['possible_parameters']['parameter_' . $type . '_id'])) {
        $this->fields['possible_parameters'][$optionsName] = ManagerHolder::get('ParameterValue')->getAsViewArray(array(), 'name', null, array('parameter_id' => $entity['possible_parameters']['parameter_' . $type . '_id']));
        if(!empty($this->fields['possible_parameters'][$optionsName]) && !empty($entity['possible_parameters']['possible_parameter_values'])) {
          $chosenPossibleParameterValueIds = get_array_vals_by_second_key($entity['possible_parameters']['possible_parameter_values'], 'id');
          foreach ($this->fields['possible_parameters'][$optionsName] as $k => $v) {
            if(in_array($k, $chosenPossibleParameterValueIds)) {
              unset($this->fields['possible_parameters'][$optionsName][$k]);
            }
          }
        }
      }

    }

    if(is_not_empty($entity['possible_parameters']['possible_parameter_values'])) {
      $secondaryOptions = array();
      foreach ($entity['possible_parameters']['possible_parameter_values'] as $posVal) {
        if($posVal['parameter_id'] == $entity['possible_parameters']['parameter_secondary_id']) {
          $secondaryOptions[$posVal['id']] = $posVal['name'];
        }
      }
      $this->fields['parameter_groups']['options'] = $secondaryOptions;
    }

    // Process linked product params shit
    $this->fields['parameter_product_links']['pv_options'] = array();
    $this->fields['parameter_product_links']['product_options'] = array();
    $this->fields['parameter_value_link']['options'] = array();
    if(!empty($entity['id'])) {
      if(!empty($entity['parameter_link'])) {
        $paramValueOpts = ManagerHolder::get('ParameterValue')->getAsViewArray(array(), 'name', null,  array('parameter_id' => $entity['parameter_link']));
        $this->fields['parameter_product_links']['pv_options'] = $paramValueOpts;
        $this->fields['parameter_value_link']['options'] = $paramValueOpts;
      }

      $optWhere = array();
      if (!empty($entity['brand'])) {
        $optWhere['brand_id'] = $entity['brand'];
      }
      if (!empty($entity['category'])) {
        $optWhere['category_id'] = $entity['category'];
      }
      $this->fields['parameter_product_links']['product_options'] = ManagerHolder::get('Product')->getAsViewArray(array($entity['id']), 'name', null, $optWhere);
    }
  }


  /**
   * CreateEntityId.
   * Creates Entity By Id;
   * @param integer $entityId
   * @return Object
   */
  protected function createEntityId($entityId = null) {
    $entity = new $this->managerName;
    $entityObject = $entity;
    $entity = $entity->toArray();
    if ($entityId) {
      $params = "id,";
      foreach ($this->fields as $k => $v) {
        if($v['type'] == 'map') {
          // adding $k_left_px & $k_top_px fields
          $params .= ($k == 'map' ? '' : $k . '_') . "left_px,";
          $params .= ($k == 'map' ? '' : $k . '_') . "top_px,";
        } elseif($v['type'] == 'geo') {
          $params .= ($k == 'geo' ? '' : $k . '_') . "latitude,";
          $params .= ($k == 'geo' ? '' : $k . '_') . "longitude,";
          $params .= ($k == 'geo' ? '' : $k . '_') . "address,";
        } else {
          $params .= $k . ",";
        }
      }
      if (in_array('can_be_deleted', array_keys($entity))) {
        $params .= "can_be_deleted";
      }
      $params = rtrim($params, ',');
      ManagerHolder::get($this->managerName)->clearCacheGroup();
      $params = str_replace(',possible_parameters,parameter_groups', '', $params);
      $params .= ',possible_parameters_id';
      $entity = ManagerHolder::get($this->managerName)->getById($entityId, $params);

      if (empty($entity)) {
        redirect($this->adminBaseRoute . '/' .  strtolower($this->entityUrlName));
      }

      if(!empty($entity['possible_parameters_id'])) {
        $entity['possible_parameters'] = ManagerHolder::get('ParameterProduct')->getById($entity['possible_parameters_id'], 'e.*, parameter_main.*, parameter_secondary.*, possible_parameter_values.*');
      }
      $entity['parameter_groups'] = ManagerHolder::get('ParameterGroup')->getAllWhere(array('product_id' => $entity['id']), 'e.*, image.*, main_parameter_value.*, secondary_parameter_values_out.*');

      // Priority logic
      if(is_not_empty($entity['possible_parameters']['possible_parameter_values'])) {
        $entity['possible_parameters']['possible_parameter_values'] = array_sort($entity['possible_parameters']['possible_parameter_values'], 'priority');
      }

    }
    return $entity;
  }



  /**
   * createEntityPOST
   * @return Object
   */
  protected function createEntityPOST() {

    if (is_not_empty($_POST['possible_parameters'])) {
      $this->savedPossibleParameters = $_POST['possible_parameters'];
      unset($_POST['possible_parameters']);
      if(is_not_empty($_POST['parameter_groups'])) {
        $this->savedParameterGroups = $_POST['parameter_groups'];
        unset($_POST['parameter_groups']);
      }
    }

    if(is_not_empty($_POST['parameter_product_links'])) {
      $this->savedParameterProductLinks = $_POST['parameter_product_links'];
      unset($_POST['parameter_product_links']);
    }

    $this->savedParameterValueLink = $_POST['parameter_value_link'];
    unset($_POST['parameter_value_link']);

    if (isset($_POST['filter_values']) && !empty($_POST['filter_values'])) {
      $this->savedFilterValues = $_POST['filter_values'];
      unset($_POST['filter_values']);
    }
    $_POST['bar_code'] = trim($_POST['bar_code']);

    return parent::createEntityPOST();
  }

  /**
   * postUpdate
   * @param Object $entity
   */
  public function postUpdate(&$entity) {
    $entityArr = $entity->toArray();
    ManagerHolder::get('ProductFilterValue')->deleteAllWhere(array('product_id' => $entityArr['id']));
    $this->createFilterValuesFromPOST($entityArr);
  }

  /**
   * createFilterValuesFromPOST
   * @param array $entity
   */
  private function createFilterValuesFromPOST($entity) {
    if(!empty($this->savedFilterValues)) {
      $possibleFilterValues = array();
      if(!empty($entity['category_id'])) {
        $category = ManagerHolder::get('ProductCategory')->getById($entity['category_id'], 'e.*, filters.*');
        if(!empty($category['filters'])) {
          foreach ($category['filters'] as $filter) {
            if(!empty($filter['filtervalues'])) {
              $fvIds = get_array_vals_by_second_key($filter['filtervalues'], 'id');
              $possibleFilterValues = array_unique(array_merge($possibleFilterValues, $fvIds));
            }
          }
        }
      }
      if(!empty($possibleFilterValues)) {
        foreach ($this->savedFilterValues as $fv) {
          if(!empty($fv['filter_value']) && in_array($fv['filter_value'], $possibleFilterValues)) {
            $whereArray = array('product_id' => $entity['id'], 'filter_value_id' => $fv['filter_value']);
            $ent = ManagerHolder::get('ProductFilterValue')->getOneWhere($whereArray, 'e.*');
            if(empty($ent)) {
              ManagerHolder::get('ProductFilterValue')->insert($whereArray);
            }
          }
        }
      }
    }
  }


  /**
   * Implementation of POST_SAVE event callback
   * @param Object $entity reference
   * @return Object
   */
  protected function postSave(&$entity) {
    $entityArr = $entity->toArray();
    $this->createPossibleParametersFromPOST($entityArr);
    $this->createParameterProductLinksFromPOST($entityArr);
    $this->checkBarcodeDuplicate($entityArr);
  }

  /**
   * Check Barcode Duplicate
   * @param $entityArr
   */
  private function checkBarcodeDuplicate($entityArr) {
    if (empty($entityArr['possible_parameters_id'])) {
      $products = ManagerHolder::get('Product')->getAllWhere(array('bar_code' => $entityArr['bar_code'], 'id<>' => $entityArr['id']), 'id,name');
      $groups = ManagerHolder::get('ParameterGroup')->getAllWhere(array('bar_code' => $entityArr['bar_code']), 'id,product.name');
    } else {
      $groupsBarcode = ManagerHolder::get('ParameterGroup')->getAllWhere(array('product_id' => $entityArr['id']), 'id,bar_code');

      $products = array();
      $groups = array();
      if (!empty($groupsBarcode)) {
        foreach ($groupsBarcode as $group) {
          $duplicateProducts = ManagerHolder::get('Product')->getAllWhere(array('bar_code' => $group['bar_code']), 'id,name');
          $duplicateGroups = ManagerHolder::get('ParameterGroup')->getAllWhere(array('bar_code' => $group['bar_code'], 'id<>' => $group['id']), 'id,product.name,main_parameter_value.name');

          $products = array_merge($products, $duplicateProducts);
          $groups = array_merge($groups, $duplicateGroups);
        }
      }
    }

    $notice = '';
    if (!empty($products)) {
      $notice .= 'Найдены совпадения штрих-кодов в товарах:</br>';
      foreach ($products as $product) {
        $notice .= "<a href='" . admin_site_url('product/add_edit/' . $product['id']) . "'>" . $product['name'] . "</a></br>";
      }
    }
    if (!empty($groups)) {
      $notice .= 'Найдены совпадения штрих-кодов в группах параметров:</br>';
      foreach ($groups as $group) {
        $notice .= "<a href='" . admin_site_url('product/add_edit/' . $group['product']['id']) . "'>" . $group['product']['name'] . ' ' . $group['main_parameter_value']['name'] . "</a></br>";
      }
    }
    if (!empty($notice)) {
      set_flash_error($notice);
      redirect_to_referral();
    }
  }

  /**
   * createParameterProductLinksFromPOST
   * @param array $entity
   */
  private function createParameterProductLinksFromPOST($entity) {
    if(!empty($this->savedParameterProductLinks)) {
      ManagerHolder::get('ParameterProductLink')->deleteAllWhere(array('main_product_id' => $entity['id']));
      foreach ($this->savedParameterProductLinks as $ppl) {
        $ppl['main_product_id'] = $entity['id'];
        ManagerHolder::get('ParameterProductLink')->insert($ppl);
      }
    }

    $paramValue = $this->savedParameterValueLink;
    if(empty($paramValue)) {
      $paramValue = NULL;
    }
    ManagerHolder::get($this->entityName)->updateById($entity['id'], 'parameter_value_link_id', $paramValue);
  }

  /**
   * createPossibleParametersFromPOST
   * @param array $entity
   */
  private function createPossibleParametersFromPOST($entity) {

    ManagerHolder::get('ParameterProduct')->deleteAllWhere(array('id' => $entity['possible_parameters_id']));
    if(!empty($this->savedPossibleParameters)) {

      $paramDataArr = array();
      if(is_not_empty($this->savedPossibleParameters['parameter_main'])) {
        $paramDataArr['parameter_main_id'] = $this->savedPossibleParameters['parameter_main'];
        $paramDataArr['possible_parameter_values'] = array();
        if(is_not_empty($this->savedPossibleParameters['possible_parameter_values_main'])) {
          $paramDataArr['possible_parameter_values'] = $this->savedPossibleParameters['possible_parameter_values_main'];
        }
        // Create default parameter groups or delete expired if needed
        $this->createDefaultParameterGroups($entity['id'], $paramDataArr['possible_parameter_values']);
      }
      if(is_not_empty($this->savedPossibleParameters['parameter_secondary'])) {
        if($this->savedPossibleParameters['parameter_secondary'] != $this->savedPossibleParameters['parameter_main']) {
          $paramDataArr['parameter_secondary_id'] = $this->savedPossibleParameters['parameter_secondary'];
          if(is_not_empty($this->savedPossibleParameters['possible_parameter_values_secondary'])) {
            foreach ($this->savedPossibleParameters['possible_parameter_values_secondary'] as $par) {
              $paramDataArr['possible_parameter_values'][] = $par;
            }
          }
        }
      }
      if(!empty($paramDataArr)) {
        try {
          $parId = ManagerHolder::get('ParameterProduct')->insert($paramDataArr);
          ManagerHolder::get('Product')->updateById($entity['id'], 'possible_parameters_id', $parId);
        } catch (Exception $e) {
          set_flash_error($e->getMessage());
          redirect_to_referral();
        }
      }

      // Process parameter groups
      if(!empty($this->savedParameterGroups)) {
        $this->processParameterGroups($entity);

        if ($entity['not_in_stock']) {
          ManagerHolder::get('ParameterGroup')->updateAllWhere(array('product_id' => $entity['id']), array('not_in_stock' => TRUE));
        }

      }
    } else {
      // Delete all possible parameter groups of product
      $possibleParameterGroupsInDB = ManagerHolder::get('ParameterGroup')->getAllWhere(array('product_id' => $entity['id']), 'e.*');
      if(!empty($possibleParameterGroupsInDB)) {
        // Delete linked images
        foreach ($possibleParameterGroupsInDB as $ppg) {
          if(!empty($ppg['image_id'])) {
            $this->deleteImageFromDb($ppg['image_id']);
          }
        }
        ManagerHolder::get('ParameterGroup')->deleteAllWhere(array('product_id' => $entity['id']));
      }

    }
  }

  /**
   * createDefaultParameterGroups
   * @param int $productId
   * @param array $parameterValues
   */
  private function createDefaultParameterGroups($productId, $parameterValues) {
    $existingParameterGrops = ManagerHolder::get('ParameterGroup')->getAllWhere(array('product_id' => $productId), 'e.*');
    $existingParameterGropsValueIds = get_array_vals_by_second_key($existingParameterGrops, 'main_parameter_value_id');
    if (!empty($parameterValues)) {
      foreach ($parameterValues as $pv) {
        if(!in_array($pv, $existingParameterGropsValueIds)) {
          $groupDataArr = array('product_id' => $productId, 'main_parameter_value_id' => $pv);
          ManagerHolder::get('ParameterGroup')->insert($groupDataArr);
        } else {
          $key = array_search($pv, $existingParameterGropsValueIds);
          unset($existingParameterGropsValueIds[$key]);
        }
      }
    }
    // Delete expired parameter groups
    if(!empty($existingParameterGropsValueIds)) {
      ManagerHolder::get('ParameterGroup')->deleteAllWhere(array('product_id' => $productId, 'main_parameter_value_id' => $existingParameterGropsValueIds));
    }
  }


  /**
   * processParameterGroups
   */
  private function processParameterGroups($entity = array()) {

    $this->load->helper('project');
    $countChange = FALSE;
    foreach ($this->savedParameterGroups as $k => $savedGroup) {
	    $pGroupInDb = ManagerHolder::get('ParameterGroup')->getById($savedGroup['id'], 'e.*, image.*');

      $savedGroup['bar_code'] = trim($savedGroup['bar_code']);
      if(!empty($pGroupInDb)) {
        $updateArr = array();
        if (isset($savedGroup['count'])) {
          if ($savedGroup['count'] === "") {
            $savedGroup['count'] = 0;
          }
          if($savedGroup['count'] != $pGroupInDb['count']) {
            $updateArr['count'] = $savedGroup['count'];
            $countChange = TRUE;
          }
        }
        if(isset($savedGroup['our_stock']) && $savedGroup['our_stock'] != $pGroupInDb['our_stock']) {
          $updateArr['our_stock'] = $savedGroup['our_stock'];
        }
        if($savedGroup['price'] != $pGroupInDb['price']) {
          $updateArr['price'] = $savedGroup['price'];
        }
        if($savedGroup['bar_code'] != $pGroupInDb['bar_code']) {
          $updateArr['bar_code'] = $savedGroup['bar_code'];
        }
        if($savedGroup['not_in_stock'] != $pGroupInDb['not_in_stock']) {
          $updateArr['not_in_stock'] = $savedGroup['not_in_stock'];
        }

        // Check for image
        $imageId = $this->loadAndResizeImageForParameterGroup($k);
        if($imageId != FALSE) {
          $updateArr['image_id'] = $imageId;
        }

        if(!empty($updateArr)) {
          $updateArr['id'] = $savedGroup['id'];
          ManagerHolder::get('ParameterGroup')->update($updateArr);
        }
        ManagerHolder::get('ParameterGroupValueOut')->deleteAllWhere(array('parameter_group_id' => $pGroupInDb['id']));
        if(is_not_empty($savedGroup['secondary_parameter_values_out'])) {
          if(is_not_empty($this->savedPossibleParameters['parameter_secondary'])) {
            foreach ($savedGroup['secondary_parameter_values_out'] as $valueOut) {
              ManagerHolder::get('ParameterGroupValueOut')->insert(array('parameter_group_id' => $pGroupInDb['id'], 'parameter_value_id' => $valueOut));
            }
          }
        }
      }

    }
    if ($countChange && !empty($entity)) {
      ManagerHolder::get('Product')->updateById($entity['id'], 'last_revision_date', date(DOCTRINE_DATE_FORMAT));
    }
  }


  /**
   *
   * Load and resize image for parameter group
   * @param integer $arrayPos position in $_FILES array
   * @return integer
   */
  protected function loadAndResizeImageForParameterGroup($arrayPos) {

    if(!is_not_empty($_FILES['parameter_groups']['name'][$arrayPos])) {
      return FALSE;
    }

    try {

      $fileName = to_translit($_FILES['parameter_groups']['name'][$arrayPos]);

      // Get extension
      $fileNameSegments = explode('.', $fileName);
      $ext = array_pop($fileNameSegments);

      $imageUrl = $_FILES['parameter_groups']['tmp_name'][$arrayPos];

      // Get image
      $imageData = file_get_contents($imageUrl);
      if(empty($imageData)) {
        return FALSE;
      }

      /** Upload dir for images. */
      $uploadDir = './web/images/uploads/parameter_group/';
      if(!is_dir($uploadDir)) {
        mkdir($uploadDir);
      }

      // Validate file name
      $fileName = $this->validate_filename($uploadDir, $fileName, $ext);

      // Insert image
      $res = @file_put_contents($uploadDir . $fileName, $imageData);
      if($res == FALSE) {
        throw new Exception();
      }
      list($width, $height) = getimagesize($uploadDir . $fileName);

//       $thumbs = $this->config->item('parametergroup', 'thumbs');
//       $thumbConfig = array_merge(array('_admin' => array('max_size' => 100)), $thumbs);

//       foreach ($thumbConfig as $thumbName => $params) {

//         $thumbNamePath = $uploadDir . str_replace('.' . $ext, '', $fileName) . $thumbName . '.' . $ext;

//         $resized_img = simple_resize_image($uploadDir . $fileName, $width, $height, $params['max_size'], $ext);
//         if($resized_img != FALSE) {
//           if($ext == 'png') {
//             imagepng($resized_img, $thumbNamePath, 9);
//           } else {
//             imagejpeg($resized_img, $thumbNamePath, 100);
//           }
//         }

//       }

      $imageArr = array();
      $imageArr['file_name'] = $fileName;
      $imageArr['file_path'] = $uploadDir;
      $imageArr['web_path'] = str_replace('./web/images/', '', $uploadDir);
      $imageArr['extension'] = '.' . $ext;
      $imageArr['size'] = filesize($uploadDir . $fileName)/1024;
      $imageArr['width'] = $width;
      $imageArr['height'] = $height;

      // Create thumbs
      $thumbs = $this->config->item('parametergroup', 'thumbs');
      $thumbs['_admin'] = $this->config->item('_admin', 'all');
      if ($thumbs) {
        foreach($thumbs as $name => $sizes) {
          if(isset($sizes['smart_crop']) && $sizes['smart_crop']){
            $this->fileoperations->createSmartCropThumb($imageArr, $name, $sizes["width"], $sizes["height"]);
          } else {
            $this->fileoperations->createImageThumb($imageArr, $name, $sizes["width"], $sizes["height"]);
          }
        }
      }

      $imageId = ManagerHolder::get('Image')->insert($imageArr);
      return $imageId;

    } catch (Exception $e) {
      log_message('error', '[loadAndResizeImageForParameterGroup] - FAILED:' . print_r($e->getMessage(), TRUE));
    }

  }

  /**
   * Validate file name
   *
   * This function takes a filename/path as input and looks for the
   * existence of a file with the same name. If found, it will append a
   * number to the end of the filename to avoid overwriting a pre-existing file.
   *
   * @access	private
   * @param	string
   * @param	string
   * @param	string
   * @return	string
   */
  private function validate_filename($path, $filename, $ext) {

    $ext = '.' . $ext;

    if ( ! file_exists($path.$filename)) {
      return $filename;
    }

    $filename = str_replace($ext, '', $filename);
    if(strlen($filename) > 200) {
      $filename = substr($filename, 80);
    }

    $new_filename = '';
    for ($i = 1; TRUE; $i++){
      if ( ! file_exists($path.$filename.$i.$ext)) {
        $new_filename = $filename.$i.$ext;
        break;
      }
    }

    if ($new_filename == '') {
      set_flash_error('upload_bad_filename');
      redirect_to_referral();
    }

    return $new_filename;
  }

  /**
   * ajax_filter_values
   */
  public function ajax_possible_parameters() {
    $paramValues = array();
    if(!empty($_GET['pId'])) {
      $paramValues = ManagerHolder::get('ParameterValue')->getAllWhere(array('parameter_id' => $_GET['pId']), 'e.*');
    }
    die(json_encode($paramValues));
  }

  /**
   * DeleteImageFromDb.
   * Delete image from db and hard drive.
   * @param integer $imageId
   * @return Image (the deleted image)
   */
  protected function deleteImageFromDb($imageId) {
    $image = ManagerHolder::get("Image")->getById($imageId, 'e.*');
    ManagerHolder::get("Image")->deleteById($imageId);
    // Check for cache
    if(isset(ManagerHolder::get($this->managerName)->CACHE_GROUP_KEY)) {
      $cacheGroupkey = ManagerHolder::get($this->managerName)->CACHE_GROUP_KEY;
      if (!empty($cacheGroupkey)) {
        $this->load->library("common/cache");
        $this->cache->remove_group($cacheGroupkey);
      }
    }
    return $image;
  }

  /**
   * ajax_filter_values
   */
  public function ajax_filter_values() {
    $filterValues = array();
    if(!empty($_GET['fId'])) {
      $filterValues = ManagerHolder::get('FilterValue')->getAllWhere(array('filter_id' => $_GET['fId']), 'e.*');
    }
    die(json_encode($filterValues));
  }

  /**
   * feed_export
   */
  public function feed_export() {

    $this->load->helper('project');

    $this->setFilter();
    $where = $this->filters;

    // Get fields map for rows processing
    $fields = ManagerHolder::get($this->entityName)->getFeeedExportFieldsMap('facebook');

    // Get everything from DB
    $entities = ManagerHolder::get($this->managerName)->getAllWhere($where, 'e.*, brand.*, category.*, image.*');

    // Load CSV Library
    $this->load->library('common/csv');

    // Set headers
    $this->csv->addHeader(array_keys($fields));

    if ($entities) {

      // Process Rows
      $rows = ManagerHolder::get($this->entityName)->processFeedExportRow($entities, $fields, 'facebook');

      $this->csv->addRows($rows);
    }

    // Send file to output
    $this->csv->flushFile('product_feed_export.csv');
    die();
  }

  /**
   * Ajax generate barcode
   */
  public function ajax_generate_barcode() {
    if (!isset($_GET['product_id']) || empty($_GET['product_id'])) {
      show_404();
    }
    if (!isset($_GET['group_id'])) {
      show_404();
    }
    for($i = 1; $i <= 9; $i++) {
      $barcode = $this->generateBarCode($i);
      $existsInProduct = ManagerHolder::get('Product')->existsWhere(array('bar_code' => $barcode));
      if (!$existsInProduct) {
        $existsInGroup = ManagerHolder::get('ParameterGroup')->existsWhere(array('bar_code' => $barcode));
        if (!$existsInGroup) {
          die($barcode);
        }
      }
    }

    show_404();
  }

  /**
   * Generate barcode
   * @param $baseNum
   * @return string
   */
  private function generateBarCode($baseNum) {
    $productId = (int)$_GET['product_id'];
    $productIdZeroCount = 6 - strlen($productId);
    $groupId = (int)$_GET['group_id'];
    $groupIdZeroCount = 6 - strlen($groupId);

    $barcode = $baseNum;
    for($i = 0; $i < $productIdZeroCount; $i++) {
      $barcode .= 0;
    }
    $barcode .= $productId;
    for($i = 0; $i < $groupIdZeroCount; $i++) {
      $barcode .= 0;
    }
    $barcode .= $groupId;

    return $barcode;
  }

}