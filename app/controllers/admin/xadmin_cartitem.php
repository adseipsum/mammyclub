<?php if (!defined("BASEPATH")) exit("No direct script access allowed");
/**
 * xAdmin_CartItem
 * This class has been auto-generated by Itirra
 */
require_once APPPATH . 'controllers/admin/base/base_admin_controller.php';
class xAdmin_CartItem extends Base_Admin_Controller {

  /** Filters. */
  protected $filters = array("cart.id" => "", "product.id" => "");

  /**
   * Delete.
   * @param integer $entityId
   */
  public function delete($entityId) {
    $entity = $this->deleteFromDb($entityId);
  }

  /**
   * DeleteFromDb.
   * Deletes entity from DB and its images.
   * @param integer $entityId
   * @return Object (the deleted entity)
   */
  protected function deleteFromDb($entityId) {
    $entity = ManagerHolder::get($this->managerName)->getById($entityId);
    if (isset($entity["image"]) && !empty($entity["image"])) {
      $this->deleteImageFromDb($entity["image"]['id']);
    }
    $this->preDelete($entityId);
    $this->addAdminLogRecord($entity, 'delete');
    ManagerHolder::get($this->managerName)->deleteById($entityId);

    $cart = $entity['cart'];
    if (!empty($cart['siteorder_id'])) {
      $siteOrder = ManagerHolder::get('SiteOrder')->getById($cart['siteorder_id'], 'siteorder_status.*');

      $notCountUpdateStatuses = array(SITEORDER_STATUS_SHIPPED, SITEORDER_STATUS_DELIVERED, SITEORDER_STATUS_RETURNED, SITEORDER_STATUS_CANCELED);
      if (!in_array($siteOrder['siteorder_status']['k'], $notCountUpdateStatuses)) {
        if (!empty($entity['parameter_group_id'])) {
          ManagerHolder::get('ParameterGroup')->increment($entity['parameter_group_id'], 'count', $entity['qty']);
        } else {
          ManagerHolder::get('Product')->increment($entity['product_id'], 'count', $entity['qty']);
        }
        ManagerHolder::get('Product')->updateOnOrderFlag($entity['product_id']);
      }
    }

    $this->postDelete($entityId);
    return $entity;
  }

  /**
   * Implementation of PRE_DELETE event callback
   * @param int $entityId id
   * @return Object
   */
  protected function preDelete($entityId) {
    $cartItem = ManagerHolder::get('CartItem')->getById($entityId);
    $cart = $cartItem['cart'];
    $newCartTotal = $cart['total'] - $cartItem['item_total'];

    ManagerHolder::get('Cart')->updateById($cart['id'], 'total', $newCartTotal);
    if (!empty($cart['siteorder_id'])) {
      ManagerHolder::get('SiteOrder')->updateById($cart['siteorder_id'], 'total', $newCartTotal);
    }
  }


  /**
   * Ajax save product parameters
   * @param int $entityId id
   */
  public function ajax_save_cart_item_params($entityId) {
    $paramsData =  array();
    $parameterGroupId = null;

    // Param 1
    if (is_not_empty($_POST['param1'])) {
      $paramsData[] = $_POST['param1'];

      $cartItem = ManagerHolder::get('CartItem')->getById($entityId, 'e.*, product.*, cart.*');

      $cartTotalWithoutCurrentItem = 0;
      $allCartItemsWithoutCurrent = ManagerHolder::get('CartItem')->getAllWhere(array('cart_id' => $cartItem['cart_id']), 'e.*', null, array($cartItem['id']));
      if(!empty($allCartItemsWithoutCurrent)) {
        foreach ($allCartItemsWithoutCurrent as $ccc) {
          $cartTotalWithoutCurrentItem += $ccc['item_total'];
        }
      }

      $parameterGroups = ManagerHolder::get('ParameterGroup')->getAllWhere(array('product_id' => $cartItem['product_id']), 'e.*');
      $parameterGroupMainValueIDs = get_array_vals_by_second_key($parameterGroups, 'main_parameter_value_id');

      $newPrice = $cartItem['product']['price'];

      if(!empty($parameterGroupMainValueIDs)) {
        $mainKey = array_search($_POST['param1'], $parameterGroupMainValueIDs);
        if($mainKey !== FALSE) {
          $parameterGroupId = $parameterGroups[$mainKey]['id'];

          if(!empty($parameterGroups[$mainKey]['price'])) {
            $newPrice = $parameterGroups[$mainKey]['price'];
          }
        }
      }
      if($newPrice != $cartItem['price']) {
        $updateArray = array('price' => $newPrice,
                             'item_total' => $newPrice*$cartItem['qty']);
        ManagerHolder::get('CartItem')->updateAllWhere(array('id' => $cartItem['id']), $updateArray);

        $newCartTotal = $cartTotalWithoutCurrentItem + $newPrice * $cartItem['qty'];
        ManagerHolder::get('Cart')->updateById($cartItem['cart']['id'], 'total', $newCartTotal);
        if (!empty($cartItem['cart']['siteorder_id'])) {
          ManagerHolder::get('SiteOrder')->updateById($cartItem['cart']['siteorder_id'], 'total', $newCartTotal);
        }
      }

    }

    ManagerHolder::get('CartItem')->updateById($entityId, 'parameter_group_id', $parameterGroupId);

    // Param 2
    if (is_not_empty($_POST['param2'])) {
      $paramsData[] = $_POST['param2'];
    }

    if (!empty($paramsData)) {
      $paramsData = serialize($paramsData);
      ManagerHolder::get('CartItem')->updateById($entityId, 'additional_product_params', $paramsData);
    }
  }

  /**
   * Ajax get product parameters
   */
  public function ajax_get_cart_item_params($entityId) {
    $result = null;
    $entity = ManagerHolder::get('Product')->getById($entityId, 'e.*, possible_parameters.*, parameter_groups.*');
    if(!empty($entity['parameter_groups'])) {
      foreach ($entity['parameter_groups'] as &$group) {
        if(empty($group['price'])) {
          $group['price'] = $entity['price'];
        }
        $secondaryParamValueIds = get_array_vals_by_second_key($group['secondary_parameter_values_out'], 'id');
        $group['secondary_parameter_values'] = array();
        foreach ($entity['possible_parameters']['possible_parameter_values'] as $possibleParamValue) {
          if($entity['possible_parameters']['parameter_secondary_id'] == $possibleParamValue['parameter_id']) {
//            $possibleParamValue['on_order'] = FALSE;
//            if(in_array($possibleParamValue['id'], $secondaryParamValueIds) || $group['on_order'] == TRUE) {
//              $possibleParamValue['on_order'] = TRUE;
//            }
            $group['secondary_parameter_values'][] = $possibleParamValue;
          }
        }
      }
      $result['possible_parameters'] = $entity['possible_parameters'];
      $result['parameter_groups'] = $entity['parameter_groups'];
      die(json_encode($result));
    }
    die($result);
  }

  /**
   * Ajax get secondary_param_values
   */
  public function ajax_get_secondary_param_values($groupId) {

    $result = null;

    $group = ManagerHolder::get('ParameterGroup')->getById($groupId, 'e.*, product.*, secondary_parameter_values_out.*');
    $possibleParameters = ManagerHolder::get('ParameterProduct')->getById($group['product']['possible_parameters_id'], 'e.*, possible_parameter_values.*, parameter_secondary.*');

    if(!empty($possibleParameters['parameter_secondary_id'])) {
      $secondaryParamValueIds = get_array_vals_by_second_key($group['secondary_parameter_values_out'], 'id');

      $secondaryParamValues = array();
      foreach ($possibleParameters['possible_parameter_values'] as $possibleParamValue) {
        if($possibleParameters['parameter_secondary_id'] == $possibleParamValue['parameter_id']) {
//          $possibleParamValue['on_order'] = FALSE;
//          if(in_array($possibleParamValue['id'], $secondaryParamValueIds) || $group['on_order'] == TRUE) {
//            $possibleParamValue['on_order'] = TRUE;
//          }
          $secondaryParamValues[] = $possibleParamValue;
        }
      }

      $result['secondary_parameter_values'] = $secondaryParamValues;
      $result['parameter_secondary_name'] = $possibleParameters['parameter_secondary']['name'];
    }

    die(json_encode($result));
  }


  /**
   * Ajax add cart item
   */
  public function ajax_add_cart_item() {
    simple_validate_post(array('product_id', 'site_order_id', 'qty'));

    $siteOrder = ManagerHolder::get('SiteOrder')->getById($_POST['site_order_id'], 'e.*, user.*, Cart.*, siteorder_status.*');
    $user = ManagerHolder::get('User')->getById($siteOrder['user_id'], 'e.*');
    ManagerHolder::get('User')->addAvailableSalestoUser($user);

    $product = ManagerHolder::get('Product')->getById($_POST['product_id'], 'e.*, parameter_groups.*');
    ManagerHolder::get('Sale')->addAvailableSaleToProducts($user, $product);

    $cartItemData = array('product_id' => $_POST['product_id'],
                          'cart_id' => $siteOrder['Cart'][0]['id'],
                          'qty' => $_POST['qty'],
                          'price' => $product['price']);

    // Grab params to array
    $params = array();
    $productCountLeft = $product['count'];
    $ourStock = $product['our_stock'];
    $parameterGroupId = NULL;
    if (is_not_empty($_POST['param1'])) {
      if(!empty($product['parameter_groups'])) {
        $mainParamValueIDs = get_array_vals_by_second_key($product['parameter_groups'], 'main_parameter_value_id');
        $mainKey = array_search($_POST['param1'], $mainParamValueIDs);
        if($mainKey !== FALSE) {
          $newPrice = $product['parameter_groups'][$mainKey]['price'];
          $parameterGroupId = $product['parameter_groups'][$mainKey]['id'];
          $parameterGroupCount = $product['parameter_groups'][$mainKey]['count'];
          $ourStock = $product['parameter_groups'][$mainKey]['our_stock'];
          $productCountLeft = $parameterGroupCount;
          if(!empty($newPrice) && $newPrice != $cartItemData['price']) {
            $cartItemData['price'] = $newPrice;
          }
        }
      }
      $params[] = $_POST['param1'];
      if (isset($_POST['param2']) && !empty($_POST['param2'])) {
        $params[] = $_POST['param2'];
      }
    }
    $cartItemData['parameter_group_id'] = $parameterGroupId;
    $cartItemData['product_count_left'] = $productCountLeft;

    // Get inventories data
    $inventoriesWhere = array();
    $inventoriesWhere['product_id'] = $cartItemData['product_id'];
    if (!empty($cartItemData['parameter_group_id'])) {
      $inventoriesWhere['product_group_id'] = $cartItemData['parameter_group_id'];
    }
    $inventories = ManagerHolder::get('StoreInventory')->getAllWhere($inventoriesWhere, 'store_id, qty');
    $cartItemData['zammler_inventory_qty'] = 0;
    $siteOrderItem['mc_inventory_qty'] = 0;
    $cartItemData['other_stores_inventory_qty'] = 0;
    if (!empty($inventories)) {
      foreach ($inventories as $inventory) {
        if ($inventory['store_id'] == ZAMMLER_STORE_ID) {
          $cartItemData['zammler_inventory_qty'] = $inventory['qty'];
        } elseif ($inventory['store_id'] == MC_STORE_ID) {
          $siteOrderItem['mc_inventory_qty'] = $inventory['qty'];
        } else {
          $cartItemData['other_stores_inventory_qty'] += $inventory['qty'];
        }
      }
    }
    $cartItemData['our_stock'] = $ourStock;

    // Set new item total
    $cartItemData['item_total'] = $cartItemData['price'] * $cartItemData['qty'];
//    if (isset($product['sale']['discount']) && !empty($product['sale']['discount'])) {
//      $cartItemData['discount_price'] = round($cartItemData['price'] - $cartItemData['price'] / 100 * $product['sale']['discount']);
//      $cartItemData['item_total'] = $cartItemData['discount_price'] * $cartItemData['qty'];
//    }

    if (!empty($params)) {
      $cartItemData['additional_product_params'] = serialize($params);
    }

    $cartItemData['id'] = ManagerHolder::get('CartItem')->insert($cartItemData);

    $notCountUpdateStatuses = array(SITEORDER_STATUS_SHIPPED, SITEORDER_STATUS_DELIVERED, SITEORDER_STATUS_RETURNED, SITEORDER_STATUS_CANCELED);
    if (!in_array($siteOrder['siteorder_status']['k'], $notCountUpdateStatuses)) {
      if (!empty($cartItemData['parameter_group_id'])) {
        ManagerHolder::get('ParameterGroup')->increment($cartItemData['parameter_group_id'], 'count', -$cartItemData['qty']);
      } else {
        ManagerHolder::get('Product')->increment($cartItemData['product_id'], 'count', -$cartItemData['qty']);
      }
      ManagerHolder::get('Product')->updateOnOrderFlag($cartItemData['product_id']);
    }

    // Increase cart total
    $cart = ManagerHolder::get('Cart')->getById($siteOrder['Cart'][0]['id'], 'e.*, items.*');

    $cart['total'] += $cartItemData['item_total'];

    ManagerHolder::get('Cart')->updateById($cart['id'], 'total', $cart['total']);
    ManagerHolder::get('SiteOrder')->updateById($siteOrder['id'], 'total', $cart['total']);

    $this->load->helper('project');

    // RENDER NEW HTML OF CART DATA-----------------------------------------------------------------
    if (is_not_empty($cart['items'])) {
      foreach ($cart['items'] as &$cartItem) {
        // Add product
        $cartItem['product'] = ManagerHolder::get('Product')->getById($cartItem['product_id'], 'e.*, brand.*');
        // Add selected by user parameters
        if (!empty($cartItem['additional_product_params'])) {
          $cartItem['additional_product_params'] = unserialize($cartItem['additional_product_params']);
        }

        // Get possible parameters
        $cartItem['product']['possible_parameters'] = ManagerHolder::get('ParameterProduct')->getById($cartItem['product']['possible_parameters_id'], 'e.*, parameter_main.*, parameter_secondary.*, possible_parameter_values.*');

        // Get parameter groups of the product
        $cartItem['product']['parameter_groups'] = ManagerHolder::get('ParameterGroup')->getAllWhere(array('product_id' => $cartItem['product']['id']), 'e.*, main_parameter_value.*, secondary_parameter_values_out.*, image.*');
        if(!empty($cartItem['product']['parameter_groups'])) {
          foreach ($cartItem['product']['parameter_groups'] as &$group) {

            $secondaryParamValueIds = get_array_vals_by_second_key($group['secondary_parameter_values_out'], 'id');

            $group['secondary_parameter_values'] = array();
            foreach ($cartItem['product']['possible_parameters']['possible_parameter_values'] as $possibleParamValue) {
              if($cartItem['product']['possible_parameters']['parameter_secondary_id'] == $possibleParamValue['parameter_id']) {
                $possibleParamValue['not_in_stock'] = FALSE;
                if(in_array($possibleParamValue['id'], $secondaryParamValueIds) || $group['not_in_stock'] == TRUE) {
                  $possibleParamValue['not_in_stock'] = TRUE;
                }
                $group['secondary_parameter_values'][] = $possibleParamValue;
              }
            }
          }
        }

        // Add all available parameters
        if (isset($cartItem['product']['product_params_id']) && !empty($cartItem['product']['product_params_id'])) {
          $cartItem['product']['params'] = ManagerHolder::get('ProductParams')->getById($cartItem['product']['product_params_id'], 'e.*');
          $cartItem['product']['params'] = unserialize($cartItem['product']['params']['product_params']);
        }

        // Set delivery time
        $cartItem['delivery_time'] = '';
        if (!empty($cartItem['zammler_inventory_qty'])){
          $cartItem['delivery_time'] = "Есть на складе";
        } elseif (!empty($cartItem['other_stores_inventory_qty'])){
          $cartItem['delivery_time'] = $cartItem['product']['brand']['delivery_time'];
        }
      }
    }

    $html = '';
    $this->layout->setLayout('empty');
    $stores = ManagerHolder::get('Store')->getAsViewArray();
    $supplierNewRequests = ManagerHolder::get('SupplierRequest')->getAllWhere(array('supplier_request_status_id' => 1, 'receiver_id' => $siteOrder['shipment_store']['id']), 'e.*');
    $this->layout->set("supplierNewRequests", $supplierNewRequests);
    $this->layout->set('cart', $cart);
    $this->layout->set('stores', $stores);
    $this->layout->set('siteOrderStatus', $siteOrder['siteorder_status']);

    $html .= $this->layout->view('siteorder/cart', TRUE);

//     $products = ManagerHolder::get('Product')->getAll('e.*, product_params.*');
//     foreach ($products as &$product) {
//       if (!empty($user)) {
//         ManagerHolder::get('Sale')->addAvailableSaleToProducts($user, $product);
//       }
//       if (!empty($product['product_params_id'])) {
//         $product['params'] = ManagerHolder::get('ProductParams')->getById($product['product_params_id'], 'e.*');
//       }
//     }
//     unset($product);

//     $this->layout->set('products', $products);
//     $html .= $this->layout->view('siteorder/add_to_cart', TRUE);

    die($html);
  }

  /**
   * Ajax change qty
   * @param integer $ciId - cart item id
   */
  public function ajax_change_qty($ciId) {

    $cartItem = ManagerHolder::get('CartItem')->getById($ciId, 'e.*');
    $cart = ManagerHolder::get('Cart')->getById($cartItem['cart_id'], 'e.*');

    $cartTotalWithoutCurrentItem = 0;
    $allCartItemsWithoutCurrent = ManagerHolder::get('CartItem')->getAllWhere(array('cart_id' => $cartItem['cart_id']), 'e.*', null, array($cartItem['id']));
    if(!empty($allCartItemsWithoutCurrent)) {
      foreach ($allCartItemsWithoutCurrent as $ccc) {
        $cartTotalWithoutCurrentItem += $ccc['item_total'];
      }
    }

//     $cartTotalWithoutCurrentItem = $cart['total'] - $cartItem['qty'] * $cartItem['price'];
    $newItemTotal = $_POST['qty'] * $cartItem['price'];
    if(is_not_empty($cartItem['discount_price'])) {
      $cartTotalWithoutCurrentItem = $cart['total'] - $cartItem['qty'] * $cartItem['discount_price'];
      $newItemTotal = $_POST['qty'] * $cartItem['discount_price'];
    }

    ManagerHolder::get('CartItem')->updateAllWhere(array('id' => $cartItem['id']),
                                                   array('qty' => $_POST['qty'], 'item_total' => $newItemTotal));

    $cartTotal = $cartTotalWithoutCurrentItem + $newItemTotal;
    ManagerHolder::get('Cart')->updateById($cart['id'], 'total', $cartTotal);
    if (!empty($cart['siteorder_id'])) {
      ManagerHolder::get('SiteOrder')->updateById($cart['siteorder_id'], 'total', $cartTotal);
    }
  }
}