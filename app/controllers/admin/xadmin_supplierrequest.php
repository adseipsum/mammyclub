<?php if (!defined("BASEPATH")) exit("No direct script access allowed");
/**
 * xAdmin_SupplierRequest
 * This class has been auto-generated by Itirra
 */
require_once APPPATH . 'controllers/admin/base/base_admin_controller.php';



class xAdmin_SupplierRequest extends Base_Admin_Controller {

  /** Export */
  protected $export = TRUE;

  protected $exportExcludeFields = array('product_parameter_group', 'receiver.id');

	/** Field to search in. */
	protected $searchParams = array('supplier');

	/** Date Filters. Row example: array("created_at"). */
	protected $dateFilters = array('execution_date');

	/** Additional Actions. Simple Array. Ex. array('view', 'print')*/
	protected $additionalItemActions = array('print_request', 'print_invoice', 'print_supplier_request', 'create_ttn');

	/** $savedProductParameterGroupPost */
	private $savedProductParameterGroupPost;

  /** Filters. */
  protected $filters = array("supplier_request_status.id" => "",
                             "store.id" => "",
                             "receiver.id" => "");


  /**
   * Export process.
   */
  public function export_process() {
    if (!$this->export) show_404();

    $entityObject = new $this->entityName;

    $_POST = array_make_plain_with_dots($_POST);

    $fields = array();
    if (!isset($this->fields['id'])) {
      $fields = array('id');
    }

    foreach ($this->fields as $k => $v) {
      if (!isset($_POST[$k]) || $_POST[$k] == 0) continue;
      $fields[] = $k;
    }

    // Export filters
    $exportFilters = array();

    if (isset($_POST['exportfilter_batch_export_ids'])) {
      $exportFilters['id'] = explode(',', $_POST['exportfilter_batch_export_ids']);
    } else {

      // foreignKeys
      $foreignKeys = ManagerHolder::get($this->managerName)->getForeignKeys();
      $foreignKeysAliases = array();
      foreach($foreignKeys as $alias => $fk) {
        $foreignKeysAliases[$fk['local']] = $alias;
      }

      foreach ($this->filters as $k => $v) {
        $key = 'exportfilter_' . str_replace('.', '_', $k);
        if (isset($_POST[$key])) {
          $exportFilters[$k] = $_POST[$key];
          // company_id => company
          if($foreignKeysAliases && isset($foreignKeysAliases[$k])) {
            $k = $foreignKeysAliases[$k];
          }

          if (!in_array($k, $fields)) {
            if ($k == 'receiver.id' || $k == 'store.id' || $k == 'supplier_request_status.id') {
              continue;
            }
            $fields[] = $k;
          }
        }
      }

      foreach ($this->dateFilters as $k) {
        $key = 'exportfilter_' . str_replace('.', '_', $k);
        if (isset($_POST[$key])) {
          if (strpos($_POST[$key], 'BETWEEN') !== FALSE) {
            $exportFilters[$k . 'BETWEEN'] = trim(str_replace('BETWEEN', '', $_POST[$key]));
          }
          if (strpos($_POST[$key], '>') !== FALSE) {
            $exportFilters[$k . '>'] = trim(str_replace('>', '', $_POST[$key]));
          }
          if (strpos($_POST[$key], '<') !== FALSE) {
            $exportFilters[$k . '<'] = trim(str_replace('<', '', $_POST[$key]));
          }
          // company_id => company
          if($foreignKeysAliases && isset($foreignKeysAliases[$k])) {
            $k = $foreignKeysAliases[$k];
          }
          if (!in_array($k, $fields)) {
            $fields[] = $k;
          }
        }
      }
    }

    if (!empty($this->extraWhere)) {
      $exportFilters = array_merge($exportFilters, $this->extraWhere);
    }

    if (!empty($exportFilters)) {
      $entities = ManagerHolder::get($this->managerName)->export($exportFilters, $fields);
    } else {
      // Get everything from DB
      $entities = ManagerHolder::get($this->managerName)->export(array(), $fields);
    }

    $entityObject = new $this->entityName;

    // Load CSV Library
    $this->load->library('common/csv');

    if (!isset($_POST['id']) || empty($_POST['id'])) {
      unset($fields[array_search('id', $fields)]);
    }

    // Remove excluded fields
    if (!empty($this->exportExcludeFields)) {
      foreach ($this->exportExcludeFields as $exField) {
        if (isset($fields[$exField])) {
          unset($fields[$exField]);
        }
      }
    }


    // Set headers
    $ftrans = array();
    foreach ($fields as $f) {
      $ftrans[] = html_entity_decode(lang('admin.add_edit.' . strtolower($this->entityName) . '.' .  str_replace('.*', '', $f)));
    }

    $this->csv->addHeader($ftrans);
    if ($entities) {
      // Process Rows
      $rows = array();
      foreach ($entities as $e) {
        $row = array();
        foreach ($fields as $key) {
          $row[$key] = $e[$key];
        }
        $row = $this->preProcessExportRow($row, $fields);
        $rows[] = $row;
      }
      $this->csv->addRows($rows);
    }

    // Send file to output
    $this->csv->flushFile(lang('admin.entity_list.' . strtolower($this->entityName) . '.list_title') . '.csv');
    die();
  }



  /**
   * Create ttn
   * @param $supplierRequestId
   */
  public function create_ttn($supplierRequestId) {
    $supplierRequest = ManagerHolder::get('SupplierRequest')->getById($supplierRequestId, 'e.*');

    $senderStore = ManagerHolder::get('Store')->getById($supplierRequest['store_id'], 'e.*, counterparty.*, sender_counterpartyaddress.*, sender_city.*, sender_warehouse.*, counterpartycontactperson.*');
    if (empty($senderStore)) {
      set_flash_error('Не указан поставщик');
      redirect_to_referral();
    }

    $receiverStore = ManagerHolder::get('Store')->getById($supplierRequest['receiver_id'], 'e.*, receiver_counterparty.*, receiver_counterpartyaddress.*, receiver_city.*, receiver_warehouse.*, receiver_counterpartycontactperson.*');
    if (empty($receiverStore)) {
      set_flash_error('Не указан получатель');
      redirect_to_referral();
    }

    $senderStore['sender_counterpartyaddress']['city'] = ManagerHolder::get('City')->getById($senderStore['sender_counterpartyaddress']['city_id'], 'e.*');
    $senderStore['counterparty']['city'] = ManagerHolder::get('City')->getById($senderStore['counterparty']['city_id'], 'e.*');
    $receiverStore['receiver_counterpartyaddress']['city'] = ManagerHolder::get('City')->getById($receiverStore['receiver_counterpartyaddress']['city_id'], 'e.*');
    $receiverStore['receiver_counterparty']['city'] = ManagerHolder::get('City')->getById($receiverStore['receiver_counterparty']['city_id'], 'e.*');

    $this->load->library('NewPostSdk');
    $document = $this->newpostsdk->createSupplierRequestTtn($supplierRequest, $senderStore, $receiverStore);

    if (!$document->success) {
      $errors = implode(', ', $document->errors);
      set_flash_error($errors);
      redirect_to_referral();
    }
    $document = $document->data[0];
    ManagerHolder::get('SupplierRequest')->updateById($supplierRequest['id'], 'ttn_code', $document->IntDocNumber);

    set_flash_notice('ТТН успешно создан');
    redirect_to_referral();
  }

  /**
   * Ajax add item
   */
  public function ajax_add_item() {
    if (!isset($_GET['supplierRequestId']) || empty($_GET['supplierRequestId']) || !isset($_GET['siteorderItemId']) || empty($_GET['siteorderItemId'])) {
      die('ERROR');
    }

    $supplierRequest = ManagerHolder::get('SupplierRequest')->getById($_GET['supplierRequestId'], 'e.*');
    $siteorderItem = ManagerHolder::get('SiteOrderItem')->getById($_GET['siteorderItemId'], 'e.*, siteorder.*');

    if (empty($supplierRequest) || empty($siteorderItem)) {
      die('ERROR');
    }

    $item = array();
    $item['siteorder_code'] = $siteorderItem['siteorder']['code'];
    $item['qty'] = $siteorderItem['qty'];
    $item['supplier_request_id'] = $supplierRequest['id'];
    $item['product_id'] = $siteorderItem['product_id'];
    $item['parameter_group_id'] = $siteorderItem['parameter_group_id'];
    $item['siteorder_item_id'] = $siteorderItem['id'];
    $item['shipment_date'] = $siteorderItem['siteorder']['shipment_date'];

    $existsItem = ManagerHolder::get('SupplierRequestProductParameterGroup')->getOneWhere(array('supplier_request_id' => $supplierRequest['id'], 'siteorder_item_id' => $siteorderItem['id']), 'e.id');

    if (!$existsItem) {
      ManagerHolder::get('SupplierRequestProductParameterGroup')->insert($item);
    } else {
      $item['id'] = $existsItem['id'];
      ManagerHolder::get('SupplierRequestProductParameterGroup')->update($item);
    }

    die('DONE');
  }

  /**
   * Ajax remove item
   */
  public function ajax_remove_item() {
    if (!isset($_GET['supplierRequestId']) || empty($_GET['supplierRequestId']) || !isset($_GET['siteorderItemId']) || empty($_GET['siteorderItemId'])) {
      die('ERROR');
    }

    ManagerHolder::get('SupplierRequestProductParameterGroup')->deleteAllWhere(array('supplier_request_id' => $_GET['supplierRequestId'], 'siteorder_item_id' => $_GET['siteorderItemId']));
    die('DONE');
  }

  /**
   * Ajax remove item
   */
  public function ajax_create() {
    if (!isset($_POST['store_id']) || empty($_POST['store_id']) || !isset($_POST['execution_date']) || empty($_POST['execution_date']) || !isset($_POST['siteorder_item_id']) || empty($_POST['siteorder_item_id']) || !isset($_POST['shipment_store']) || empty($_POST['shipment_store'])) {
      die('ERROR');
    }

    $entity = array();
    $entity['store_id'] = $_POST['store_id'];
    $entity['execution_date'] = $_POST['execution_date'];
    $entity['receiver_id'] = $_POST['shipment_store'];
    $entity['id'] = ManagerHolder::get('SupplierRequest')->insert($entity);

    $siteOrderItem = ManagerHolder::get('SiteOrderItem')->getById($_POST['siteorder_item_id'], 'e.*, siteorder.*');

    $item = array();
    $item['siteorder_code'] = $siteOrderItem['siteorder']['code'];
    $item['qty'] = $siteOrderItem['qty'];
    $item['supplier_request_id'] = $entity['id'];
    $item['product_id'] = $siteOrderItem['product_id'];
    $item['parameter_group_id'] = $siteOrderItem['parameter_group_id'];
    $item['siteorder_item_id'] = $siteOrderItem['id'];

    $existsItem = ManagerHolder::get('SupplierRequestProductParameterGroup')->getOneWhere(array('supplier_request_id' => $entity['id'], 'siteorder_item_id' => $siteOrderItem['id']), 'e.id');

    if (!$existsItem) {
      ManagerHolder::get('SupplierRequestProductParameterGroup')->insert($item);
    } else {
      $item['id'] = $existsItem['id'];
      ManagerHolder::get('SupplierRequestProductParameterGroup')->update($item);
    }
    die('DONE');
  }

	/**
	 * print_invoice
	 * @param int $id
	 */
	public function print_invoice($id) {
		$request = ManagerHolder::get($this->entityName)->getById($id, 'e.*, product_parameter_group.*');
		if (empty($request)) {
			show_404();
		}

		$this->load->library('PHPExcelWrapper');
		$sheet = $this->phpexcelwrapper->getSheet();

		$sheet->getColumnDimension("A")->setWidth(24);
		$sheet->getColumnDimension("B")->setWidth(16);
		$sheet->getColumnDimension("C")->setWidth(60);
		$sheet->getColumnDimension("D")->setWidth(12);
		$sheet->getColumnDimension("E")->setWidth(28);
		$sheet->getColumnDimension("F")->setWidth(28);
		$sheet->getColumnDimension("G")->setWidth(28);
		$sheet->getColumnDimension("H")->setWidth(28);

		$rowNum = 1;

		// Product table header
		$productDataFields = array('bar_code', 'product_code', 'name', 'qty', 'price', 'cost_price', 'siteorder_code', 'shipment_date');
		for ($i=0; $i<=7; $i++) {
			$sheet->getStyleByColumnAndRow($i, $rowNum)->getBorders()->applyFromArray($this->phpexcelwrapper->borderStyle);
			$sheet->getStyleByColumnAndRow($i, $rowNum)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER)->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
			if (isset($productDataFields[$i])) {
				$sheet->setCellValueByColumnAndRow($i, $rowNum, lang('excel.print_request.product_table.header.' . $productDataFields[$i]));
			}
		}

		$rowNum++;

		// Product table products
		$productData = array();
		if (!empty($request['product_parameter_group'])) {
			foreach ($request['product_parameter_group'] as $ppg) {
				$productData[] = array('bar_code' => !empty($ppg['parameter_group'])&&!empty($ppg['parameter_group']['bar_code'])?$ppg['parameter_group']['bar_code']:$ppg['product']['bar_code'],
									 						 'product_code'  => $ppg['product']['product_code'],
										 					 'name'  => $ppg['product']['name'] . (!empty($ppg['parameter_group'])?' ' . $ppg['parameter_group']['main_parameter_value']['name']:''),
															 'qty'   => $ppg['qty'],
															 'price' => !empty($ppg['parameter_group'])&&!empty($ppg['parameter_group']['price'])?$ppg['parameter_group']['price']:$ppg['product']['price'],
															 'cost_price' => !empty($ppg['parameter_group'])&&!empty($ppg['parameter_group']['cost_price'])?$ppg['parameter_group']['cost_price']:$ppg['product']['cost_price'],
															 'siteorder_code' => $ppg['siteorder_code'],
															 'shipment_date' => !empty($ppg['shipment_date'])?$ppg['shipment_date']:'');

			}
		}
		if (!empty($productData)) {
			foreach ($productData as $p) {
				foreach ($p as $k => $v) {
					for ($i=0; $i<=7; $i++) {
						$sheet->getStyleByColumnAndRow($i, $rowNum)->getBorders()->applyFromArray($this->phpexcelwrapper->borderStyle);
						$sheet->getStyleByColumnAndRow($i, $rowNum)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
						if ($i == array_search($k, $productDataFields)) {
							$sheet->setCellValueByColumnAndRow($i, $rowNum, $v);
						}
					}
				}
				$rowNum++;
			}
		}

		$this->phpexcelwrapper->flush("расходна_накладная_№" . $request['code'] . ".xls");
	}

  /**
   * print_request
   * @param int $id
   */
  public function print_request($id) {
    $request = ManagerHolder::get($this->entityName)->getById($id, 'e.*, product_parameter_group.*, store.*');

    require_once('./lib/phpExcel/PHPExcel.php');
    require_once('./lib/phpExcel/PHPExcel/IOFactory.php');

    $xls = @PHPExcel_IOFactory::load('./web/supplier_request_zammler_template.xlsx');
    foreach ($xls->getWorksheetIterator() as $sheet) {
      $sheet->setCellValue("B1", trim($request['ttn_code']));
      $sheet->setCellValue("B12", trim($request['code']));


      $rowNum = 18;

      // Product table header
      $productDataFields = array('name', 'bar_code', 'qty', 'weight', 'store', 'standart');

      // Product table products
      $productData = array();
      if (!empty($request['product_parameter_group'])) {
        foreach ($request['product_parameter_group'] as $i => $ppg) {
          $productData[] = array(
            'index' => $i+1,
            'bar_code' => !empty($ppg['parameter_group'])&&!empty($ppg['parameter_group']['bar_code'])?$ppg['parameter_group']['bar_code']:$ppg['product']['bar_code'],
            'product_code'  => $ppg['product']['product_code'],
            'name'  => $ppg['product']['name'] . (!empty($ppg['parameter_group'])?' ' . $ppg['parameter_group']['main_parameter_value']['name']:''),
            'store'  => 'склад ТОВ "ЗАММЛЕР ФУЛФІЛМЕНТ"',
            'qty'   => $ppg['qty'],
            'standart' => ''
          );
        }
      }

      if (!empty($productData)) {
        foreach ($productData as $p) {
          foreach ($p as $k => $v) {
            for ($i=0; $i<=5; $i++) {
              if ($i == array_search($k, $productDataFields)) {
                $sheet->setCellValueByColumnAndRow($i, $rowNum, trim($v));
              }
            }
          }
          $rowNum++;
        }
      }

      if (isset($request['store']) && !empty($request['store'])) {
        $supplier = $request['store']['name'];
      } else {
        $supplier = '';
      }
      $supplier = str_replace(' ', '_', $supplier);
      // Send HTTP-headers
      header ( "Expires: Mon, 1 Apr 1974 05:00:00 GMT" );
      header ( "Last-Modified: " . gmdate("D,d M YH:i:s") . " GMT" );
      header ( "Cache-Control: no-cache, must-revalidate" );
      header ( "Pragma: no-cache" );
      header ( "Content-type: application/vnd.ms-excel" );
      header ( "Content-Disposition: attachment; filename=" . $supplier . "_заявка_на_прием_товара_№" . $request['code'] . ".xls" );

      // Throw file to output
      $objWriter = new PHPExcel_Writer_Excel5($xls);
      $objWriter->save('php://output');
      die();
    }
  }

    /**
	 * print_request
	 * @param int $id
	 */
	public function print_request_old($id) {
    $request = ManagerHolder::get($this->entityName)->getById($id, 'e.*, product_parameter_group.*');

    if (empty($request)) {
      show_404();
    }

    $this->load->library('PHPExcelWrapper');
    $sheet = $this->phpexcelwrapper->getSheet();

    $borderStyle = array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_MEDIUM, 'color' => array('rgb' => '000000')));

    $fontStyle = array('name' => 'Times New Roman', 'size' => 11);
    $fontBoldStyle = array_merge($fontStyle, array('bold' => true));

    $sheet->setTitle('Заявка Поставщику');

    $sheet->getColumnDimension("A")->setWidth(53);
    $sheet->getColumnDimension("B")->setWidth(29);
    $sheet->getColumnDimension("C")->setWidth(13);
    $sheet->getColumnDimension("D")->setWidth(5);
    $sheet->getColumnDimension("E")->setWidth(34);
    $sheet->getColumnDimension("F")->setWidth(20);

    $sheet->setCellValue("A1", 'Заявка на відвантаження товара №');
//    $sheet->getStyle('A1')->getFont()->applyFromArray($fontBoldStyle);
//    $sheet->mergeCells('A1:F1');
//    $sheet->getStyle('A1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
    $sheet->setCellValue("B1", trim($request['ttn_code']));
    $sheet->setCellValue("C1", 'Фізособи - ІМ');
    $sheet->setCellValue("D1", 'від');

    $sheet->setCellValue("A2", 'Замовник');
    $sheet->setCellValue("A3", 'Вантажовідправник');
    $sheet->setCellValue("A4", 'Платник');
    $sheet->setCellValue("A5", 'Вантажоодержувач:');
    $sheet->setCellValue("A6", 'Пункт розвантаження:');
    $sheet->setCellValue("A7", 'Контакт');
    $sheet->setCellValue("A8", 'Контактний номер');
    $sheet->setCellValue("A9", 'Перевізник');
    $sheet->setCellValue("A10", 'Account');
    $sheet->setCellValue("A11", 'Cost-Center');
    $sheet->setCellValue("A12", 'Номера Видаткових накладних');
    $sheet->setCellValue("A13", 'Особливі умови поставки');
    $sheet->setCellValue("A14", 'Дата постачання');
    $sheet->setCellValue("B12", trim($request['code']));
    $sheet->mergeCells('A14:A15');

    $sheet->getStyle('A14')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

//    $sheet->setCellValue("B3", 'Получатель:');
//    $sheet->getStyle('B3')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
//    $sheet->getStyle('B3')->getFont()->applyFromArray($fontBoldStyle);
//
//    $sheet->setCellValue("B4", 'ФИО');
//    $sheet->getStyle('B4')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
//    $sheet->setCellValue("C4", 'ТОВ "Заммлер Фуллфілмент", представник');
//    $sheet->getStyle('C4')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
//
//    $sheet->setCellValue("B5", 'Телефон');
//    $sheet->getStyle('B5')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
//    $sheet->setCellValue("C5", '067 4674473');
//    $sheet->getStyle('C5')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
//
//    $sheet->setCellValue("B6", 'Город');
//    $sheet->getStyle('B6')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
//    $sheet->setCellValue("C6", 'с. Красилівка (Броварьский р-н)');
//    $sheet->getStyle('C6')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
//
//    $sheet->setCellValue("B7", 'Адресная доставка');
//    $sheet->getStyle('B7')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
//    $sheet->setCellValue("C7", 'провулок Димерський, 2');
//    $sheet->getStyle('C7')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
//
//    $sheet->setCellValue("B9", 'Оплата доставки:');
//    $sheet->getStyle('B9')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
//    $sheet->getStyle('B9')->getFont()->applyFromArray($fontBoldStyle);
//
//    $sheet->setCellValue("B10", 'Оплата доставки за счет получателя');
//    $sheet->getStyle('B10')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
//
//    $sheet->setCellValue("B11", 'ОБЯЗАТЕЛЬНО указываете форму оплаты за доставку - БЕЗГОТІВКОВА');
//    $sheet->getStyle('B11')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
//
//
//    $sheet->setCellValue("B13", 'Наложенный платеж');
//    $sheet->getStyle('B13')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
//    $sheet->getStyle('B13')->getFont()->applyFromArray($fontBoldStyle);
//
//    $sheet->setCellValue("B14", 'БЕЗ наложенного платежа ');
//    $sheet->getStyle('B14')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
//
//    $sheet->setCellValue("B15", '(мы рассчитываемся с вами за товар по безналичному расчету)');
//    $sheet->getStyle('B15')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $rowNum = 17;

    // Product table header
    $productDataFields = array('name', 'bar_code', 'qty', 'weight', 'store', 'standart');
    for ($i=0; $i<=5; $i++) {
      $sheet->getStyleByColumnAndRow($i, $rowNum)->getBorders()->applyFromArray($this->phpexcelwrapper->borderStyle);
      $sheet->getStyleByColumnAndRow($i, $rowNum)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER)->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
      if (isset($productDataFields[$i])) {
        $sheet->setCellValueByColumnAndRow($i, $rowNum, lang('excel.shipment.product_table.header.' . $productDataFields[$i]));
        $sheet->getStyleByColumnAndRow($i, $rowNum)->getFont()->applyFromArray($fontBoldStyle);
        $sheet->getStyleByColumnAndRow($i, $rowNum)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
      }
    }

    $rowNum++;

    // Product table products
    $productData = array();
    if (!empty($request['product_parameter_group'])) {
      foreach ($request['product_parameter_group'] as $i => $ppg) {
        $productData[] = array(
          'index' => $i+1,
          'bar_code' => !empty($ppg['parameter_group'])&&!empty($ppg['parameter_group']['bar_code'])?$ppg['parameter_group']['bar_code']:$ppg['product']['bar_code'],
          'product_code'  => $ppg['product']['product_code'],
          'name'  => $ppg['product']['name'] . (!empty($ppg['parameter_group'])?' ' . $ppg['parameter_group']['main_parameter_value']['name']:''),
          'store'  => 'склад ТОВ "ЗАММЛЕР ФУЛФІЛМЕНТ"',
          'qty'   => $ppg['qty'],
          'standart' => ''
        );
      }
    }
    if (!empty($productData)) {
      foreach ($productData as $p) {
        foreach ($p as $k => $v) {
          for ($i=0; $i<=5; $i++) {
            $sheet->getStyleByColumnAndRow($i, $rowNum)->getBorders()->applyFromArray($this->phpexcelwrapper->borderStyle);
            $sheet->getStyleByColumnAndRow($i, $rowNum)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
            if ($i == array_search($k, $productDataFields)) {
              $sheet->setCellValueByColumnAndRow($i, $rowNum, trim($v));
            }
          }
        }
        $rowNum++;
      }
    }

    $supplier = str_replace(' ', '_', $request['supplier']);
		$this->phpexcelwrapper->flush($supplier . "_заявка_на_прием_товара_№" . $request['code'] . ".xls");
	}


	/**
	 * Print supplier request NEW
	 */
	public function print_supplier_request($id) {
		$request = ManagerHolder::get($this->entityName)->getById($id, 'e.*, product_parameter_group.*');
		if (empty($request)) {
			show_404();
		}


        $moySklad = ManagerHolder::get('MoySklad');
        $moySklad->createPurchaseOrder($request);


		require_once('./lib/phpExcel/PHPExcel.php');
		require_once('./lib/phpExcel/PHPExcel/IOFactory.php');

		$xls = @PHPExcel_IOFactory::load('./web/supplier_request_template.xlsx');
		foreach ($xls->getWorksheetIterator() as $sheet) {
			$sheet->setCellValue("C1", trim($request['code']));

			$rowNum = 5;

			// Product table header
			$productDataFields = array('index', 'name', 'product_code', 'bar_code', 'qty');
			for ($i=0; $i<5; $i++) {
				$sheet->getStyleByColumnAndRow($i, $rowNum)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT)->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
				if (isset($productDataFields[$i])) {
					$sheet->setCellValueByColumnAndRow($i, $rowNum, lang('excel.shipment.product_table.header.' . $productDataFields[$i]));
				}
			}


			// Product table products
			$productData = array();
			if (!empty($request['product_parameter_group'])) {
				foreach ($request['product_parameter_group'] as $i => $ppg) {
					$productData[] = array(
						'index' => $i+1,
						'bar_code' => !empty($ppg['parameter_group'])&&!empty($ppg['parameter_group']['bar_code'])?$ppg['parameter_group']['bar_code'] . ' ':$ppg['product']['bar_code'] . ' ',
						'product_code'  => $ppg['product']['product_code'],
						'name'  => $ppg['product']['name'] . (!empty($ppg['parameter_group'])?' ' . $ppg['parameter_group']['main_parameter_value']['name']:''),
						'qty'   => $ppg['qty'],
					);
				}
			}
			if (!empty($productData)) {
				foreach ($productData as $p) {
					foreach ($p as $k => $v) {
						for ($i=0; $i<5; $i++) {
							$sheet->getStyleByColumnAndRow($i, $rowNum)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
							if ($i == array_search($k, $productDataFields)) {
								$sheet->setCellValueByColumnAndRow($i, $rowNum, trim($v));
							}
						}
					}
					$rowNum++;
				}
			}
		}

		if (isset($request['store']) && !empty($request['store'])) {
			$supplier = $request['store']['name'];
		} else {
			$supplier = '';
		}
		$supplier = str_replace(' ', '_', $supplier);
		// Send HTTP-headers
		header ( "Expires: Mon, 1 Apr 1974 05:00:00 GMT" );
		header ( "Last-Modified: " . gmdate("D,d M YH:i:s") . " GMT" );
		header ( "Cache-Control: no-cache, must-revalidate" );
		header ( "Pragma: no-cache" );
		header ( "Content-type: application/vnd.ms-excel" );
		header ( "Content-Disposition: attachment; filename=" ." MammyClub_НА_СКЛАД_№" . $request['code'] . "_" . $supplier . ".xls" );

		// Throw file to output
		$objWriter = new PHPExcel_Writer_Excel5($xls);
		$objWriter->save('php://output');
		die();
	}


  /**
   * Print supplier request
   */
  public function print_supplier_request_old($id) {
    $request = ManagerHolder::get($this->entityName)->getById($id, 'e.*, product_parameter_group.*');
    if (empty($request)) {
      show_404();
    }

    $this->load->library('PHPExcelWrapper');
    $sheet = $this->phpexcelwrapper->getSheet();

    $borderStyle = array('allborders' => array('style' => PHPExcel_Style_Border::BORDER_MEDIUM,
      'color' => array('rgb' => '000000')));

    $fontStyle = array('name' => 'Times New Roman', 'size' => 11);
    $fontBoldStyle = array_merge($fontStyle, array('bold' => true));

    $sheet->setTitle('Заявка Поставщику');

    $sheet->getColumnDimension("B")->setWidth(20);
    $sheet->getColumnDimension("D")->setWidth(30);
    $sheet->getColumnDimension("E")->setWidth(13);

    $sheet->setCellValue("A1", 'Заказ от MammyClub НА СКЛАД');
    $sheet->getStyle('A1')->getFont()->applyFromArray($fontBoldStyle);
    $sheet->mergeCells('A1:F1');
    $sheet->getStyle('A1')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

    $sheet->setCellValue("B3", 'Получатель:');
    $sheet->getStyle('B3')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
    $sheet->getStyle('B3')->getFont()->applyFromArray($fontBoldStyle);

    $sheet->setCellValue("B4", 'ФИО');
    $sheet->getStyle('B4')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
    $sheet->setCellValue("C4", 'ТОВ "Заммлер Фуллфілмент", представник');
    $sheet->getStyle('C4')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->setCellValue("B5", 'Телефон');
    $sheet->getStyle('B5')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
    $sheet->setCellValue("C5", '067 4674473');
    $sheet->getStyle('C5')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->setCellValue("B6", 'Город');
    $sheet->getStyle('B6')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
    $sheet->setCellValue("C6", 'с. Красилівка (Броварьский р-н)');
    $sheet->getStyle('C6')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->setCellValue("B7", 'Адресная доставка');
    $sheet->getStyle('B7')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
    $sheet->setCellValue("C7", 'провулок Димерський, 2');
    $sheet->getStyle('C7')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->setCellValue("B9", 'Оплата доставки:');
    $sheet->getStyle('B9')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
    $sheet->getStyle('B9')->getFont()->applyFromArray($fontBoldStyle);

    $sheet->setCellValue("B10", 'Оплата доставки за счет получателя');
    $sheet->getStyle('B10')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->setCellValue("B11", 'ОБЯЗАТЕЛЬНО указываете форму оплаты за доставку - БЕЗГОТІВКОВА');
    $sheet->getStyle('B11')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);


    $sheet->setCellValue("B13", 'Наложенный платеж');
    $sheet->getStyle('B13')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);
    $sheet->getStyle('B13')->getFont()->applyFromArray($fontBoldStyle);

    $sheet->setCellValue("B14", 'БЕЗ наложенного платежа ');
    $sheet->getStyle('B14')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $sheet->setCellValue("B15", '(мы рассчитываемся с вами за товар по безналичному расчету)');
    $sheet->getStyle('B15')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_LEFT);

    $rowNum = 17;

    // Product table header
    $productDataFields = array('index', 'bar_code', 'product_code', 'name', 'qty');
    for ($i=0; $i<5; $i++) {
      $sheet->getStyleByColumnAndRow($i, $rowNum)->getBorders()->applyFromArray($this->phpexcelwrapper->borderStyle);
      $sheet->getStyleByColumnAndRow($i, $rowNum)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER)->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
      if (isset($productDataFields[$i])) {
        $sheet->setCellValueByColumnAndRow($i, $rowNum, lang('excel.shipment.product_table.header.' . $productDataFields[$i]));
      }
    }

    $rowNum++;

    // Product table products
    $productData = array();
    if (!empty($request['product_parameter_group'])) {
      foreach ($request['product_parameter_group'] as $i => $ppg) {
        $productData[] = array(
          'index' => $i+1,
          'bar_code' => !empty($ppg['parameter_group'])&&!empty($ppg['parameter_group']['bar_code'])?$ppg['parameter_group']['bar_code'] . ' ':$ppg['product']['bar_code'] . ' ',
          'product_code'  => $ppg['product']['product_code'],
          'name'  => $ppg['product']['name'] . (!empty($ppg['parameter_group'])?' ' . $ppg['parameter_group']['main_parameter_value']['name']:''),
          'qty'   => $ppg['qty'],
        );
      }
    }
    if (!empty($productData)) {
      foreach ($productData as $p) {
        foreach ($p as $k => $v) {
          for ($i=0; $i<5; $i++) {
            $sheet->getStyleByColumnAndRow($i, $rowNum)->getBorders()->applyFromArray($this->phpexcelwrapper->borderStyle);
            $sheet->getStyleByColumnAndRow($i, $rowNum)->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
            if ($i == array_search($k, $productDataFields)) {
              $sheet->setCellValueByColumnAndRow($i, $rowNum, trim($v));
            }
          }
        }
        $rowNum++;
      }
    }

    $supplier = str_replace(' ', '_', $request['supplier']);
    $this->phpexcelwrapper->flush("MammyClub_НА_СКЛАД_№" . $request['code'] . "_" . $supplier . ".xls");
  }

	/**
	 * ajax_get_product_select_values
	 * @param int $brandId
	 */
	public function ajax_get_product_select_values($brandId = null) {
		if (!empty($brandId)) {
			$result = ManagerHolder::get('Product')->getAllWhere(array('brand_id' => $brandId), 'id, name');
			die(json_encode($result));
		}
		die(null);
	}

	/**
	 * ajax_get_param_groups_select_values
	 * @param int $brandId
	 */
	public function ajax_get_param_groups_select_values($productId = null) {
		if (!empty($productId)) {
			$result = ManagerHolder::get('ParameterGroup')->getAllWhere(array('product_id' => $productId), 'id, main_parameter_value.*');
			if (!empty($result)) {
				die(json_encode($result));
			}
		}
		die(null);
	}

  /**
   * Change status
   */
	public function change_status() {
    if (!isset($_GET['vl']) || !isset($_GET['supplierRequestId'])) {
      die('ERROR1');
    }
    $supplierRequestId = $_GET['supplierRequestId'];
    $status = ManagerHolder::get('SupplierRequestStatus')->getById($_GET['vl'], 'e.*');
    if (empty($status)) {
      die('ERROR2');
    }

    $supplierRequest = ManagerHolder::get('SupplierRequest')->getById($supplierRequestId, 'e.*, supplier_request_status.*');
    if (empty($supplierRequest)) {
      die('ERROR2');
    }

    if ($supplierRequest['supplier_request_status']['k'] == 'delivered_to_zammler') {
      die('ERROR2');
    }

    if ($supplierRequest['supplier_request_status']['k'] != $status['k']) {
      ManagerHolder::get('SupplierRequest')->updateById($supplierRequestId, 'supplier_request_status_id', $status['id']);
    }

//    $this->processStatusChange($supplierRequest['id']);

    die('DONE');
  }

  /**
   * Change ttn
   */
	public function change_ttn() {
    if (!isset($_GET['vl']) || !isset($_GET['supplierRequestId'])) {
      die('ERROR1');
    }
    $supplierRequestId = $_GET['supplierRequestId'];
    $ttn = trim($_GET['vl']);

    $supplierRequest = ManagerHolder::get('SupplierRequest')->getById($supplierRequestId, 'e.*');
    if (empty($supplierRequest)) {
      die('ERROR2');
    }

    if ($supplierRequest['ttn_code'] != $ttn) {
      ManagerHolder::get('SupplierRequest')->updateById($supplierRequestId, 'ttn_code', $ttn);
    }

    die('DONE');
  }

  /**
   * Process status change
   * @param $supplierRequestId
   */
  protected function processStatusChange($supplierRequestId) {
    $supplierRequest = ManagerHolder::get('SupplierRequest')->getById($supplierRequestId, 'e.status, product_parameter_group.*, supplier_request_status.*');
    if ($supplierRequest['supplier_request_status']['k'] == 'delivered_to_zammler') {
      if (!empty($supplierRequest['product_parameter_group'])) {
        foreach ($supplierRequest['product_parameter_group'] as $item) {
          if (!empty($item['siteorder_item_id'])) {
            $info = ManagerHolder::get('StoreReserve')->getReserveInfoBySiteOrderItemId($item['siteorder_item_id']);

            $needReserve = $info['siteorder_qty'] - $info['current']['qty'];
            if ($needReserve > 0 && isset($info['inventories'][ZAMMLER_STORE_ID]['free_qty']) && $info['inventories'][ZAMMLER_STORE_ID]['free_qty'] > 0) {
              if ($needReserve > $info['inventories'][ZAMMLER_STORE_ID]['free_qty']) {
                $needReserve = $info['inventories'][ZAMMLER_STORE_ID]['free_qty'];
              }

              $reserve = array();
              $reserve['store_id'] = ZAMMLER_STORE_ID;
              $reserve['siteorder_item_id'] = $item['siteorder_item_id'];

              $exists = ManagerHolder::get('StoreReserve')->existsWhere($reserve);
              if (!$exists) {
                $reserve['product_id'] = $item['product_id'];
                $reserve['product_group_id'] = $item['parameter_group_id'];
                $reserve['qty'] = $info['current']['qty'] + $needReserve;
                ManagerHolder::get('StoreReserve')->insert($reserve);
              } else {
                ManagerHolder::get('StoreReserve')->updateWhere($reserve, 'qty', $info['current']['qty'] + $needReserve);
              }
            }
          }
        }
      }
      ManagerHolder::get('StoreInventory')->updateProductStatuses();
    }
  }

  /**
   * SetAddEditDataAndShowView.
   * Set all needed view data and show add_edit form.
   * @param object $entity
   */
  protected function setAddEditDataAndShowView($entity) {
    $this->fields['file'] = array('type'=> 'file');

    parent::setAddEditDataAndShowView($entity);
  }


	/**
	 * CreateEntityPOST.
	 * Prepares POST.
	 * Creates Entity From Post.
	 * Validates Entity.
	 * @return Object
	 */
	protected function createEntityPOST() {
		$this->savedProductParameterGroupPost = isset($_POST['product_parameter_group'])?$_POST['product_parameter_group']:null;

    if(isset($_FILES['file']) && !empty($_FILES['file']) && !empty($_FILES['file']['tmp_name'])) {
      require_once('./lib/phpExcel/PHPExcel.php');
      require_once('./lib/phpExcel/PHPExcel/IOFactory.php');

      $xls = @PHPExcel_IOFactory::load($_FILES['file']['tmp_name']);

      $barCodeColumn = NULL;
      $qtyColumn = NULL;
      $products = array();

      foreach ($xls->getWorksheetIterator() as $worksheet) {
        foreach ($worksheet->getRowIterator() as $row) {
          $cellIterator = $row->getCellIterator();
          $cellIterator->setIterateOnlyExistingCells(TRUE); // Loop all cells, even if it is not set

          $product = array();
          foreach ($cellIterator as $cell) {
            if (!is_null($cell)) {
              $column = $cell->getColumn();
              $value = $cell->getValue();

              if ($barCodeColumn === NULL || $qtyColumn === NULL) {
                if ($value == 'Внешний ID') {
                  $barCodeColumn = $column;
                }
                if ($value == 'Количество') {
                  $qtyColumn = $column;
                }
              } else {
                if ($column == $barCodeColumn) {
                  $product['bar_code'] = $value;
                }
                if ($column == $qtyColumn) {
                  $product['qty'] = $value;
                }
              }
            }
          }

          if ($barCodeColumn === NULL || $qtyColumn === NULL) {
            set_flash_error('В файле отсутсвует обязательная колонока (Внешний ID, Количество)');
            redirect_to_referral();
          }
          if (!empty($product)) {
            $products[] = $product;
          }
        }
      }

      foreach ($products as $row) {
        if (empty($row['bar_code'])) {
          continue;
        }

        $group = ManagerHolder::get('ParameterGroup')->getOneWhere(array('bar_code' => $row['bar_code']), 'e.*');
        $data = array();
        if (!empty($group)) {
          $data = array('parameter_group' => $group['id'], 'product' => $group['product_id'], 'qty' => $row['qty']);
        } else {
          $product = ManagerHolder::get('Product')->getOneWhere(array('bar_code' => $row['bar_code']), 'e.*');
          if (!empty($product)) {
            $data = array('product' => $product['id'], 'qty' => $row['qty']);
          }
        }

        if (empty($data)) {
          continue;
        }

        $isNew = TRUE;

        foreach ($this->savedProductParameterGroupPost as $k => $sp) {
          if (!empty($sp['siteorder_item_id'])) {
            continue;
          }

          if (isset($data['parameter_group']) && isset($sp['parameter_group']) && $sp['parameter_group'] == $data['parameter_group'] && $sp['product'] == $data['product']) {
            $this->savedProductParameterGroupPost[$k]['qty'] += $data['qty'];
            $isNew = FALSE;
          } elseif (!isset($data['parameter_group']) && $sp['product'] == $data['product']) {
            $this->savedProductParameterGroupPost[$k]['qty'] += $data['qty'];
            $isNew = FALSE;
          }
          if (!$isNew) {
            break;
          }
        }
        $data['siteorder_code'] = NULL;
        if ($isNew) {
          $this->savedProductParameterGroupPost[] = $data;
        }
      }
    }

		unset($_POST['product_parameter_group']);
		return parent::createEntityPOST();
	}

	/**
	 * Implementation of POST_SAVE event callback
	 * @param Object $entity reference
	 * @return Object
	 */
	protected function postSave(&$entity) {
		ManagerHolder::get('SupplierRequestProductParameterGroup')->deleteAllWhere(array('supplier_request_id' => $entity['id']));
	  if (!empty($this->savedProductParameterGroupPost)) {
	  	foreach ($this->savedProductParameterGroupPost as $ppg) {
	  		if (isset($ppg['product']) && !empty($ppg['product'])) {
	  			$data = array('supplier_request_id' => $entity['id'],
	  				          	'product_id' =>$ppg ['product'],
	  					          'qty' => $ppg['qty'],
                        'siteorder_code' => $ppg['siteorder_code'],
                        'siteorder_item_id' => !empty($ppg['siteorder_item_id']) ? $ppg['siteorder_item_id'] : NULL
          );
	  			if (isset($ppg['parameter_group']) && !empty($ppg['parameter_group'])) {
	  				$data['parameter_group_id'] = $ppg['parameter_group'];
	  			}
	  			ManagerHolder::get('SupplierRequestProductParameterGroup')->insert($data);
	  		}
	  	}
	  }

    $this->processStatusChange($entity['id']);
	}

  /**
   * preProcessFields
   * the method is called before passing
   * fields to the layout
   */
  protected function preProcessFields(&$entity) {
    parent::preProcessFields($entity);
    $this->fields['product_parameter_group']['brand_options'] = ManagerHolder::get('ProductBrand')->getAsViewArray();
  }

  /**
   * CreateEntityId.
   * Creates Entity By Id;
   * @param integer $entityId
   * @return Object
   */
  protected function createEntityId($entityId = null) {
  	$entity = parent::createEntityId($entityId);
  	if (!empty($entity) && !empty($entity['product_parameter_group'])) {
  		$ids = get_array_vals_by_second_key($entity['product_parameter_group'], 'product_id');
  		$productIdsBrandIds = ManagerHolder::get('Product')->getAsViewArray(array(), 'brand_id', null, array('id' => $ids));
  		foreach ($entity['product_parameter_group'] as $k => $v) {
  			$entity['product_parameter_group'][$k]['brand_id'] = $productIdsBrandIds[$v['product_id']];
  			$entity['product_parameter_group'][$k]['product_options'] = ManagerHolder::get('Product')->getAsViewArray(array(), 'name', null, array('brand_id' => $productIdsBrandIds[$v['product_id']]));
  			$paramGroups = ManagerHolder::get('ParameterGroup')->getAllWhere(array('product_id' => $v['product_id']), 'id, main_parameter_value.*');
  		  if (!empty($paramGroups)) {
  		  	$options = array();
  		  	foreach ($paramGroups as $g) {
  		  		$options[$g['id']] = $g['main_parameter_value']['name'];
  		  	}
  		  	$entity['product_parameter_group'][$k]['param_group_options'] = $options;
  		  }
  		}
  	}
  	if (empty($entityId)) {
  	  unset($this->fields['code']);
  	}
  	return $entity;
  }


}