<?php if (!defined("BASEPATH")) exit("No direct script access allowed");
/**
 * xAdmin_User
 * This class has been auto-generated by Itirra
 */
require_once APPPATH . 'controllers/admin/base/base_admin_controller.php';
class xAdmin_User extends Base_Admin_Controller {

	/** List view file. */
	protected $listView = 'user/entity_list';

  /** Export */
  protected $export = TRUE;

  /** Filters. */
  protected $filters = array("newsletter" => "",
													  "auth_info.email_confirmed" => "");

  protected $fromToFilters = array('age_of_child' => "",
	                                 'pregnancyweek_current.number' => "");

  /** Date Filters. Row example: array("created_at"). */
  protected $dateFilters = array("auth_info.created_at");

  /** SearchParams. */
  protected $searchParams = array("name", "auth_info.email");

  /** Additional Actions. Simple Array. Ex. array('view', 'print')*/
  protected $additionalItemActions = array('statistics');

  /**
   * setViewParamsIndex
   * @param  $entities
   * @param  $pager
   * @param  $hasSidebar
   */
  protected function setViewParamsIndex(&$entities, &$pager, $hasSidebar) {
    unset($this->actions['add']);
    parent::setViewParamsIndex($entities, $pager, $hasSidebar);
  }

	/**
	 * Set filter.
	 * Uses GET parameters.
	 */
	 public function setFilter() {
		if(!empty($this->fromToFilters)) {
		 // Default values
		 $fromToDefaultFilters = array();
		 foreach ($this->fromToFilters as $key => $value) {
			 $fromToDefaultFilters[$key] = $value;
		 }
	 }

	 // Get from GET array
	 if (!empty($_GET)) {
		 foreach ($this->fromToFilters as $key => $value) {
			 if (!isset($_GET[$key])) continue;
			 $this->fromToFilters[$key] = $_GET[$key];
		 }
	 }

	 // Filter values
	 $fromToFilterValues = array();
	 foreach ($this->fromToFilters as $key => $value) {
		 $fromToFilterValues[$key] = ManagerHolder::get($this->entityName)->getFilterValues($key);
	 }

	 if (!empty($_GET)) {
		 foreach ($this->fromToFilters as $key => $val) {
			 if (isset($_GET[$key . '_from']) && isset($_GET[$key . '_to'])) {
				 $this->extraWhere[$key . 'BETWEEN'] = $_GET[$key . '_from'] . ' AND ' . $_GET[$key . '_to'];
			 } else {
				 if (isset($_GET[$key . '_from'])) {
					 $this->extraWhere[$key . '>='] = $_GET[$key . '_from'];

				 }
				 if (isset($_GET[$key . '_to'])) {
					 $this->extraWhere[$key . '<='] = $_GET[$key . '_to'];
				 }
			 }
		 }
	 }

	 $this->layout->set("fromToFilters", $fromToDefaultFilters);
	 $this->layout->set("fromToFilterValues", $fromToFilterValues);
	 parent::setFilter();
	}

	/**
	 * Export.
	 */
	public function export() {
		// Export Filters
		foreach ($this->fromToFilters as $filterName => $val) {
			$exportFilter = array();
			if (isset($_GET[$filterName . '_from']) && isset($_GET[$filterName . '_to'])) {
				$exportFilter['val'] = 'BETWEEN ' . $_GET[$filterName . '_from'] . ' AND ' . $_GET[$filterName . '_to'];
				$exportFilter['str'] = lang('admin.filter.from') . ' ' . $_GET[$filterName . '_from'] . ' ' . lang('admin.filter.to') . ' ' . $_GET[$filterName . '_to'];
			} else {
				if (isset($_GET[$filterName . '_from'])) {
					$exportFilter['val'] = '> ' . $_GET[$filterName . '_from'];
					$exportFilter['str'] = lang('admin.filter.from') . ' ' . $_GET[$filterName . '_from'];
				}
				if (isset($_GET[$filterName . '_to'])) {
					$exportFilter['val'] = '< ' . $_GET[$filterName . '_to'];
					$exportFilter['str'] = lang('admin.filter.to') . ' ' . $_GET[$filterName . '_to'];
				}
			}
			if (!empty($exportFilter)) {
				$this->additionalExportFilters[$filterName] = $exportFilter;
			}
		}
		parent::export(); // TODO: Change the autogenerated stub
	}

	/**
	 * Export process.
	 */
	public function export_process() {
		$fields = array();
		if (!isset($this->fields['id'])) {
			$fields = array('id');
		}

		foreach ($this->fields as $k => $v) {
			if (!isset($_POST[$k]) || $_POST[$k] == 0) continue;
			$fields[] = $k;
		}

		// Export filters
		$exportFilters = array();
		if (isset($_POST['exportfilter_batch_export_ids'])) {
			$exportFilters['id'] = explode(',', $_POST['exportfilter_batch_export_ids']);
		} else {
			// foreignKeys
			$foreignKeys = ManagerHolder::get($this->managerName)->getForeignKeys();
			$foreignKeysAliases = array();
			foreach ($foreignKeys as $alias => $fk) {
				$foreignKeysAliases[$fk['local']] = $alias;
			}

			foreach ($this->fromToFilters as $k => $v) {
				$key = 'exportfilter_' . str_replace('.', '_', $k);
				if (isset($_POST[$key])) {
					$exportFilters[$k] = $_POST[$key];
					// company_id => company
					if ($foreignKeysAliases && isset($foreignKeysAliases[$k])) {
						$k = $foreignKeysAliases[$k];
					}
					if (!in_array($k, $fields)) {
						$fields[] = $k;
					}
					if (isset($_POST[$key])) {
						if (strpos($_POST[$key], 'BETWEEN') !== FALSE) {
							$exportFilters[$k . 'BETWEEN'] = trim(str_replace('BETWEEN', '', $_POST[$key]));
						}
						if (strpos($_POST[$key], '>') !== FALSE) {
							$exportFilters[$k . '>='] = trim(str_replace('>', '', $_POST[$key]));
						}
						if (strpos($_POST[$key], '<') !== FALSE) {
							$exportFilters[$k . '<='] = trim(str_replace('<', '', $_POST[$key]));
						}
						// company_id => company
						if ($foreignKeysAliases && isset($foreignKeysAliases[$k])) {
							$k = $foreignKeysAliases[$k];
						}
						if (!in_array($k, $fields)) {
							$fields[] = $k;
						}
					}
				}
				if (isset($_POST[$key])){
					unset($exportFilters[$k]);
				}
			}
		}
		$this->extraWhere = $exportFilters;
		parent::export_process(); // TODO: Change the autogenerated stub
	}


	/**
   * DeleteFromDb.
   * Deletes entity from DB and its images.
   * @param integer $entityId
   * @return Object (the deleted entity)
   */
  protected function deleteFromDb($entityId) {
    $entity = ManagerHolder::get($this->managerName)->getById($entityId, 'e.*, image.*');
    $this->preDelete($entityId);
    $this->addAdminLogRecord($entity, 'delete');
    ManagerHolder::get($this->managerName)->deleteById($entityId);
    $this->postDelete($entityId);
    return $entity;
  }

  /**
   * Implementation of PRE_DELETE event callback
   * @param int $entityId id
   * @return Object
   */
  protected function preDelete($entityId) {
    $recipients = ManagerHolder::get('MandrillBroadcastRecipient')->getAllWhere(array('user_id' => $entityId), 'e.*, broadcast.*');
    foreach ($recipients as $recipient) {
      $openExists = ManagerHolder::get('MandrillBroadcastOpen')->existsWhere(array('recipient_id' => $recipient['id'],
                                                                                   'broadcast_id' => $recipient['broadcast']['id']));
      if ($openExists) {
        ManagerHolder::get('MandrillBroadcast')->decrement($recipient['broadcast']['id'], 'read_count', 1);
      }
      $visitedLinksExists = ManagerHolder::get('MandrillBroadcastVisitedLink')->existsWhere(array('recipient_id' => $recipient['id'],
                                                                                                  'broadcast_id' => $recipient['broadcast']['id']));
      if ($visitedLinksExists) {
        ManagerHolder::get('MandrillBroadcast')->decrement($recipient['broadcast']['id'], 'link_visited_count', 1);
        ManagerHolder::get('MandrillBroadcast')->decrement($recipient['broadcast']['id'], 'recipients_count', 1);
      }
      $broadcast = ManagerHolder::get('MandrillBroadcast')->getById($recipient['broadcast_id'], 'recipients_count');
      if ($broadcast['recipients_count'] == 0) {
        ManagerHolder::get('MandrillBroadcast')->deleteById($recipient['broadcast_id']);
      }
    }
  }


  /**
   * statistics
   * @param int $id
   */
  public function statistics($id) {

    $user = ManagerHolder::get('User')->getById($id, 'e.*, orders.*');
    if(empty($user)) {
      show_404();
    }

    if(empty($_GET['stats_type'])) {
      // 1) Orders
      $this->order_stats($user);
    } elseif($_GET['stats_type'] == 'broadcast') {
      // 2) Broadcasts
      $this->broadcast_stats($user);
    } elseif($_GET['stats_type'] == 'shop_pages') {
      // 3) Visited shop pages
      $this->shop_pages_stats($user);
    } else {
      show_404();
    }

  }

  /**
   * order_stats
   * @param array $user
   */
  private function order_stats($user) {

    if(!empty($user['orders'])) {
//      $cities = ManagerHolder::get('City')->getAsViewArray();
      $allProducts = ManagerHolder::get('Product')->getAll('id, name, page_url');
      $allProductIds = get_array_vals_by_second_key($allProducts, 'id');
      $allParamValues = ManagerHolder::get('ParameterValue')->getAsViewArray();

      $oIds = get_array_vals_by_second_key($user['orders'], 'id');
      $carts = ManagerHolder::get('Cart')->getAllWhere(array('siteorder_id' => $oIds), 'e.*, items.*');
      if(!empty($carts)) {
        foreach ($user['orders'] as $k => $o) {
          $user['orders'][$k]['cart'] = array();
          foreach ($carts as $c) {
            if($o['id'] == $c['siteorder_id']) {
              if(!empty($c['items'])) {
                foreach ($c['items'] as $kk => $item) {
                  $productKey = array_search($item['product_id'], $allProductIds);
                  $c['items'][$kk]['product'] = $allProducts[$productKey];
                  if(!empty($item['additional_product_params'])) {
                    $c['items'][$kk]['additional_product_params'] = unserialize($item['additional_product_params']);
                    foreach ($c['items'][$kk]['additional_product_params'] as $kkk => $app) {
                      if(isset($allParamValues[$app])) {
                        $c['items'][$kk]['additional_product_params'][$kkk] = $allParamValues[$app];
                      }
                    }
                  }
                }
              }
              $user['orders'][$k]['cart'] = $c;
              break;
            }
          }
        }
      }
    }

    $this->layout->set('user', $user);
//    $this->layout->set('cities', $cities);
    $this->layout->view('user/order_stats');
  }

  /**
   * broadcast_stats
   * @param array $user
   */
  private function broadcast_stats($user) {

    set_time_limit(0);

    $where = array('user_id' => $user['id']);
    if(!empty($_GET['date_from']) && !empty($_GET['date_to'])) {
      $dateFrom = $_GET['date_from'] . ' 00:00:01';
      $dateTo = $_GET['date_to'] . ' 23:59:59';
      $where['updated_at BETWEEN'] = $dateFrom . ' AND ' . $dateTo;
    }
    if(!empty($_GET['subject'])) {
      ManagerHolder::get('MandrillBroadcastRecipient')->setSearch($_GET['subject'], 'broadcast.subject', 'contains');
    }

    $map = [
      'MandrillBroadcastRecipient' => 'e.*, broadcast.*, MandrillBroadcastVisitedLink.*, MandrillBroadcastOpen.*, broadcast_links.*, email_html.*',
      'XBroadcastRecipient' => 'e.*, broadcast.*, XBroadcastOpen.*, XBroadcastVisitedLink.*'
    ];

    $result = [];
    foreach ($map as $className => $what) {
      $rawRes = ManagerHolder::get($className)->getAllWhere($where, $what);
      $result = array_merge($result, ManagerHolder::get($className)->createUserStatsFromArray($rawRes));
    }

    $this->layout->set('user', $user);
    $this->layout->set('result', array_sort($result, 'created_at', SORT_DESC));
    $this->layout->view('user/broadcast_stats');
  }

  /**
   * Shop pages stats
   * @param array $user
   */
  private function shop_pages_stats($user) {

    $this->load->helper('project');

    $where = array('user_id'   => $user['id'],
                   'subdomain' => 'shop');
    $dateFrom = '2012-01-01 00:00:01';
    $dateTo = '2512-01-01 00:00:01';
    if(!empty($_GET['date_from'])) {
      $dateFrom = $_GET['date_from'] . ' 00:00:01';
    }
    if(!empty($_GET['date_to'])) {
      $dateTo = $_GET['date_to'] . ' 23:59:59';
    }
    $where['created_at BETWEEN'] = $dateFrom . ' AND ' . $dateTo;

    if(!empty($_GET['url'])) {
      $where['url'] = $_GET['url'];
    }
    $viewedShopPages = ManagerHolder::get('PageVisit')->getAllWhere($where, 'e.*, page_item_clicks.*');
    $this->processEvents($viewedShopPages);

    $this->layout->set('user', $user);
    $this->layout->set('viewedShopPages', $viewedShopPages);
    $this->layout->view('user/shop_pages_stats');
  }

  /**
   * processEvents
   * @param array $viewedShopPages
   */
  private function processEvents(&$viewedShopPages) {

    $events = array('gallery', 'filters', 'tab', 'link');

    if(!empty($viewedShopPages)) {

      foreach ($viewedShopPages as $k => $v) {
        foreach ($events as $event) {
          $viewedShopPages[$k][$event . '_item_click'] = FALSE;
          if($event == 'tab' || $event == 'link' ) {
            $viewedShopPages[$k][$event . '_item_click'] = array();
          }
          if(!empty($viewedShopPages[$k]['page_item_clicks'])) {
            foreach ($viewedShopPages[$k]['page_item_clicks'] as $pic) {
              if($event == 'tab') {
                if(strpos($pic['name'], 'tab-') !== FALSE) {
                  $viewedShopPages[$k][$event . '_item_click'][$pic['name']] = $pic['name'];
                }
              } else if($event == 'link') {
                if(strpos($pic['name'], 'http://') !== FALSE && $pic['tag_name'] == 'a') {
                  $viewedShopPages[$k][$event . '_item_click'][] = $pic['name'];
                }
              } else {
                if($pic['name'] == $event) {
                  $viewedShopPages[$k][$event . '_item_click'] = TRUE;
                }
              }

            }
          }
        }

      }

    }
  }


  /**
   * User shop page stats search autocomplete
   */
  public function shop_pages_stats_search_autocomplete() {

    if(empty($_GET['user_id']) || empty($_GET['query'])) {
      die();
    }

    $searchParam = 'url';
    $manager = ManagerHolder::get('PageVisit');

    $result = '{"query":"%s","suggestions":[%s],"data":[%s]}';
    $suggestions = array();
    $suggestionsData = array();

    $entities = $manager->getAllWhere(array('user_id' => $_GET['user_id']), $searchParam, null, array(), null, $searchParam);
    if(!empty($entities)) {
      $count = 0;
      foreach ($entities as $e) {
        if($count == 5) {
          break;
        }
        if(strpos($e[$searchParam], $_GET['query']) === FALSE || strpos($e[$searchParam], '/магазин') === FALSE) {
          continue;
        }
        $e = array_make_plain_with_dots($e);
        $suggestion = htmlspecialchars($e[$searchParam]);
        $suggestionData = '';
        $suggestions[] = json_encode($suggestion);
        $suggestionsData[] = json_encode($suggestionData);
        $count++;
      }
    }

    $result = sprintf($result, $_GET["query"], implode(',', $suggestions), implode(',', $suggestionsData));
    die($result);
  }

}