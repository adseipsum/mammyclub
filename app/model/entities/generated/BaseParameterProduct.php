<?php

/**
 * BaseParameterProduct
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $parameter_main_id
 * @property integer $parameter_secondary_id
 * @property Parameter $parameter_main
 * @property Parameter $parameter_secondary
 * @property Doctrine_Collection $possible_parameter_values
 * @property Doctrine_Collection $ParameterProductParameterValue
 * @property Doctrine_Collection $Product
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseParameterProduct extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('parameter_product');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('parameter_main_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('parameter_secondary_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Parameter as parameter_main', array(
             'local' => 'parameter_main_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Parameter as parameter_secondary', array(
             'local' => 'parameter_secondary_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasMany('ParameterValue as possible_parameter_values', array(
             'refClass' => 'ParameterProductParameterValue',
             'local' => 'parameter_product_id',
             'foreign' => 'parameter_value_id',
             'onDelete' => 'SET NULL'));

        $this->hasMany('ParameterProductParameterValue', array(
             'local' => 'id',
             'foreign' => 'parameter_product_id'));

        $this->hasMany('Product', array(
             'local' => 'id',
             'foreign' => 'possible_parameters_id'));
    }
}