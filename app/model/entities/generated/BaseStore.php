<?php

/**
 * BaseStore
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property integer $priority
 * @property string $code
 * @property integer $counterparty_id
 * @property enum $sender_service_type
 * @property integer $sender_counterpartyaddress_id
 * @property integer $sender_city_id
 * @property integer $sender_warehouse_id
 * @property integer $counterpartycontactperson_id
 * @property integer $receiver_counterparty_id
 * @property enum $receiver_service_type
 * @property integer $receiver_counterpartyaddress_id
 * @property integer $receiver_city_id
 * @property integer $receiver_warehouse_id
 * @property integer $receiver_counterpartycontactperson_id
 * @property integer $alert_after_hour
 * @property string $alert_str_time
 * @property integer $admin_notification_template_id
 * @property boolean $published
 * @property AdminNotificationTemplate $admin_notification_template
 * @property Doctrine_Collection $product_brands
 * @property CounterpartyAddress $sender_counterpartyaddress
 * @property Warehouse $sender_warehouse
 * @property City $sender_city
 * @property CounterpartyContactPerson $counterpartycontactperson
 * @property CounterpartyAddress $receiver_counterpartyaddress
 * @property Warehouse $receiver_warehouse
 * @property City $receiver_city
 * @property CounterpartyContactPerson $receiver_counterpartycontactperson
 * @property Counterparty $receiver_counterparty
 * @property Counterparty $counterparty
 * @property Doctrine_Collection $SiteOrder
 * @property Doctrine_Collection $StoreInventory
 * @property Doctrine_Collection $StoreInventoryParserSetting
 * @property Doctrine_Collection $store_product_brand_rels
 * @property Doctrine_Collection $StoreReserve
 * @property Doctrine_Collection $SupplierRequest
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseStore extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('store');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'msgprop' => 'Название',
             'length' => '255',
             ));
        $this->hasColumn('priority', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'msgprop' => 'Приоритет',
             'length' => '4',
             ));
        $this->hasColumn('code', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'msgprop' => 'Внешний код',
             'length' => '255',
             ));
        $this->hasColumn('counterparty_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('sender_service_type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'doors',
              1 => 'warehouse',
             ),
             ));
        $this->hasColumn('sender_counterpartyaddress_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('sender_city_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('sender_warehouse_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('counterpartycontactperson_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('receiver_counterparty_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('receiver_service_type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'doors',
              1 => 'warehouse',
             ),
             ));
        $this->hasColumn('receiver_counterpartyaddress_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('receiver_city_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('receiver_warehouse_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('receiver_counterpartycontactperson_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('alert_after_hour', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('alert_str_time', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('admin_notification_template_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('published', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 1,
             'notnull' => true,
             'msgprop' => 'Опубликовано',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('AdminNotificationTemplate as admin_notification_template', array(
             'local' => 'admin_notification_template_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasMany('ProductBrand as product_brands', array(
             'refClass' => 'StoreProductBrand',
             'local' => 'store_id',
             'foreign' => 'product_brand_id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('CounterpartyAddress as sender_counterpartyaddress', array(
             'local' => 'sender_counterpartyaddress_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('Warehouse as sender_warehouse', array(
             'local' => 'sender_warehouse_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('City as sender_city', array(
             'local' => 'sender_city_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('CounterpartyContactPerson as counterpartycontactperson', array(
             'local' => 'counterpartycontactperson_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('CounterpartyAddress as receiver_counterpartyaddress', array(
             'local' => 'receiver_counterpartyaddress_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('Warehouse as receiver_warehouse', array(
             'local' => 'receiver_warehouse_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('City as receiver_city', array(
             'local' => 'receiver_city_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('CounterpartyContactPerson as receiver_counterpartycontactperson', array(
             'local' => 'receiver_counterpartycontactperson_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('Counterparty as receiver_counterparty', array(
             'local' => 'receiver_counterparty_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('Counterparty as counterparty', array(
             'local' => 'counterparty_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasMany('SiteOrder', array(
             'local' => 'id',
             'foreign' => 'shipment_store_id'));

        $this->hasMany('StoreInventory', array(
             'local' => 'id',
             'foreign' => 'store_id'));

        $this->hasMany('StoreInventoryParserSetting', array(
             'local' => 'id',
             'foreign' => 'store_id'));

        $this->hasMany('StoreProductBrand as store_product_brand_rels', array(
             'local' => 'id',
             'foreign' => 'store_id'));

        $this->hasMany('StoreReserve', array(
             'local' => 'id',
             'foreign' => 'store_id'));

        $this->hasMany('SupplierRequest', array(
             'local' => 'id',
             'foreign' => 'store_id'));
    }
}