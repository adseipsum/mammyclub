<?php

/**
 * BaseXBroadcast
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property clob $subject
 * @property integer $variants_count
 * @property clob $variants_stats_count
 * @property boolean $is_single
 * @property integer $recipients_count
 * @property integer $read_count
 * @property integer $link_visited_count
 * @property integer $successfully_sent_count
 * @property integer $unsubscribe_count
 * @property integer $converted_count
 * @property datetime $sent_date
 * @property integer $template_id
 * @property XBroadcastTemplate $template
 * @property Doctrine_Collection $XBroadcastOpen
 * @property Doctrine_Collection $XBroadcastRecipient
 * @property Doctrine_Collection $XBroadcastVisitedLink
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseXBroadcast extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('x_broadcast');
        $this->hasColumn('id', 'integer', 4, array(
             'primary' => true,
             'autoincrement' => true,
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('subject', 'clob', 65536, array(
             'type' => 'clob',
             'notnull' => true,
             'length' => '65536',
             ));
        $this->hasColumn('variants_count', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => '4',
             ));
        $this->hasColumn('variants_stats_count', 'clob', 65536, array(
             'type' => 'clob',
             'length' => '65536',
             ));
        $this->hasColumn('is_single', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             'notnull' => true,
             ));
        $this->hasColumn('recipients_count', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => '4',
             ));
        $this->hasColumn('read_count', 'integer', 4, array(
             'type' => 'integer',
             'default' => 0,
             'notnull' => true,
             'length' => '4',
             ));
        $this->hasColumn('link_visited_count', 'integer', 4, array(
             'type' => 'integer',
             'default' => 0,
             'notnull' => true,
             'length' => '4',
             ));
        $this->hasColumn('successfully_sent_count', 'integer', 4, array(
             'type' => 'integer',
             'default' => 0,
             'notnull' => true,
             'length' => '4',
             ));
        $this->hasColumn('unsubscribe_count', 'integer', 4, array(
             'type' => 'integer',
             'default' => 0,
             'notnull' => true,
             'length' => '4',
             ));
        $this->hasColumn('converted_count', 'integer', 4, array(
             'type' => 'integer',
             'default' => 0,
             'notnull' => true,
             'length' => '4',
             ));
        $this->hasColumn('sent_date', 'datetime', null, array(
             'type' => 'datetime',
             ));
        $this->hasColumn('template_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('XBroadcastTemplate as template', array(
             'local' => 'template_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasMany('XBroadcastOpen', array(
             'local' => 'id',
             'foreign' => 'broadcast_id'));

        $this->hasMany('XBroadcastRecipient', array(
             'local' => 'id',
             'foreign' => 'broadcast_id'));

        $this->hasMany('XBroadcastVisitedLink', array(
             'local' => 'id',
             'foreign' => 'broadcast_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}