<?php

/**
 * BaseTaskSchedule
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property enum $send_notification
 * @property integer $admin_notification_template_id
 * @property bool $is_active
 * @property bool $is_processing
 * @property string $event
 * @property enum $task_type
 * @property enum $execution_type
 * @property date $execution_date
 * @property time $execution_time
 * @property integer $execution_hour
 * @property integer $execution_min
 * @property datetime $last_execution_date
 * @property string $task_data
 * @property AdminNotificationTemplate $admin_notification_template
 * @property Doctrine_Collection $task_schedule_log
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTaskSchedule extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('task_schedule');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'unsigned' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('send_notification', 'enum', null, array(
             'type' => 'enum',
             'notnull' => true,
             'values' => 
             array(
              0 => 'never',
              1 => 'always',
              2 => 'on_not_success',
              3 => 'on_success',
             ),
             'default' => 'never',
             ));
        $this->hasColumn('admin_notification_template_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('is_active', 'bool', null, array(
             'type' => 'bool',
             'default' => 0,
             ));
        $this->hasColumn('is_processing', 'bool', null, array(
             'type' => 'bool',
             'default' => 0,
             ));
        $this->hasColumn('event', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('task_type', 'enum', null, array(
             'type' => 'enum',
             'notnull' => true,
             'values' => 
             array(
              0 => 'periodic',
              1 => 'one_time',
              2 => 'event',
             ),
             'default' => 'periodic',
             ));
        $this->hasColumn('execution_type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'hour',
              1 => 'day',
              2 => 'week',
              3 => 'month',
              4 => 'year',
             ),
             ));
        $this->hasColumn('execution_date', 'date', null, array(
             'type' => 'date',
             ));
        $this->hasColumn('execution_time', 'time', null, array(
             'type' => 'time',
             ));
        $this->hasColumn('execution_hour', 'integer', 1, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '1',
             ));
        $this->hasColumn('execution_min', 'integer', 1, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '1',
             ));
        $this->hasColumn('last_execution_date', 'datetime', null, array(
             'type' => 'datetime',
             'notnull' => true,
             ));
        $this->hasColumn('task_data', 'string', 1000, array(
             'type' => 'string',
             'length' => '1000',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('AdminNotificationTemplate as admin_notification_template', array(
             'local' => 'admin_notification_template_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasMany('TaskScheduleLog as task_schedule_log', array(
             'local' => 'id',
             'foreign' => 'task_schedule_id'));
    }
}