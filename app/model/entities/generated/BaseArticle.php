<?php

/**
 * BaseArticle
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property string $page_url
 * @property clob $content
 * @property integer $priority
 * @property integer $comment_count
 * @property integer $view_count
 * @property date $date
 * @property date $last_update
 * @property boolean $published
 * @property boolean $hide_contents
 * @property string $head_section_code
 * @property integer $category_id
 * @property integer $author_id
 * @property integer $image_id
 * @property integer $header_id
 * @property ArticleCategory $category
 * @property Author $author
 * @property Image $image
 * @property Header $header
 * @property Doctrine_Collection $ArticleComment
 * @property Doctrine_Collection $article_form_rels
 * @property Doctrine_Collection $user_rels
 * @property Doctrine_Collection $FirstYearBroadcast
 * @property Doctrine_Collection $forms
 * @property Doctrine_Collection $UsefulTipsBroadcast
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseArticle extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('article');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'msgprop' => 'Название',
             'length' => '255',
             ));
        $this->hasColumn('page_url', 'string', 255, array(
             'type' => 'string',
             'unique' => true,
             'notnull' => true,
             'default' => '/статья/',
             'msgprop' => 'URL-адрес страницы',
             'length' => '255',
             ));
        $this->hasColumn('content', 'clob', 65536, array(
             'type' => 'clob',
             'msgprop' => 'Текст',
             'length' => '65536',
             ));
        $this->hasColumn('priority', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'msgprop' => 'Приоритет',
             'length' => '4',
             ));
        $this->hasColumn('comment_count', 'integer', 4, array(
             'type' => 'integer',
             'default' => 0,
             'unsigned' => true,
             'msgprop' => 'Количество комментариев',
             'length' => '4',
             ));
        $this->hasColumn('view_count', 'integer', 4, array(
             'type' => 'integer',
             'default' => 0,
             'unsigned' => true,
             'msgprop' => 'Количество просмотров',
             'length' => '4',
             ));
        $this->hasColumn('date', 'date', null, array(
             'type' => 'date',
             'notnull' => true,
             'msgprop' => 'Дата создания',
             ));
        $this->hasColumn('last_update', 'date', null, array(
             'type' => 'date',
             'msgprop' => 'Дата последнего изменения',
             ));
        $this->hasColumn('published', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 1,
             'notnull' => true,
             'msgprop' => 'Опубликовано',
             ));
        $this->hasColumn('hide_contents', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             'notnull' => true,
             'msgprop' => 'Скрыть содержание',
             ));
        $this->hasColumn('head_section_code', 'string', 10000, array(
             'type' => 'string',
             'msgprop' => 'Код в разделе head',
             'length' => '10000',
             ));
        $this->hasColumn('category_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'msgprop' => 'Категория',
             'length' => '4',
             ));
        $this->hasColumn('author_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'msgprop' => 'Автор',
             'length' => '4',
             ));
        $this->hasColumn('image_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'msgprop' => 'Изображение',
             'length' => '4',
             ));
        $this->hasColumn('header_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));


        $this->index('name_index', array(
             'fields' => 
             array(
              0 => 'name',
             ),
             ));
        $this->index('page_url_published_index', array(
             'fields' => 
             array(
              0 => 'page_url',
              1 => 'published',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('ArticleCategory as category', array(
             'local' => 'category_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('Author as author', array(
             'local' => 'author_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('Image as image', array(
             'local' => 'image_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('Header as header', array(
             'local' => 'header_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasMany('ArticleComment', array(
             'local' => 'id',
             'foreign' => 'entity_id'));

        $this->hasMany('ArticleForm as article_form_rels', array(
             'local' => 'id',
             'foreign' => 'article_id'));

        $this->hasMany('ArticleUser as user_rels', array(
             'local' => 'id',
             'foreign' => 'article_id'));

        $this->hasMany('FirstYearBroadcast', array(
             'local' => 'id',
             'foreign' => 'article_id'));

        $this->hasMany('Form as forms', array(
             'refClass' => 'ArticleForm',
             'local' => 'article_id',
             'foreign' => 'form_id'));

        $this->hasMany('UsefulTipsBroadcast', array(
             'local' => 'id',
             'foreign' => 'article_id'));
    }
}