<?php

/**
 * BaseParameterGroup
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property boolean $in_stock
 * @property boolean $not_in_stock
 * @property boolean $our_stock
 * @property string $bar_code
 * @property integer $standard_store_qty
 * @property integer $price
 * @property integer $product_id
 * @property integer $image_id
 * @property integer $main_parameter_value_id
 * @property integer $count
 * @property Doctrine_Collection $secondary_parameter_values_out
 * @property Product $product
 * @property Image $image
 * @property ParameterValue $main_parameter_value
 * @property Doctrine_Collection $CartItem
 * @property Doctrine_Collection $ParameterGroupValueOut
 * @property Doctrine_Collection $SiteOrderItem
 * @property Doctrine_Collection $inventories
 * @property Doctrine_Collection $StoreInventoryParserSetting
 * @property Doctrine_Collection $reserves
 * @property Doctrine_Collection $SupplierRequestProductParameterGroup
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseParameterGroup extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('parameter_group');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('in_stock', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 1,
             'notnull' => true,
             'msgprop' => 'Основной параметр в наличии',
             ));
        $this->hasColumn('not_in_stock', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 1,
             'notnull' => true,
             'msgprop' => 'Нет в наличии',
             ));
        $this->hasColumn('our_stock', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             'notnull' => true,
             'msgprop' => 'Наш склад',
             ));
        $this->hasColumn('bar_code', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('standard_store_qty', 'integer', 4, array(
             'type' => 'integer',
             'msgprop' => 'Штрих-код',
             'length' => '4',
             ));
        $this->hasColumn('price', 'integer', 7, array(
             'type' => 'integer',
             'msgprop' => 'Цена',
             'length' => '7',
             ));
        $this->hasColumn('product_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('image_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('main_parameter_value_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('count', 'integer', 4, array(
             'type' => 'integer',
             'msgprop' => 'Количество',
             'length' => '4',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('ParameterValue as secondary_parameter_values_out', array(
             'refClass' => 'ParameterGroupValueOut',
             'local' => 'parameter_group_id',
             'foreign' => 'parameter_value_id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('Product as product', array(
             'local' => 'product_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Image as image', array(
             'local' => 'image_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('ParameterValue as main_parameter_value', array(
             'local' => 'main_parameter_value_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('CartItem', array(
             'local' => 'id',
             'foreign' => 'parameter_group_id'));

        $this->hasMany('ParameterGroupValueOut', array(
             'local' => 'id',
             'foreign' => 'parameter_group_id'));

        $this->hasMany('SiteOrderItem', array(
             'local' => 'id',
             'foreign' => 'parameter_group_id'));

        $this->hasMany('StoreInventory as inventories', array(
             'local' => 'id',
             'foreign' => 'product_group_id'));

        $this->hasMany('StoreInventoryParserSetting', array(
             'local' => 'id',
             'foreign' => 'product_group_id'));

        $this->hasMany('StoreReserve as reserves', array(
             'local' => 'id',
             'foreign' => 'product_group_id'));

        $this->hasMany('SupplierRequestProductParameterGroup', array(
             'local' => 'id',
             'foreign' => 'parameter_group_id'));
    }
}