<?php

/**
 * BaseSale
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property datetime $starts_at
 * @property datetime $ends_at
 * @property integer $discount
 * @property string $discount_type
 * @property boolean $for_all
 * @property Doctrine_Collection $pregnancyweeks
 * @property Doctrine_Collection $products
 * @property Doctrine_Collection $users
 * @property Doctrine_Collection $CartItem
 * @property Doctrine_Collection $PregnancySale
 * @property Doctrine_Collection $product_rels
 * @property Doctrine_Collection $SiteOrderItem
 * @property Doctrine_Collection $UserSale
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseSale extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('sale');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'msgprop' => 'Название',
             'length' => '255',
             ));
        $this->hasColumn('starts_at', 'datetime', null, array(
             'type' => 'datetime',
             'unsigned' => true,
             'notnull' => true,
             'msgprop' => 'Начинается в',
             ));
        $this->hasColumn('ends_at', 'datetime', null, array(
             'type' => 'datetime',
             'unsigned' => true,
             'notnull' => true,
             'msgprop' => 'Действует до',
             ));
        $this->hasColumn('discount', 'integer', 2, array(
             'type' => 'integer',
             'notnull' => true,
             'unsigned' => true,
             'msgprop' => 'Скидка',
             'length' => '2',
             ));
        $this->hasColumn('discount_type', 'string', 255, array(
             'type' => 'string',
             'default' => 'percent',
             'notnull' => true,
             'msgprop' => 'Тип скидки',
             'length' => '255',
             ));
        $this->hasColumn('for_all', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => 0,
             'msgprop' => 'Для всех',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('PregnancyWeek as pregnancyweeks', array(
             'refClass' => 'PregnancySale',
             'local' => 'sale_id',
             'foreign' => 'pregnancy_week_id',
             'onDelete' => 'SET NULL'));

        $this->hasMany('Product as products', array(
             'refClass' => 'ProductSale',
             'local' => 'sale_id',
             'foreign' => 'product_id',
             'onDelete' => 'SET NULL'));

        $this->hasMany('User as users', array(
             'refClass' => 'UserSale',
             'local' => 'sale_id',
             'foreign' => 'user_id',
             'onDelete' => 'SET NULL'));

        $this->hasMany('CartItem', array(
             'local' => 'id',
             'foreign' => 'sale_id'));

        $this->hasMany('PregnancySale', array(
             'local' => 'id',
             'foreign' => 'sale_id'));

        $this->hasMany('ProductSale as product_rels', array(
             'local' => 'id',
             'foreign' => 'sale_id'));

        $this->hasMany('SiteOrderItem', array(
             'local' => 'id',
             'foreign' => 'sale_id'));

        $this->hasMany('UserSale', array(
             'local' => 'id',
             'foreign' => 'sale_id'));
    }
}