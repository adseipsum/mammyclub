<?php

/**
 * BaseSiteOrder
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $code
 * @property string $fio
 * @property string $first_name
 * @property string $last_name
 * @property string $middle_name
 * @property string $phone
 * @property string $email
 * @property string $delivery_type
 * @property string $delivery_carrier
 * @property integer $delivery_city_id
 * @property string $delivery_city_ref
 * @property string $delivery_street
 * @property string $delivery_street_type
 * @property string $delivery_street_ref
 * @property string $delivery_house
 * @property string $delivery_flat
 * @property integer $delivery_warehouse_id
 * @property string $delivery_post
 * @property string $delivery_post_ref
 * @property string $payment_type
 * @property decimal $total
 * @property decimal $total_discount
 * @property decimal $total_with_discount
 * @property decimal $total_on_create
 * @property boolean $paid
 * @property datetime $paid_date
 * @property decimal $paid_amount
 * @property boolean $is_repeat_order
 * @property boolean $request_review
 * @property enum $status
 * @property string $comment
 * @property string $comment_manager
 * @property integer $upsale
 * @property string $involvement_chanel
 * @property string $order_type
 * @property boolean $made_via_phone
 * @property string $ttn_code
 * @property integer $manager_id
 * @property integer $shipment_store_id
 * @property integer $np_sender_id
 * @property integer $order_weight
 * @property integer $order_length
 * @property integer $order_width
 * @property integer $order_height
 * @property date $shipment_date
 * @property integer $delivery_id
 * @property integer $delivery_price
 * @property date $delivery_date
 * @property string $delivery_interval
 * @property string $delivery_interval_code
 * @property string $inv_channel
 * @property string $inv_channel_src
 * @property string $inv_channel_mdm
 * @property string $inv_channel_cmp
 * @property string $inv_channel_cnt
 * @property string $inv_channel_trm
 * @property integer $blocked_admin_id
 * @property integer $user_id
 * @property integer $transaction_id
 * @property integer $siteorder_status_id
 * @property date $complete_status_date
 * @property boolean $is_canceled
 * @property boolean $soft_deleted
 * @property User $user
 * @property Transaction $transaction
 * @property Admin $blocked_admin
 * @property SiteOrderStatus $siteorder_status
 * @property Store $shipment_store
 * @property Admin $manager
 * @property City $delivery_city
 * @property Warehouse $delivery_warehouse
 * @property Delivery $delivery
 * @property Counterparty $np_sender
 * @property Doctrine_Collection $Cart
 * @property Doctrine_Collection $items
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseSiteOrder extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('site_order');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'unsigned' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('code', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('fio', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('first_name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('last_name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('middle_name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('phone', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('delivery_type', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('delivery_carrier', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('delivery_city_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('delivery_city_ref', 'string', 50, array(
             'type' => 'string',
             'length' => '50',
             ));
        $this->hasColumn('delivery_street', 'string', 100, array(
             'type' => 'string',
             'length' => '100',
             ));
        $this->hasColumn('delivery_street_type', 'string', 20, array(
             'type' => 'string',
             'length' => '20',
             ));
        $this->hasColumn('delivery_street_ref', 'string', 50, array(
             'type' => 'string',
             'length' => '50',
             ));
        $this->hasColumn('delivery_house', 'string', 10, array(
             'type' => 'string',
             'length' => '10',
             ));
        $this->hasColumn('delivery_flat', 'string', 10, array(
             'type' => 'string',
             'length' => '10',
             ));
        $this->hasColumn('delivery_warehouse_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('delivery_post', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('delivery_post_ref', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('payment_type', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('total', 'decimal', 7, array(
             'type' => 'decimal',
             'length' => '7',
             'scale' => '2',
             ));
        $this->hasColumn('total_discount', 'decimal', 7, array(
             'type' => 'decimal',
             'length' => '7',
             'scale' => '2',
             ));
        $this->hasColumn('total_with_discount', 'decimal', 7, array(
             'type' => 'decimal',
             'length' => '7',
             'scale' => '2',
             ));
        $this->hasColumn('total_on_create', 'decimal', 7, array(
             'type' => 'decimal',
             'length' => '7',
             'scale' => '2',
             ));
        $this->hasColumn('paid', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('paid_date', 'datetime', null, array(
             'type' => 'datetime',
             ));
        $this->hasColumn('paid_amount', 'decimal', 7, array(
             'type' => 'decimal',
             'length' => '7',
             'scale' => '2',
             ));
        $this->hasColumn('is_repeat_order', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => 0,
             'msgprop' => 'Повторный заказ',
             ));
        $this->hasColumn('request_review', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => 0,
             'msgprop' => 'Запрос отзыва',
             ));
        $this->hasColumn('status', 'enum', null, array(
             'type' => 'enum',
             'notnull' => true,
             'values' => 
             array(
              0 => 'new',
              1 => 'confirmed_stock',
              2 => 'confirmed_supplier',
              3 => 'shipped',
              4 => 'delivered',
              5 => 'canceled',
              6 => 'waiting_goods',
              7 => 'waiting_ttn',
              8 => 'payment_pending',
              9 => 'write_letter',
              10 => 'returned',
              11 => 'waiting_client_response',
             ),
             'default' => 'new',
             ));
        $this->hasColumn('comment', 'string', 1000, array(
             'type' => 'string',
             'length' => '1000',
             ));
        $this->hasColumn('comment_manager', 'string', 1000, array(
             'type' => 'string',
             'length' => '1000',
             ));
        $this->hasColumn('upsale', 'integer', 4, array(
             'type' => 'integer',
             'default' => 0,
             'length' => '4',
             ));
        $this->hasColumn('involvement_chanel', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('order_type', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('made_via_phone', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('ttn_code', 'string', 20, array(
             'type' => 'string',
             'length' => '20',
             ));
        $this->hasColumn('manager_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('shipment_store_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('np_sender_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('order_weight', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('order_length', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('order_width', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('order_height', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('shipment_date', 'date', null, array(
             'type' => 'date',
             ));
        $this->hasColumn('delivery_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('delivery_price', 'integer', 7, array(
             'type' => 'integer',
             'default' => 0,
             'msgprop' => 'Цена доставки',
             'length' => '7',
             ));
        $this->hasColumn('delivery_date', 'date', null, array(
             'type' => 'date',
             ));
        $this->hasColumn('delivery_interval', 'string', 20, array(
             'type' => 'string',
             'length' => '20',
             ));
        $this->hasColumn('delivery_interval_code', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('inv_channel', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('inv_channel_src', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('inv_channel_mdm', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('inv_channel_cmp', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('inv_channel_cnt', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('inv_channel_trm', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('blocked_admin_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'msgprop' => 'Пользователь',
             'length' => '4',
             ));
        $this->hasColumn('transaction_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('siteorder_status_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('complete_status_date', 'date', null, array(
             'type' => 'date',
             ));
        $this->hasColumn('is_canceled', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('soft_deleted', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => 0,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('User as user', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('Transaction as transaction', array(
             'local' => 'transaction_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('Admin as blocked_admin', array(
             'local' => 'blocked_admin_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('SiteOrderStatus as siteorder_status', array(
             'local' => 'siteorder_status_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('Store as shipment_store', array(
             'local' => 'shipment_store_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('Admin as manager', array(
             'local' => 'manager_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('City as delivery_city', array(
             'local' => 'delivery_city_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('Warehouse as delivery_warehouse', array(
             'local' => 'delivery_warehouse_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('Delivery as delivery', array(
             'local' => 'delivery_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('Counterparty as np_sender', array(
             'local' => 'np_sender_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasMany('Cart', array(
             'local' => 'id',
             'foreign' => 'siteorder_id'));

        $this->hasMany('SiteOrderItem as items', array(
             'local' => 'id',
             'foreign' => 'siteorder_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'updated' => 
             array(
              'disabled' => true,
             ),
             ));
        $this->actAs($timestampable0);
    }
}