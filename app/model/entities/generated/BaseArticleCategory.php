<?php

/**
 * BaseArticleCategory
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property string $page_url
 * @property clob $text_top
 * @property clob $text_bottom
 * @property integer $priority
 * @property integer $image_id
 * @property integer $header_id
 * @property Image $image
 * @property Header $header
 * @property Doctrine_Collection $Article
 * @property Doctrine_Collection $articlecategory_form_rels
 * @property Doctrine_Collection $forms
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseArticleCategory extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('article_category');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'msgprop' => 'Название',
             'length' => '255',
             ));
        $this->hasColumn('page_url', 'string', 255, array(
             'type' => 'string',
             'unique' => true,
             'notnull' => true,
             'default' => '/статьи/',
             'msgprop' => 'URL-адрес страницы',
             'length' => '255',
             ));
        $this->hasColumn('text_top', 'clob', 65536, array(
             'type' => 'clob',
             'msgprop' => 'Текст сверху',
             'length' => '65536',
             ));
        $this->hasColumn('text_bottom', 'clob', 65536, array(
             'type' => 'clob',
             'msgprop' => 'Текст снизу',
             'length' => '65536',
             ));
        $this->hasColumn('priority', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('image_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'msgprop' => 'Изображение',
             'length' => '4',
             ));
        $this->hasColumn('header_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));


        $this->index('name_index', array(
             'fields' => 
             array(
              0 => 'name',
             ),
             ));
        $this->index('page_url_index', array(
             'fields' => 
             array(
              0 => 'page_url',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Image as image', array(
             'local' => 'image_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('Header as header', array(
             'local' => 'header_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('Article', array(
             'local' => 'id',
             'foreign' => 'category_id'));

        $this->hasMany('ArticleCategoryForm as articlecategory_form_rels', array(
             'local' => 'id',
             'foreign' => 'article_category_id'));

        $this->hasMany('Form as forms', array(
             'refClass' => 'ArticleCategoryForm',
             'local' => 'article_category_id',
             'foreign' => 'form_id'));

        $nestedset0 = new Doctrine_Template_NestedSet(array(
             'hasManyRoots' => true,
             'rootColumnName' => 'root_id',
             ));
        $this->actAs($nestedset0);
    }
}