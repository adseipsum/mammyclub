<?php

/**
 * BaseConversionEvent
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $ip
 * @property string $user_agent
 * @property string $guid
 * @property string $page
 * @property string $comment
 * @property integer $conversion_id
 * @property Conversion $conversion
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseConversionEvent extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('conversion_event');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('ip', 'string', 15, array(
             'type' => 'string',
             'length' => '15',
             ));
        $this->hasColumn('user_agent', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('guid', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('page', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('comment', 'string', 1000, array(
             'type' => 'string',
             'length' => '1000',
             ));
        $this->hasColumn('conversion_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'length' => '4',
             ));

        $this->option('type', 'MYISAM');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Conversion as conversion', array(
             'local' => 'conversion_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'updated' => 
             array(
              'disabled' => true,
             ),
             ));
        $this->actAs($timestampable0);
    }
}