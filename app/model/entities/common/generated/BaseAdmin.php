<?php

/**
 * BaseAdmin
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property string $theme
 * @property string $default_redirect
 * @property string $email
 * @property string $password
 * @property string $allowed_ips
 * @property enum $password_changed
 * @property clob $permissions
 * @property boolean $is_itirra
 * @property boolean $email_notice
 * @property string $last_section_visited
 * @property datetime $last_activity_date
 * @property integer $external_crm_id
 * @property Doctrine_Collection $admins
 * @property Doctrine_Collection $admin_notification_template_admin_rels
 * @property Doctrine_Collection $log_actions
 * @property Doctrine_Collection $EventLog
 * @property Doctrine_Collection $siteorders
 * @property Doctrine_Collection $SiteOrder
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseAdmin extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('admin');
        $this->hasColumn('id', 'integer', 4, array(
             'primary' => true,
             'autoincrement' => true,
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('theme', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'default' => 'classic',
             'length' => '255',
             ));
        $this->hasColumn('default_redirect', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'unique' => true,
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('password', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('allowed_ips', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('password_changed', 'enum', null, array(
             'type' => 'enum',
             'notnull' => true,
             'values' => 
             array(
              0 => 'Y',
              1 => 'N',
             ),
             'default' => 'N',
             ));
        $this->hasColumn('permissions', 'clob', 65535, array(
             'type' => 'clob',
             'length' => '65535',
             ));
        $this->hasColumn('is_itirra', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             'notnull' => true,
             ));
        $this->hasColumn('email_notice', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 1,
             'notnull' => true,
             ));
        $this->hasColumn('last_section_visited', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('last_activity_date', 'datetime', null, array(
             'type' => 'datetime',
             ));
        $this->hasColumn('external_crm_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('AdminNotificationTemplate as admins', array(
             'refClass' => 'AdminNotificationTemplateAdmin',
             'local' => 'admin_id',
             'foreign' => 'admin_notification_template_id'));

        $this->hasMany('AdminNotificationTemplateAdmin as admin_notification_template_admin_rels', array(
             'local' => 'id',
             'foreign' => 'admin_id'));

        $this->hasMany('AdminLog as log_actions', array(
             'local' => 'id',
             'foreign' => 'admin_id'));

        $this->hasMany('EventLog', array(
             'local' => 'id',
             'foreign' => 'admin_id'));

        $this->hasMany('SiteOrder as siteorders', array(
             'local' => 'id',
             'foreign' => 'blocked_admin_id'));

        $this->hasMany('SiteOrder', array(
             'local' => 'id',
             'foreign' => 'manager_id'));
    }
}