<?php if (!defined("BASEPATH")) exit("No direct script access allowed");
/**
 * FirstYearBroadcastManager
 * This class has been auto-generated by Itirra
 */
require_once APPPATH . 'logic/base/BaseManager.php';
class FirstYearBroadcastManager extends BaseManager {

  /** Fields. */
  public $fields = array("name" => array("type" => "input", "attrs" => array("maxlength" => 255)),
                         "subject" => array("type" => "input", "class" => "required", "attrs" => array("maxlength" => 255)),
                         "email_appeal" => array("type" => "tinymce", "attrs" => array("maxlength" => 255)),
                         "email_intro" => array("type" => "tinymce", "class" => "charCounter", "attrs" => array("maxlength" => 5000)),
                         "email_main_text" => array("type" => "tinymce", "attrs" => array("maxlength" => 65536)),
                         "email_short_text" => array("type" => "tinymce", "class" => "charCounter", "attrs" => array("maxlength" => 5000)),
                         "email_outro" => array("type" => "tinymce", "class" => "charCounter", "attrs" => array("maxlength" => 5000)),
                         "age_of_child" => array("type" => "select", "class" => "required", "options" => array()),
                         "article" => array("type" => "select", "relation" => array("entity_name" => "Article")),
                         "countries" => array("type" => "multipleselect_chosen", "relation" => array("entity_name" => "Country", "search" => TRUE)),
                         "products" => array("type" => "multipleselect", "relation" => array("entity_name" => "Product", "where_array" => array("not_in_stock" => FALSE, "published" => TRUE), "search" => TRUE, "sort" => TRUE)),
                         "products_boys" => array("type" => "multipleselect", "relation" => array("entity_name" => "Product", "where_array" => array("not_in_stock" => FALSE, "published" => TRUE), "search" => TRUE, "sort" => TRUE)),
                         "products_girls" => array("type" => "multipleselect", "relation" => array("entity_name" => "Product", "where_array" => array("not_in_stock" => FALSE, "published" => TRUE), "search" => TRUE, "sort" => TRUE)));

  /** List params. */
  public $listParams = array("name", "age_of_child", array("countries" => "name"));

  /**
   * sendSingleLetterOfBroadcast
   * @param array $broadcast
   * @param array $user
   */
  public function sendSingleLetterOfBroadcast($broadcast, $user) {

    if (!isset($user['auth_info']) || empty($user['auth_info'])) {
      $user = ManagerHolder::get('User')->getById($user['id'], 'e.*, auth_info.*');
    }

    // Collect data to array
    $viewData = $this->createFirstYearBroadcastContent($broadcast, $user);

    // Create broadcast
    $broadcastData = array('subject' => $viewData['subject'],
                           'text' => '',
                           'recipients_count' => 1,
                           'read_count' => 0,
                           'link_visited_count' => 0,
                           'created_at' => date(DOCTRINE_DATE_FORMAT),
                           'type' => 'first_year_broadcast');
    $broadcastId = ManagerHolder::get('MandrillBroadcast')->insert($broadcastData);

    // Save Broadcast Links
    foreach ($viewData as $data) {
      if (!empty($data)) {
        ManagerHolder::get('MandrillBroadcast')->saveBroadcastLinks($data, $broadcastId);
      }
    }

    // Insert recipient data
    $userData = array('email' => $user['auth_info']['email'],
                      'user_id' => $user['id'],
                      'is_read' => 0,
                      'is_send' => 0,
                      'data' => serialize($user),
                      'broadcast_id' => $broadcastId,
                      'updated_at' => date(DOCTRINE_DATE_FORMAT));
    $recipientId = ManagerHolder::get('MandrillBroadcastRecipient')->insert($userData);

    try {
      $metaData = array('broadcast_id' => $broadcastId,
                        'recipient_id' => $recipientId);
      ManagerHolder::get('EmailMandrill')->setMetadata($metaData);
      ManagerHolder::get('EmailMandrill')->sendTemplate($userData['email'], 'first_year_broadcast/view', $viewData, $viewData['subject']);
      log_message('info',  '[send_first_year_broadcast_single] - Sending email to ' . $user['auth_info']['email'] . ' (recipient_id: ' . $recipientId . ') for broadcast: ' . $broadcast['name']);
    } catch (Exception $e) {
      log_message('error', '[send_first_year_broadcast_single] - Broadcast send error:' . $e->getMessage() . '; on email: ' . $user['auth_info']['email']);
    }

    ManagerHolder::get('MandrillBroadcast')->updateById($broadcastId, 'sent_date', date(DOCTRINE_DATE_FORMAT));
  }

  /**
   * Create first year broadcast content
   * @param array $broadcast
   * @param array $user
   * @return array
   */
  public function createFirstYearBroadcastContent($broadcast, $user) {

    $viewData = array();
    $viewData['subject'] = !empty($broadcast['subject']) ? $broadcast['subject'] : '';
    $viewData['email_appeal'] = !empty($broadcast['email_appeal']) ? $broadcast['email_appeal'] : '';
    $viewData['email_intro'] = !empty($broadcast['email_intro']) ? $broadcast['email_intro'] : '';
    $viewData['email_outro'] = !empty($broadcast['email_outro']) ? $broadcast['email_outro'] : '';
    $viewData['email_main_text'] = !empty($broadcast['email_main_text']) ? $broadcast['email_main_text'] : '';

    if(!empty($broadcast['article'])) {
      $viewData['email_main_text'] = $broadcast['article']['content'];
      if(strpos($broadcast['email_main_text'], '{PRODUCTS}') !== FALSE) {
        $viewData['email_main_text'] .= $broadcast['email_main_text'];
      }
    }
//     if($user['country'] != 'UA') {
//       $viewData['email_main_text'] = prepare_viewdata_not_ua($broadcast);
//     }

    $ci = &get_instance();
    $ci->load->helper('project_broadcast');

    // Process products based on sex
    $products = array();
    $productAlias = 'products';
    if($user['child_sex'] == 'm' && isset($broadcast['products_boys']) && !empty($broadcast['products_boys'])) {
      $productAlias = 'products_boys';
    } elseif($user['child_sex'] == 'f' && isset($broadcast['products_girls']) && !empty($broadcast['products_girls'])) {
      $productAlias = 'products_girls';
    }
    if(isset($broadcast[$productAlias]) && !empty($broadcast[$productAlias])) {
      foreach ($broadcast[$productAlias] as $product) {
        $url = shop_url($product['page_url']);
        if (substr($url, -1) == '/') {
          $url = substr($url, 0 , -1);
        }
        $product['url_with_login_key'] = $url . '?' . LOGIN_KEY . '=' . $user['login_key'];
        $product['url_for_buy_button'] = $url . '?' . LOGIN_KEY . '=' . $user['login_key'] . '&' . REDIRECT_TO_CART_KEY . '=1';
        $products[] = $product;
      }
    }

    // Proccess data
    foreach ($viewData as &$data) {
      if (!empty($data)) {
        if(!empty($products)) {
          $data = ManagerHolder::get('ProductBroadcast')->process_product_broadcast_showcase($data, $products, $user);
        }
        $googleAnalData = array('utm_source'   => $broadcast['age_of_child'] . '_week_baby',
                                'utm_medium'   => 'email',
                                'utm_campaign' => 'FYB');
        ManagerHolder::get('MandrillBroadcast')->addLoginKeyToLink($data, $user['login_key'], $googleAnalData);
        kprintfLettersContent($user, $data);
        // Search for short tag and replace it with link
        if (strpos($data, '{UNSUBSCRIBE_LINK}') !== FALSE) {
          $unsubscribeLink = site_url(FIRST_YEAR_BROADCAST_UNSUBSCRIBE_PROCESS . '?' . LOGIN_KEY . '=' . $user['login_key']);
          $data = str_replace('{UNSUBSCRIBE_LINK}', $unsubscribeLink, $data);
        }
      }
    }

    return $viewData;
  }

  /**
   * PreProcessWhereQuery.
   * OVERRIDE THIS METHOD IN A SUBCLASS TO ADD joins and other stuff.
   * @param Doctrine_Query $query
   * @return Doctrine_Query
   */
  protected function preProcessWhereQuery($query, $pref, $what = "*") {
    $query = parent::preProcessWhereQuery($query, $pref, $what);
    if (strpos($what, 'products.') !== FALSE || $what == '*') {
      $query->addSelect("products_image.*")->leftJoin("products.image products_image");
    }
    if (strpos($what, 'products_boys.') !== FALSE || $what == '*') {
      $query->addSelect("products_boys_image.*")->leftJoin("products_boys.image products_boys_image");
    }
    if (strpos($what, 'products_girls.') !== FALSE || $what == '*') {
      $query->addSelect("products_girls_image.*")->leftJoin("products_girls.image products_girls_image");
    }
    return $query;
  }

}