<?php if (!defined("BASEPATH")) exit("No direct script access allowed");
/**
 * CartManager
 * This class has been auto-generated by Itirra
 */
require_once APPPATH . 'logic/base/BaseManager.php';
class CartManager extends BaseManager {

  /** Name field. */
  protected $nameField = "id";


  /** Fields. */
  public $fields = array(//"user" => array("type" => "select", "class" => "readonly", "relation" => array("entity_name" => "User")),
                         "created_date" => array("type" => "datetime", "class" => "readonly", "attrs" => array("disabled" => "disabled")),
                         "updated_date" => array("type" => "datetime", "class" => "readonly", "attrs" => array("disabled" => "disabled")),
                         "items" => array("type" => "include", "path" => "includes/admin/cart/cart_items", "attrs" => array("disabled" => "disabled")),
	                       "order_status" => array("type" => "enum",  "class" => "readonly", "attrs" => array("disabled" => "disabled")),
                         "total" => array("type" => "input_double", "class" => "readonly", "attrs" => array("disabled" => "disabled")));

  /** List params. */
  public $listParams = array("user.name", "created_date", "updated_date", "order_status", "total");

  /**
   * Link to site order
   * @param $cartId
   * @param $siteOrderId
   */
  public function linkToSiteOrder($cartId, $siteOrderId) {
  	if (!empty($siteOrderId)) {
		  $this->updateById($cartId, 'order_status', 'in_order');
	  }
    $this->updateById($cartId, 'siteorder_id', $siteOrderId);
  }

  /**
   * Recount Cart With Discount
   * @param $cartId
   * @param $user
   */
  public function recountCartWithDiscount($cartId, $user = array()) {

    $cartItems = ManagerHolder::get('CartItem')->getAllWhere(array('cart_id' => $cartId));

    $cartTotal = 0;
    foreach ($cartItems as &$cartItem) {

      $cartItem['product']['parameter_groups'] = ManagerHolder::get('ParameterGroup')->getAllWhere(array('product_id' => $cartItem['product']['id'],'not_in_stock' => FALSE), 'e.*');

      // Get products and add sales if exist
      if (!empty($user)) {
        ManagerHolder::get('Sale')->addAvailableSaleToProducts($user, $cartItem['product']);
      } else {
        ManagerHolder::get('Sale')->addAvailableForAllSaleToProducts($cartItem['product']);
      }

      $update = array();
      if (!empty($cartItem['parameter_group'])) {
        if (empty($cartItem['parameter_group']['price'])) {
          $productPrice = $cartItem['product']['price'];
          if (isset($cartItem['product']['old_price']) && !empty($cartItem['product']['old_price'])) {
            $productPrice = $cartItem['product']['old_price'];
          }

          $cartItem['parameter_group']['price'] = $productPrice;
        }
        $update['price'] = $cartItem['parameter_group']['price'];
        if (isset($cartItem['product']['sale'])) {
          foreach ($cartItem['product']['parameter_groups'] as $pg) {
            if ($pg['id'] == $cartItem['parameter_group']['id']) {
              $update['discount_price'] = $pg['price'];
              break;
            }
          }
        }
      } else {
        $update['price'] = $cartItem['product']['price'];
        if (isset($cartItem['product']['old_price']) && !empty($cartItem['product']['old_price'])) {
          $update['price'] = $cartItem['product']['old_price'];
        }
        if (isset($cartItem['product']['sale'])) {
          $update['discount_price'] = $cartItem['product']['price'];
        }
      }
      $price = isset($update['discount_price']) && !empty($update['discount_price']) ? $update['discount_price'] : $update['price'];
      $update['item_total'] = $price * $cartItem['qty'];

      if (!isset($cartItem['product']['sale']) || empty($cartItem['product']['sale'])) {
        $update['sale_id'] = new Doctrine_Null();
      } else {
        $update['sale_id'] = $cartItem['product']['sale']['id'];
      }
      foreach ($update as $k => $v) {
        if ($v === NULL) {
          $update[$k] = new Doctrine_Null();
        }
      }
      ManagerHolder::get('CartItem')->updateAllWhere(array('id' => $cartItem['id']), $update);
      $cartTotal += $update['item_total'];
    }

    ManagerHolder::get('Cart')->updateById($cartId, 'total', $cartTotal);
  }

  /**
   * Get cart items amount from entity
   * @param entity $entity
   * @return integer $result
   */
  public function get_cart_item_amount($entity) {
    $result = 0;

    foreach ($entity as $e) {
      $result += $e['qty'];
    }

    return $result;
  }

}