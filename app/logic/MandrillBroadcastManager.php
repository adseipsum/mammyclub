<?php if (!defined("BASEPATH")) exit("No direct script access allowed");
/**
 * MandrillBroadcastManager
 * This class has been auto-generated by Itirra
 */
require_once APPPATH . 'logic/base/BaseManager.php';
class MandrillBroadcastManager extends BaseManager {

  /** Name field. */
  protected $nameField = "subject";

  /** Order by */
  protected $orderBy = "created_at DESC";

  /** Fields. */
  public $fields = array("subject" => array("type" => "input", "class" => "required", "attrs" => array("maxlength" => 255)),
                         "text" => array("type" => "tinymce", "class" => "required", "attrs" => array("maxlength" => 65536)),
                         "recipients_count" => array("type" => "input_integer"),
                         "read_count" => array("type" => "input_integer"),
                         "link_visited_count" => array("type" => "input_integer"),
                         "sent_date" => array("type" => "datetime"),
                         "created_at" => array("type" => "datetime", "class" => "readonly", "attrs" => array("disabled" => "disabled")));

  /** List params. */
  public $listParams = array("subject", "recipients_count", "read_count", "link_visited_count", "sent_date");


  /**
   * processServiceEmailData
   * @param array $entity
   * @param string $subject
   * @param string $html
   */
  public function processServiceEmailData($entity, $subject, $html = '') {
    // Insert broadcast data
    $broadcastData = array('subject' => lang($subject),
                           'text' => $html,
                           'recipients_count' => 1,
                           'read_count' => 0,
                           'link_visited_count' => 0,
                           'created_at' => date(DOCTRINE_DATE_FORMAT),
                           'type' => 'service');
    $broadcastId = ManagerHolder::get('MandrillBroadcast')->insert($broadcastData);

//     log_message('info', 'Broadcast for ' . $subject . ' service email inserted');

    if(!empty($html)) {
      $this->saveBroadcastLinks($html, $broadcastId);
    }

    // Insert recipient data
    $userData = array('email' => $entity['auth_info']['email'],
                      'user_id' => $entity['id'],
                      'is_read' => 0,
                      'is_send' => 0,
                      'data' => serialize($entity),
                      'broadcast_id' => $broadcastId,
                      'updated_at' => date(DOCTRINE_DATE_FORMAT));
    $recipientId = ManagerHolder::get('MandrillBroadcastRecipient')->insert($userData);

//     log_message('info', 'Recipient id = ' . $recipientId . ' (' . $entity['auth_info']['email'] . ') was inserted');

    ManagerHolder::get('EmailMandrill')->setMetadata(array('broadcast_id' => $broadcastId,
                                                           'recipient_id' => $recipientId));

//     log_message('info', 'Metadata for user with email ' . $entity['auth_info']['email'] . ' was setted');

//     ManagerHolder::get('EmailMandrill')->setTag('Single letter of pregnancy week broadcast');
  }

  /**
   * Save links for visiting tracking
   * @param string $content
  */
  public function saveBroadcastLinks(&$html, $broadcastId) {
    if (is_string($html)) {
      preg_match_all("'<a.*?href=\"(http[s]*://[^>\"]*?|//[^>\"]*?)\"[^>]*?>(.*?)</a>'si", $html, $matches);

      if (isset($matches[1][0]) && !empty($matches[1][0])) {
        foreach ($matches[1] as $url) {

          if (strpos($url, '?') !== FALSE) {
            $url = explode('?', $url);
            $url = $url[0];
          }
          if (strpos($url, '#') !== FALSE) {
            $url = explode('#', $url);
            $url = $url[0];
          }

          $urlExists = ManagerHolder::get('MandrillBroadcastLink')->existsWhere(array('url' => urldecode($url), 'broadcast_id' => $broadcastId));
          if (!$urlExists) {
            ManagerHolder::get('MandrillBroadcastLink')->insert(array('url' => urldecode($url), 'broadcast_id' => $broadcastId));
          }
        }
      }
    }
//     log_message('info', 'Links was inserted');
  }

  /**
   * Add login key to link
   * @param string $html
   * @param string $loginKey
   * @param array $googleAnalData
   */
  public function addLoginKeyToLink(&$html, $loginKey, $googleAnalData = array()) {
    if (is_string($html)) {
      $html = urldecode($html);
      preg_match_all("'<a.*?href=\"(http[s]*://[^>\"]*?|//[^>\"]*?)\"[^>]*?>(.*?)</a>'si", $html, $matches);

      if (isset($matches[1]) && !empty($matches[1])) {
        $matches[1] = array_unique($matches[1]);
        foreach ($matches[1] as $key => $url) {

          // Cut trailing slash
          if (substr($url, -1) == '/') {
            $url = substr($url, 0 , -1);
          }

          // If link includes id
          if (strpos($url, '#') !== FALSE) {

            // Delete login key from link if its exist (it can be in wrong position)
            // For example: http://example.com/page#id?login=key
            if (strpos($url, $loginKey) !== FALSE) {
              $url = str_replace('?' . LOGIN_KEY . '=' . $loginKey, '', $url);
            }

            // Make new link
            // For example: http://example.com/page?login=key#id
            $partsOfUrl = explode('#', $url);
            $url = $partsOfUrl[0] . '?' . LOGIN_KEY . '=' . $loginKey . '#' . $partsOfUrl[1];

          } elseif (strpos($url, $loginKey) === FALSE) {
            $url = $url . '?' . LOGIN_KEY . '=' . $loginKey;
          }

          // Add google analytics shit
          if(!empty($googleAnalData)) {
            foreach ($googleAnalData as $k => $v) {
              $url .= '&' . $k . '=' . $v;
            }
          }

          $html = href_replace($matches[1][$key], $url, $html);
        }
      }

    }
  }

}