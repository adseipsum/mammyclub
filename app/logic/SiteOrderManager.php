<?php if (!defined("BASEPATH")) exit("No direct script access allowed");
/**
 * SiteOrderManager
 * This class has been auto-generated by Itirra
 */
require_once APPPATH . 'logic/base/BaseManager.php';
class SiteOrderManager extends BaseManager {

  /** Need sync */
  public $needSync = TRUE;

  /** Name field. */
  protected $nameField = "id";

  /** Order by */
  protected $orderBy = "created_at DESC";

  /** Temp data */
  protected $tempData = array();

  /** Fields. */
  public $fields = array("code" => array("type" => "input", "class" => "readonly", "attrs" => array("maxlength" => 255)),
//                         "user" => array("type" => "select", "relation" => array("entity_name" => "User", "concat_field" => "auth_info.email", "concat_separator" => " | ")),
                         "fio" => array("type" => "input", "class" => "readonly", "attrs" => array("maxlength" => 255)),
                         "first_name" => array("type" => "input", "class" => "readonly", "attrs" => array("maxlength" => 255)),
                         "last_name" => array("type" => "input", "class" => "readonly", "attrs" => array("maxlength" => 255)),
                         "phone" => array("type" => "input", "class" => "readonly", "attrs" => array("maxlength" => 255)),
                         "email" => array("type" => "input", "class" => "readonly", "attrs" => array("maxlength" => 255)),
                         "delivery_type" => array("type" => "select", "options" => array("delivery-to-home" => "На дом", "delivery-to-post" => "На ближайший склад Новой Почты"), "class" => "required", "attrs" => array("maxlength" => 255)),
//                         "delivery_carrier" => array("type" => "select", "options" => array("" => "-- Выберите пожалуйста --", "new-post" => "Новая почта", "courier" => "Курьер"),  "attrs" => array("maxlength" => 255)),
//                         "delivery_city" => array("type" => "input", "class" => "readonly", "attrs" => array("maxlength" => 50)),
//                         "delivery_post" => array("type" => "input", "class" => "readonly", "attrs" => array("maxlength" => 255)),
                         "delivery_city" => array("type" => "select", "relation" => array("entity_name" => "City")),
                         "delivery_warehouse" => array("type" => "select", "relation" => array("entity_name" => "Warehouse")),
                         "delivery_street" => array("type" => "input", "class" => "readonly", "attrs" => array("maxlength" => 50)),
                         "delivery_street_ref" => array("type" => "hidden", "attrs" => array("maxlength" => 50)),
                         "delivery_street_type" => array("type" => "hidden", "attrs" => array("maxlength" => 50)),
                         "delivery_house" => array("type" => "input", "class" => "readonly", "attrs" => array("maxlength" => 50)),
                         "delivery_flat" => array("type" => "input", "class" => "readonly", "attrs" => array("maxlength" => 50)),
                         "payment_type" => array("type" => "select", "options" => array("online" => "Онлайн платежи", "cash" => "Курьеру при доставке", 'privatbank' => "Картой ПриватБанка"), "class" => "required", "attrs" => array("maxlength" => 255)),
                         "order_type" => array("type" => "select", "options" => array("shopping-cart" => "Через корзину", "one-click" => "В один клик", "price-decrease-request" => "Запрос на понижение цены", "landing-page" => "Заявка с посадочной страницы", "app" => "Мобильное приложение", "live-chat" => "Онлайн-консультант", "offline" => "Оффлайн", "phone" => "По телефону", "missed-call" => "Пропущенный звонок", "terminal" => "Терминал"),  "attrs" => array("maxlength" => 255)),
                         "manager" => array("type" => "select", "relation" => array("entity_name" => "Admin")),
                         "shipment_store" => array("type" => "select", "relation" => array("entity_name" => "Store")),
                         "shipment_date" => array("type" => "date", "class" => "readonly"),
                         "delivery_date" => array("type" => "date", "class" => "readonly"),
                         "delivery_interval" => array("type" => "input", "class" => "readonly", "attrs" => array("maxlength" => 50)),
                         "delivery_interval_code" => array("type" => "hidden", "class" => "readonly", "attrs" => array("maxlength" => 50)),
//                         "order_weight" => array("type" => "input"),
//                         "order_length" => array("type" => "input"),
//                         "order_width" => array("type" => "input"),
//                         "order_height" => array("type" => "input"),
                         "created_at" => array("type" => "datetime", "class" => "readonly", "attrs" => array("disabled" => "disabled")),
                         "request_review" => array("type" => "checkbox"),
                         "paid" => array("type" => "checkbox"),
                         "paid_date" => array("type" => "datetime"),
                         "is_repeat_order" => array("type" => "checkbox"),
                         "ttn_code" => array("type" => "input", "attrs" => array("maxlength" => 20)),
                         "siteorder_status" => array("type" => "select", "relation" => array("entity_name" => "SiteOrderStatus")),
                         "np_sender" => array("type" => "select", "relation" => array("entity_name" => "Counterparty", "where_array" => array('property' => "Sender"))),
                         "comment" => array("type" => "textarea", "class" => "readonly"),
                         "comment_manager" => array("type" => "textarea", "class" => "readonly"),
                         "involvement_chanel" => array("type" => "input"),
                         "made_via_phone" => array("type" => "checkbox"),
                         "inv_channel" => array("type" => "input"),
                         "inv_channel_src" => array("type" => "input"),
                         "inv_channel_mdm" => array("type" => "input"),
                         "inv_channel_cmp" => array("type" => "input"),
                         "inv_channel_cnt" => array("type" => "input"),
                         "inv_channel_trm" => array("type" => "input"),
                          "upsale" => array("type" => "input"));


  /** List params. */
  public $listParams = array("code", "fio", "phone", "email", "payment_type", "total_with_discount", "manager.name", "shipment_store.name", "shipment_date", "created_at", "ttn_code", "siteorder_status.name", "paid", "paid_date", "is_repeat_order", "request_review", "np_sender.name");


  /**
   * Filter Values
   * @param string $filterName
   * @return array
   */
  public function getFilterValues($filterName)  {

    if ($filterName === 'np_sender.id') {
      $counterpartySender = ManagerHolder::get('Counterparty')->getAsViewArray(array(), 'name', null, array('property' => 'Sender'));
      return $counterpartySender;
    }

    if ($filterName === 'complete_status_date') {
      ManagerHolder::get('SiteOrder')->setOrderBy('complete_status_date ASC');
      $siteOder = ManagerHolder::get('SiteOrder')->getOneWhere(array('complete_status_date <>' => ''), 'e.*');
      $today = time();
      $countDays = round(($today - strtotime($siteOder['complete_status_date'])) / (60 * 60 * 24));
      $days = array();
      foreach (range(0, $countDays) as $number) {
        $days[] = $number;
      }

      return $days;
    }
    if ($filterName === 'total_with_discount') {
      ManagerHolder::get('SiteOrder')->setOrderBy('total_with_discount DESC');
      $maxTotal = ManagerHolder::get('SiteOrder')->getOneWhere(array('total_with_discount <>' => ''), 'e.*');
      $total = array();
      foreach (range(0, $maxTotal['total_with_discount'],50) as $number) {
        $total[] = $number;
      }
      return $total;
    }

    return parent::getFilterValues($filterName);
  }

  /** Метод для работы с Facebook аудиториями
  *
  * @param $filters
  * @param string $communicationType
  * @return array
  */
  public function getEmailsFromSiteorder($filters, $communicationType = 'email') {
    $phonesOrEmails = array();

    if ($communicationType == 'email') {
      $what = 'e.email';
      $filters['email<>'] = '';
    } else {
      $what = 'e.phone';
      $filters['phone<>'] = '';
    }

    // фильтр "кол-во дней от даты доставки"
    $completeStatusDateFilter = preg_grep ('/^complete_status_date/i', array_keys($filters));
    if (!empty($completeStatusDateFilter)) {
      if (isset($filters[$completeStatusDateFilter[0]])) {
        $filters[$completeStatusDateFilter[0]] = $this->getCompleteStatusDateRange($filters);
      }
    }

    $siteorders = ManagerHolder::get('SiteOrder')->getAllWhere($filters, $what);
    foreach ($siteorders as $siteorder) {
      $phonesOrEmails[] = $siteorder[$communicationType];
    }

    $phonesOrEmails = array_values(array_unique($phonesOrEmails));

    return $phonesOrEmails;
  }


  /**
   * Результат фильтра "кол-во дней от даты доставки для Facebook аудитории
   *
   * @param $filters
   * @return array|false|string
   */
  protected function getCompleteStatusDateRange($filters) {
    $result = array();
    if (isset($filters['complete_status_date BETWEEN'])) {
      preg_match_all('|\d+|', $filters['complete_status_date BETWEEN'], $matches);
      $fromDate = date("Y-m-d", strtotime('-' . $matches[0][0] . ' day',time()));
      $toDate = date("Y-m-d", strtotime('-' . $matches[0][1] . ' day',time()));
      // between A & B, where B is bigger then A
      $result = $toDate . ' AND ' . $fromDate;
    } else {
      if (isset($filters['complete_status_date >='])) {
        preg_match_all('|\d+|', $filters['complete_status_date >='], $matches);
        $result =  date("Y-m-d", strtotime('-' . $matches[0][0] . ' day',time()));
      }
      if (isset($filters['complete_status_date <='])) {
        preg_match_all('|\d+|', $filters['complete_status_date <='], $matches);
        $result = date("Y-m-d", strtotime('-' . $matches[0][0] . ' day',time()));
      }
    }
    return $result;
  }


  /**
   * GetDQLSelectQuery.
   * @param string $what
   * @param string $pref
   * @return Doctrine_Query
   */
  protected function getDQLSelectQuery($what = '*', $pref = 'e') {
    $query = parent::getDQLSelectQuery($what, $pref);
    $query->addWhere('e.soft_deleted = ?', FALSE);
    return $query;
  }

  /**
   * PostInsert.
   * @param array $entity
   */
  protected function postInsert($entity) {

  }

  /**
   * Pre update where
   * @param array $keyValueArray
   * @param string $key
   * @param mixed $value
   */
  protected function preUpdateWhere($keyValueArray, $key, $value) {
    if (isset($keyValueArray['id']) && in_array($key, array('siteorder_status_id', 'shipment_date', 'paid'))) {
      $dbEntity = ManagerHolder::get('SiteOrder')->getById($keyValueArray['id'], 'siteorder_status_id, shipment_date, paid');
      if ($dbEntity) {
        $this->tempData['siteorder_status_id'] = $dbEntity['siteorder_status_id'];
        $this->tempData['shipment_date'] = $dbEntity['shipment_date'];
        $this->tempData['paid'] = $dbEntity['paid'];
      }
    }
  }

  /**
   * Pre update
   * @param entity $entity
   */
  protected function preUpdate(&$entity) {
    $dbEntity = ManagerHolder::get('SiteOrder')->getById($entity['id'], 'siteorder_status_id, shipment_date, paid');
    if ($dbEntity) {
      $this->tempData['siteorder_status_id'] = $dbEntity['siteorder_status_id'];
      $this->tempData['shipment_date'] = $dbEntity['shipment_date'];
      $this->tempData['paid'] = $dbEntity['paid'];
    }
  }

  /**
   * Post update
   * @param array $entity
   */
  protected function postUpdate($entity) {
    if (count($entity) == 2 && isset($entity['blocked_admin_id'])) {
      return;
    }

    if (isset($entity['id']) && !isset($entity['siteorder_status_id'])) {
      $entity = ManagerHolder::get('SiteOrder')->getById($entity['id'], 'siteorder_status_id');
    }

    if (isset($this->tempData['paid']) && !$this->tempData['paid'] && isset($entity['paid']) && $entity['paid']) {
      ManagerHolder::get('SiteOrder')->updateById($entity['id'], 'paid_date', date(DOCTRINE_DATE_FORMAT));
//      $payment = array();
//      $payment['order']['externalId'] = $entity['id'];
//      $payment['amount'] = $entity['total_with_discount'];
//      $payment['paidAt'] = $entity['paid_date'];
//      if ($entity['payment_type'] == 'privatbank') {
//        $payment['type'] = 'bank-card';
//      } else {
//        $payment['type'] = 'cash';
//      }
//      $payment['status'] = 'paid';
//
//      $CI = &get_instance();
//      $CI->load->library('RetailCrmApi');
//
//      try {
//        $response = $CI->retailcrmapi->getClient()->request->ordersPaymentCreate($payment);
//      } catch (Exception $e) {
//        log_message("error", "RetailCrm error:" . $e->getMessage());
//      }
    }

    if (isset($this->tempData['siteorder_status_id']) && $this->tempData['siteorder_status_id'] != $entity['siteorder_status_id']) {
      $fromStatus = ManagerHolder::get('SiteOrderStatus')->getById($this->tempData['siteorder_status_id'], 'e.*');
      $toStatus = ManagerHolder::get('SiteOrderStatus')->getById($entity['siteorder_status_id'], 'e.*');
      Events::trigger('SiteOrder.changeStatus', array('id' => $entity['id'], 'from' => $fromStatus, 'to' => $toStatus));
    }

    if (isset($entity['id']) && !isset($entity['shipment_date'])) {
      $entity = ManagerHolder::get('SiteOrder')->getById($entity['id'], 'shipment_date');
    }

    if (isset($this->tempData['shipment_date']) && $this->tempData['shipment_date'] != $entity['shipment_date']) {
      Events::trigger('SiteOrder.shipmentDateAction', array(
        'id' => $entity['id'],
        'shipment_date' => $entity['shipment_date'],
      ));
    }

    $this->tempData = array();

    if ($this->needSync) {
      ManagerHolder::get('SiteOrder')->exportToRetailCrm($entity['id'], TRUE);
    }
  }

  /**
   * batchUpdateFromPostData
   * @return array
   */
  public function batchUpdateFromPostData() {
	  $updateValues = array();
	  foreach($_POST['value'] as $key => $value) {
		  if($value != '' && isset($_POST['field'][$key])) {
			  $fieldName = $_POST['field'][$key];
			  if ($fieldName == 'siteorder_status.id') {
				  $siteOrderStatus = ManagerHolder::get('SiteOrderStatus')->getById($value, 'k');
				  $updateValues['siteorder_status'] = $siteOrderStatus['k'];
			  }
			  $updateValues[$fieldName] = $value;
		  }
	  }
	  if (isset($_POST['popup_value'])) {
		  $updateValues['popup_value'] =$_POST['popup_value'];
	  }
	  if($updateValues) {
	  	return $updateValues;
	  }
  }

	/**
	 * @param      $siteOrderId
	 * @param null $data
	 * @return array
	 */
	public function createTtn($siteOrderId, $data = null) {

    $siteOrder = ManagerHolder::get('SiteOrder')->getById($siteOrderId, 'e.*, delivery_city.*, delivery_warehouse.*');

    $sender = ManagerHolder::get('Counterparty')->getById($siteOrder['np_sender_id'], 'e.*, newpostacccount.*');
    if (empty($sender)) {
      return array('is_success' => false, 'message' => 'Не указан отпарвитель', 'siteorder_code' => $siteOrder['code']);
    }

    $store = ManagerHolder::get('Store')->getById($siteOrder['shipment_store_id'], 'e.*, sender_counterpartyaddress.*, sender_warehouse.*, sender_city.*');

    if (empty($store)) {
      return array('is_success' => false, 'message' => 'Не указал склад отгрузки', 'siteorder_code' => $siteOrder['code']);
    }

    $store['counterparty'] = ManagerHolder::get('Counterparty')->getById($siteOrder['np_sender_id'], 'e.*, newpostacccount.*, city.*');
    $store['counterpartycontactperson'] = ManagerHolder::get('CounterpartyContactPerson')->getById($sender['default_sender_id'], 'e.*');
    $store['sender_counterpartyaddress']['city'] = ManagerHolder::get('City')->getById($store['sender_counterpartyaddress']['city_id'], 'e.*');
    $store['counterparty']['city'] = ManagerHolder::get('City')->getById($store['counterparty']['city_id'], 'e.*');

    $where = array(
      'new_post_account_id' => $store['counterparty']['newpostacccount']['id'],
      'property' => 'Recipient',
      'city_id' => null
    );
    $store['counterpartycontact'] = ManagerHolder::get('Counterparty')->getOneWhere($where, 'e.*');

		$CI = &get_instance();
		$CI->load->library('NewPostSdk');
    $CI->newpostsdk->setApiKey($store['counterparty']['newpostacccount']['api_key']);

    $document = $CI->newpostsdk->createTtn($siteOrder, $store, $data, $sender);
    if (!$document->success) {
	    $errors = implode(', ', $document->errors);
	    return array('is_success' => false, 'erorrs' => $errors, 'siteorder_code' => $siteOrder['code']);
    } else {
	    $document = $document->data[0];
	    ManagerHolder::get('SiteOrder')->updateById($siteOrder['id'], 'ttn_code', $document->IntDocNumber);
	    return array('is_success' => true, 'message' => 'ТТН успешно создан', 'siteorder_code' => $siteOrder['code']);
    }
  }


	/**
	 * @param $sitorderId
	 * @return string
	 * @throws Exception
	 */
	public function genereteOrderShimpentDoc($sitorderId) {
		$siteOrder = ManagerHolder::get('SiteOrder')->getById($sitorderId, 'e.*, items.*, delivery_city.*');
		if (empty($siteOrder) || !isset($siteOrder['items']) || empty($siteOrder['items'])) {
			set_flash_error('В заказе ' . $siteOrder['code'] . ' остуствуют товары');
			redirect_to_referral();
		}
		$addressDelivery = 'НЕТ';
		if ($siteOrder['delivery_type'] == 'delivery-to-home') {
			$addressDelivery = $siteOrder['delivery_street'] . ', ' . $siteOrder['delivery_house'] . ', ' . $siteOrder['delivery_flat'];
		}
		$postDelivery = 'НЕТ';
		if ($siteOrder['delivery_type'] == 'delivery-to-post') {
			$postDelivery = $siteOrder['delivery_post'];
		}

		$total = 'Без наложенного платежа';
    if ($siteOrder['paid']) {
      $total = 0;
    } elseif ($siteOrder['payment_type'] == 'cash') {
      $total = $siteOrder['total_with_discount'];
		}

		require_once('./lib/phpExcel/PHPExcel.php');
		require_once('./lib/phpExcel/PHPExcel/IOFactory.php');

		$xls = @PHPExcel_IOFactory::load('./web/client_order_tamplate.xlsx');
		foreach ($xls->getWorksheetIterator() as $sheet) {
			$sheet->setCellValue("B1", trim($siteOrder['code']));
			$sheet->setCellValue("B4", $siteOrder['fio']);
			$sheet->setCellValue("B5", $siteOrder['phone']);
			$sheet->setCellValue("B6", $siteOrder['delivery_city']['name']);
			$sheet->setCellValue("B7", $addressDelivery);
			$sheet->setCellValue("B8", $postDelivery);
			$sheet->setCellValue("B12", $total);

			$rowNum = 16;
			$productData = array();
			foreach ($siteOrder['items'] as $i => $cartItem) {
				$productName = $cartItem['product']['name'];
				$productBarCode = !empty($cartItem['product']['bar_code'])?$cartItem['product']['bar_code']:'';
				$productCode = !empty($cartItem['product']['product_code'])?$cartItem['product']['product_code']:'';
				if (!empty($cartItem['additional_product_params'])) {
					$cartItem['additional_product_params'] = ManagerHolder::get('ParameterValue')->getAsViewArray(array(), 'name', null, array('id' => unserialize($cartItem['additional_product_params'])));
					$productName .= ' [' . implode(', ', $cartItem['additional_product_params']) . ']';
					// Check for parameter group by parameter values
					foreach ($cartItem['additional_product_params'] as $paramId => $paramName) {
						$paramGroup = ManagerHolder::get('ParameterGroup')->getOneWhere(array('product_id' => $cartItem['product_id'], 'main_parameter_value_id' => $paramId), 'e.*');
						if (!empty($paramGroup)) {
							$productBarCode = !empty($paramGroup['bar_code'])?$paramGroup['bar_code']:'';
							$productCode = !empty($paramGroup['product_code'])?$paramGroup['product_code']:'';
							break;
						}
					}
				}
				$productData[] = array('index' => $i+1,
					'bar_code'  => $productBarCode . ' ',
					'product_code' => $productCode,
					'name'  => $productName,
					'qty'   => $cartItem['qty']);
			}

			$productDataFields = array('name', 'bar_code', 'product_code', 'qty');

			// Product table products
			foreach ($productData as $p) {
				foreach ($p as $k => $v) {
					for ($i=0; $i<=5; $i++) {
						if ($i == array_search($k, $productDataFields)) {
							$sheet->setCellValueByColumnAndRow($i, $rowNum, trim($v));
						}
					}
				}
				$rowNum++;
			}

			$fileSavePath = './web/uploads/siteorder/';
			if (!is_dir($fileSavePath)) {
				mkdir($fileSavePath, 0777);
			}

			$objWriter = new PHPExcel_Writer_Excel5($xls);
      $code = str_replace('/', '_', $siteOrder['code']);
			$objWriter->save($fileSavePath . 'MammyClub_на_клиента_' . $code . '.xls');

			return $fileSavePath . 'MammyClub_на_клиента_' . $code . '.xls';

		}
  }


	/**
	 * @param  $sitorderId
	 * @throws Exception
	 * @return string
	 */
	public function genereteOrderShimpentDocOnConfirmedStock($sitorderId) {

		$siteOrder = ManagerHolder::get('SiteOrder')->getById($sitorderId, 'e.*, items.*');
		if (empty($siteOrder) || !isset($siteOrder['items']) || empty($siteOrder['items'])) {
			redirect_to_referral();
		}

		require_once('./lib/phpExcel/PHPExcel.php');
		require_once('./lib/phpExcel/PHPExcel/IOFactory.php');

		$xls = @PHPExcel_IOFactory::load('./web/supplier_request_zammler_template.xlsx');
		foreach ($xls->getWorksheetIterator() as $sheet) {
			$sheet->setCellValue("B1", trim($siteOrder['id']));
			$sheet->setCellValue("B12", '');

			$rowNum = 18;
			$productData = array();
			foreach ($siteOrder['items'] as $i => $cartItem) {
				$productName = $cartItem['product']['name'];
				$productCode = !empty($cartItem['product']['bar_code'])?$cartItem['product']['bar_code']:'';
				if (!empty($cartItem['additional_product_params'])) {
					$cartItem['additional_product_params'] = ManagerHolder::get('ParameterValue')->getAsViewArray(array(), 'name', null, array('id' => unserialize($cartItem['additional_product_params'])));
					$productName .= ' ' . implode(', ', $cartItem['additional_product_params']);
					// Check for parameter group by parameter values
					foreach ($cartItem['additional_product_params'] as $paramId => $paramName) {
						$paramGroup = ManagerHolder::get('ParameterGroup')->getOneWhere(array('product_id' => $cartItem['product_id'], 'main_parameter_value_id' => $paramId), 'e.*');
						if (!empty($paramGroup)) {
							$productCode = !empty($paramGroup['bar_code'])?$paramGroup['bar_code']:'';
							break;
						}
					}
				}
				$productData[] = array('index' => $i+1,
					'bar_code'  => $productCode,
					'name'  => $productName,
					'qty'   => $cartItem['qty'],
					'store'  => 'склад ТОВ "ЗАММЛЕР ФУЛФІЛМЕНТ"',
					'weight' => ''
				);
			}

			$productDataFields = array('name', 'bar_code', 'qty', 'weight', 'store', 'standart');

			// Product table products
			foreach ($productData as $p) {
				foreach ($p as $k => $v) {
					for ($i=0; $i<=5; $i++) {
						if ($i == array_search($k, $productDataFields)) {
							$sheet->setCellValueByColumnAndRow($i, $rowNum, trim($v));
						}
					}
				}
				$rowNum++;
			}

			$fileSavePath = './web/uploads/siteorder/';
			if (!is_dir($fileSavePath)) {
				mkdir($fileSavePath, 0777);
			}

			$objWriter = new PHPExcel_Writer_Excel5($xls);
      $code = str_replace('/', '_', $siteOrder['code']);
			$objWriter->save($fileSavePath . $code . "_відвантаження.xls");

			return $fileSavePath . $code . "_відвантаження.xls";

		}
  }


	/**
	 * @param $siteOrderId
	 * @return array
	 */
	public function siteorderProductsReserve($siteOrderId) {
	  $siteOrder = ManagerHolder::get('SiteOrder')->getById($siteOrderId, 'e.*');
	  $siteOrderItems = ManagerHolder::get('SiteOrderItem')->getAllWhere(array('siteorder_id' => $siteOrderId), 'e.*, product_parameter_group.*');
    $storeId = $siteOrder['shipment_store_id'];
    if (empty($storeId)) {
      return array('success' => false, 'error' => 'Не указан склад отгрузки');
    }

	  if (!empty($siteOrderItems)) {
		  foreach ($siteOrderItems as $item) {
			  $info = ManagerHolder::get('StoreReserve')->getReserveInfoBySiteOrderItemId($item['id']);
			  $needReserve = $info['siteorder_qty'] - $info['current']['qty'];

			  if ($needReserve > 0 && isset($info['inventories'][$storeId]['free_qty']) && $info['inventories'][$storeId]['free_qty'] > 0) {
				  if ($needReserve > $info['inventories'][$storeId]['free_qty']) {
					  $needReserve = $info['inventories'][$storeId]['free_qty'];
				  }
				  $reserve = array();
				  $reserve['store_id'] = $storeId;
				  $reserve['siteorder_item_id'] = $item['id'];

				  $exists = ManagerHolder::get('StoreReserve')->existsWhere($reserve);
				  if (!$exists) {
					  $reserve['product_id'] = $item['product_id'];
					  $reserve['product_group_id'] = $item['parameter_group_id'];
					  $reserve['qty'] = $info['current']['qty'] + $needReserve;
					  ManagerHolder::get('StoreReserve')->insert($reserve);
				  } else {
					  ManagerHolder::get('StoreReserve')->updateWhere($reserve, 'qty', $info['current']['qty'] + $needReserve);
				  }
			  }
		  }
	  }

    ManagerHolder::get('StoreInventory')->updateProductStatuses();
    return array('success' => true);
  }


	/**
	 * @param $siteOrder
	 * @param $delivery
	 * @return mixed
	 * @throws Exception
	 */
	public function updateSiteOrderDeliveryType ($siteOrder, $delivery){
	  if ($delivery !== false) {
		  if ($siteOrder['delivery_id'] != $delivery['id']){
			  $siteOrder['delivery_id'] = $delivery['id'];
			  $siteOrder['delivery_price'] = $delivery['price'];
			  // Update delivery type
			  $updateData = array(
				  'delivery_price' => $delivery['price'],
				  'delivery_id' => $delivery['id']
			  );
			  ManagerHolder::get('SiteOrder')->updateAllWhere(array('id' => $siteOrder['id']), $updateData);

		  }
	  } else {
		  $siteOrder['delivery_price'] = 0;
		  ManagerHolder::get('SiteOrder')->executeNativeSQL(
			  'UPDATE site_order 
				 SET delivery_id = NULL, delivery_price = 0 
				 WHERE site_order.id = ' .$siteOrder['id']);
	  }
	  return $siteOrder;
  }

  /**
   * Add items
   * @param $cartId
   * @param $siteOrderId
   */
  public function addItems($cartId, $siteOrderId) {
    $cart = ManagerHolder::get('Cart')->getById($cartId, 'e.*');
    $cartItems = ManagerHolder::get('CartItem')->getAllWhere(array('cart_id' => $cart['id']), 'e.*, product.*, parameter_group.*');
    $fieldMap = array(
      'product_id',
      'parameter_group_id',
      'additional_product_params',
      'qty',
      'price',
      'discount_price',
      'item_total',
      'sale_id'
    );

    foreach ($cartItems as $cartItem) {
      $siteOrderItem = array_copy_by_keys($cartItem, $fieldMap);
      $siteOrderItem['siteorder_id'] = $siteOrderId;

      // Get inventories data
      $inventoriesWhere = array();
      $inventoriesWhere['product_id'] = $siteOrderItem['product_id'];
      if (!empty($siteOrderItem['parameter_group_id'])) {
        $inventoriesWhere['product_group_id'] = $siteOrderItem['parameter_group_id'];
      }
      $inventories = ManagerHolder::get('StoreInventory')->getAllWhere($inventoriesWhere, 'store_id, qty');
      $siteOrderItem['zammler_inventory_qty'] = 0;
      $siteOrderItem['mc_inventory_qty'] = 0;
      $siteOrderItem['other_stores_inventory_qty'] = 0;

      if (!empty($inventories)) {
        foreach ($inventories as $inventory) {
          if ($inventory['store_id'] == ZAMMLER_STORE_ID) {
            $siteOrderItem['zammler_inventory_qty'] = $inventory['qty'];
          } elseif ($inventory['store_id'] == MC_STORE_ID) {
            $siteOrderItem['mc_inventory_qty'] = $inventory['qty'];
          } else {
            $siteOrderItem['other_stores_inventory_qty'] += $inventory['qty'];
          }
        }
      }

      ManagerHolder::get('SiteOrderItem')->insert($siteOrderItem);
    }

  }

  /**
   * PreProcessWhereQuery.
   * OVERRIDE THIS METHOD IN A SUBCLASS TO ADD joins and other stuff.
   * @param Doctrine_Query $query
   * @return Doctrine_Query
   */
  protected function preProcessWhereQuery($query, $pref, $what = "*") {
    $query = parent::preProcessWhereQuery($query, $pref, $what);
    if (strpos($what, 'Cart.') !== FALSE || $what == '*') {
      $query->addSelect("cart_cart_item.*")->leftJoin("Cart.items cart_cart_item");
      $query->addSelect("cart_item_product.*")->leftJoin("cart_cart_item.product cart_item_product");
      $query->addSelect("cart_item_product_category.*")->leftJoin("cart_item_product.category cart_item_product_category");
      $query->addSelect("cart_item_product_brand.*")->leftJoin("cart_item_product.brand cart_item_product_brand");
    }
    if (strpos($what, 'items.') !== FALSE || $what == '*') {
      $query->addSelect("siteorder_item_product.*")->leftJoin("items.product siteorder_item_product");
      $query->addSelect("siteorder_item_parameter_group.*")->leftJoin("items.parameter_group siteorder_item_parameter_group");
      $query->addSelect("siteorder_item_product_category.*")->leftJoin("siteorder_item_product.category siteorder_item_product_category");
      $query->addSelect("siteorder_item_product_brand.*")->leftJoin("siteorder_item_product.brand siteorder_item_product_brand");
    }
    if (strpos($what, 'user.') !== FALSE || $what == '*') {
      $query->addSelect("user_pregnancyweek_current.*")->leftJoin("user.pregnancyweek_current user_pregnancyweek_current");
    }

    return $query;
  }

  /**
   * Post status change
   * @param $siteOrderId
   */
  public function processStatusChange($siteOrderId) {
    $siteOrder = ManagerHolder::get('SiteOrder')->getById($siteOrderId, 'id, siteorder_status_id, is_canceled');
    $siteOrderStatus = ManagerHolder::get('SiteOrderStatus')->getById($siteOrder['siteorder_status_id']);

    if ($siteOrderStatus['is_cancel_reserve_status']) {
      $siteOrderItems = ManagerHolder::get('SiteOrderItem')->getAllWhere(array('siteorder_id' => $siteOrderId), 'e.*');
      foreach ($siteOrderItems as $item) {
        ManagerHolder::get('StoreReserve')->deleteWhere('siteorder_item_id', $item['id']);
      }
    }

    $notCountUpdateStatuses = array(SITEORDER_STATUS_SHIPPED, SITEORDER_STATUS_DELIVERED, SITEORDER_STATUS_RETURNED, SITEORDER_STATUS_CANCELED);
    if (in_array($siteOrderStatus['k'], $notCountUpdateStatuses) && !$siteOrder['is_canceled']) {
      ManagerHolder::get('SiteOrder')->updateById($siteOrderId, 'is_canceled', TRUE);
    }
  }

  /**
   * @param $siteOrderId
   * @return bool
   */
  public function deleteFromRetailCrm($siteOrderId) {
    $CI = &get_instance();
    $CI->load->library('RetailCrmApi');

    $order['externalId'] = 'TEST' . $siteOrderId;
    $order['status'] = 'deleted';

    try {
      $response = $CI->retailcrmapi->getClient()->request->ordersEdit($order, 'externalId');
    } catch (Exception $e) {
      log_message("error", "RetailCrm error:" . $e->getMessage());
    }

    return TRUE;
  }

  /**
   * Export siteorder to ReatailCrm
   * @param $siteOrderId
   * @param bool $update
   * @return bool
   */
  public function exportToRetailCrm($siteOrderId, $update = FALSE) {
    return TRUE;
    if (ENV == 'DEV') {
      return TRUE;
    }

    $siteOrder = ManagerHolder::get('SiteOrder')->getById($siteOrderId, 'e.*, siteorder_status.*, shipment_store.*, delivery_city.*, items.*, manager.*, user.*');
    if (empty($siteOrder)) {
      return FALSE;
    }

    $CI = &get_instance();
    $CI->load->library('RetailCrmApi');
    $order['externalId'] = 'TEST' . $siteOrderId;
    if ($siteOrder['delivery_type'] == 'delivery-to-post') {
      $order['delivery'] = array(
        'code' => 'newpost',
        'city' => $siteOrder['delivery_city']['name'],
        'data' => array(
          'serviceType' => 'DoorsWarehouse',
          'pickuppointId' => $siteOrder['delivery_post_ref']
        )
      );
    } elseif ($siteOrder['delivery_type'] == 'delivery-to-home') {
      $address = array();
      $address['city'] = $siteOrder['delivery_city']['name'];
      $address['street'] = $siteOrder['delivery_street'];
      $address['building'] = $siteOrder['delivery_house'];
      $address['flat'] = $siteOrder['delivery_flat'];

      $order['delivery'] = array(
        'code' => 'newpost',
        'address' => $address
      );
    }

    $fio = str_replace('  ', ' ', $siteOrder['fio']);
    $fio = explode(' ', $fio);

    $order['lastName'] = $siteOrder['last_name'];
    $order['firstName'] = $siteOrder['first_name'];
//    if (isset($fio[2])) {
//      $order['patronymic'] = $siteOrder['middle_name'];
//    }
    $order['status'] = str_replace('_', '-', $siteOrder['siteorder_status']['k']);
    $order['phone'] = substr($siteOrder['phone'], 2);
    $order['email'] = $siteOrder['email'];
    $order['countryIso'] = 'UA';
    $order['customerComment'] = $siteOrder['comment'];
    if (!empty($siteOrder['manager']) && !empty($siteOrder['manager']['external_crm_id'])) {
      $order['managerId'] = $siteOrder['manager']['external_crm_id'];
    }
    if ($siteOrder['payment_type'] == 'privatbank') {
      $order['paymentType'] = 'bank-card';
    } else {
      $order['paymentType'] = 'cash';
    }
    $order['items'] = array();
    $order['shipmentDate'] = $siteOrder['shipment_date'];
    $item['customer'] = array();
    $item['customer']['externalId'] = $siteOrder['user_id'];
    if (!empty($siteOrder['user']['pregnancyweek_current_id'])) {
      $pregnancyweek = ManagerHolder::get('PregnancyWeek')->getById($siteOrder['user']['pregnancyweek_current_id'], 'e.*');
      if (!empty($pregnancyweek)) {
        $item['customer']['pregnancyweek'] = $pregnancyweek['number'];
      }
    }

    if (isset($siteOrder['user']['age_of_child'])) {
      $item['customer']['childage'] = $siteOrder['user']['age_of_child'];
    }

    $cartItems = $siteOrder['items'];
    foreach ($cartItems as $cartItem) {
      $item = array();
      $item['quantity'] = $cartItem['qty'];

      if (empty($cartItem['parameter_group'])) {
        $item['offer']['externalId'] = $cartItem['product']['bar_code'];
      } else {
        $item['offer']['externalId'] = $cartItem['parameter_group']['bar_code'];
      }
      $item['initialPrice'] = $cartItem['price'];
      if (!empty($cartItem['discount_price'])) {
        $item['discountManualAmount'] = (double)$cartItem['price'] - $cartItem['discount_price'];
        $item['discountManualPercent'] = 0;
      }

      $order['items'][] = $item;
    }
    $order['delivery']['cost'] = $siteOrder['delivery_price'];
    $order['discountManualAmount'] = $siteOrder['total_discount'];

//    if ($_SERVER["REMOTE_ADDR"] == '176.37.46.128') {
//      traced($order);
//    }

    try {
      if (!$update) {
        $response = $CI->retailcrmapi->getClient()->request->ordersCreate($order);
      } else {
        $response = $CI->retailcrmapi->getClient()->request->ordersEdit($order, 'externalId');
      }
    } catch (Exception $e) {
//      trace($e->getMessage());
      log_message("error", "RetailCrm error:" . $e->getMessage());
    }

//    if ($siteOrder['paid']) {
//      $payment = array();
//      $payment['order']['externalId'] = 'TEST' . $siteOrder['id'];
//      $payment['amount'] = (double)$siteOrder['total_with_discount'];
//      if ($siteOrder['payment_type'] == 'privatbank') {
//        $payment['type'] = 'bank-card';
//      } else {
//        $payment['type'] = 'cash';
//      }
//      $payment['status'] = 'paid';
//
//      try {
//        $response = $CI->retailcrmapi->getClient()->request->ordersPaymentCreate($payment);
//        if ($_SERVER["REMOTE_ADDR"] == '176.37.46.128') {
//          trace($payment);
//          traced($response);
//        }
//      } catch (Exception $e) {
//        log_message("error", "RetailCrm error:" . $e->getMessage());
//      }
//    }

    return TRUE;
  }

}