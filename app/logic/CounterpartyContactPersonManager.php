<?php if (!defined("BASEPATH")) exit("No direct script access allowed");
/**
 * CounterpartyContactPersonManager
 * This class has been auto-generated by Itirra
 */
require_once APPPATH . 'logic/base/BaseManager.php';
class CounterpartyContactPersonManager extends BaseManager {

  /** Fields. */
  public $fields = array("name" => array("type" => "input", "class" => "required", "attrs" => array("maxlength" => 255)),
                         "first_name" => array("type" => "input", "class" => "required", "attrs" => array("maxlength" => 255)),
                         "last_name" => array("type" => "input", "class" => "required", "attrs" => array("maxlength" => 255)),
                         "middle_name" => array("type" => "input", "class" => "required", "attrs" => array("maxlength" => 255)),
                         "ref" => array("type" => "input", "class" => "required", "attrs" => array("maxlength" => 50)),
                         "phones" => array("type" => "input", "class" => "required", "attrs" => array("maxlength" => 50)),
                         "email" => array("type" => "input", "class" => "required", "attrs" => array("maxlength" => 50)),
                         "counterparty" => array("type" => "select2", "relation" => array("entity_name" => "Counterparty")));

  /** List params. */
  public $listParams = array("name", "counterparty.name", "newpostacccount.name");

	/**
	 * Sync
	 */
	public function sync() {
		$counterparties = ManagerHolder::get('Counterparty')->getAll('e.*');

		foreach ($counterparties as $counterparty) {
			$this->loadAndSync($counterparty);
		}
	}

  /**
   * PreProcessWhereQuery.
   * OVERRIDE THIS METHOD IN A SUBCLASS TO ADD joins and other stuff.
   * @param Doctrine_Query $query
   * @return Doctrine_Query
   */
  protected function preProcessWhereQuery($query, $pref, $what = "*")
  {
    $query = parent::preProcessWhereQuery($query, $pref, $what);
    if (strpos($what, 'counterparty.') !== FALSE || $what == '*') {
      $query->addSelect('newpostacccount.*')->leftJoin('counterparty.newpostacccount newpostacccount');
    }
    return $query;
  }


  /**
	 * @param $counterparty
	 * @param $page
	 */
	private function loadAndSync($counterparty, $page = 1) {

    $newPostAccounts = ManagerHolder::get('NewPostAccount')->getAsViewArray(array(), 'api_key');

    foreach ($newPostAccounts as $acocuntId => $acocuntApiKey) {
      $CI = &get_instance();
      $CI->load->library('NewPostSdk');
      $CI->newpostsdk->setApiKey($acocuntApiKey);


      $result = $CI->newpostsdk->getCounterpartyContactPersons($counterparty['ref'], $page);


      foreach ($result->data as $contact) {
        $entity = array();
        $entity['name'] = $contact->Description;
        $entity['first_name'] = $contact->FirstName;
        $entity['last_name'] = $contact->LastName;
        $entity['middle_name'] = $contact->MiddleName;
        $entity['phones'] = $contact->Phones;
        $entity['email'] = $contact->Email;
        $entity['counterparty_id'] = $counterparty['id'];

        $exists = ManagerHolder::get('CounterpartyContactPerson')->existsWhere(array('ref' => $contact->Ref));
        if ($exists) {
          foreach ($entity as $k => $v) {
            if ($entity[$k] === NULL) {
              unset($entity[$k]);
            }
          }
          ManagerHolder::get('CounterpartyContactPerson')->updateAllWhere(array('ref' => $contact->Ref), $entity);
        } else {
          $entity['ref'] = $contact->Ref;
          ManagerHolder::get('CounterpartyContactPerson')->insert($entity);
        }
      }

      if ($page % 5 == 0) {
        sleep(2);
      }

      if (!empty($result->info->totalCount) && $result->info->totalCount > (100 * $page)) {
        $page++;
        $this->loadAndSync($counterparty, $page);
      }
    }
  }



}