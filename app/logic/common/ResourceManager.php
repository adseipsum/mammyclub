<?php
/**
 * ResourceManager
 * This class has been auto-generated by Itirra
 */
require_once APPPATH . 'logic/base/BaseManager.php';
class ResourceManager extends BaseManager {

  /** Name field. */
  protected $nameField = "file_name";

  /** Fields. */
  public $fields = array("file_name" => array("type" => "input", "attrs" => array("maxlength" => 255)),
                         "file_path" => array("type" => "input", "attrs" => array("maxlength" => 255)),
                         "web_path" => array("type" => "input", "attrs" => array("maxlength" => 255)),
                         "extension" => array("type" => "input", "attrs" => array("maxlength" => 5)),
                         "size" => array("type" => "input_integer"),
                         "type" => array("type" => "input", "attrs" => array("maxlength" => 255)),
                         "width" => array("type" => "input_integer"),
                         "height" => array("type" => "input_integer"));

  /** List params. */
  public $listParams = array("file_name", "file_path", "web_path", "extension", "size", "type", "width", "height");

  /**
   * PreDelete.
   * OVERRIDE THIS METHOD IN A SUBCLASS.
   * @param array $keyValueArray
   */
  protected function preDelete($keyValueArray) {
    $resources = $this->getAllWhere($keyValueArray, 'e.*');
    if ($resources) {
      foreach ($resources as $resource) {
        if ($resource && file_exists($resource['file_path'] . $resource['file_name'])) {
          if (!@unlink($resource['file_path'] . $resource['file_name'])) {
            log_message('error', 'Could Not Delete: ' . $resource['file_path'] . $resource['file_name']);
          }
        }
        $thumbs[] = "_tiny";
        $thumbs[] = "_small";
        $thumbs[] = "_big";
        $thumbs[] = "_admin";
        foreach ($thumbs as $thumb) {
          $thumbPath = site_image_thumb_path($thumb, $resource);
          if (file_exists($thumbPath)) {
            @unlink($thumbPath);
          }
        }
      }
    }
  }


  /**
   *
   * Load and resize image
   * @param string $fieldName
   * @return integer
   */
  public function loadAndResizeImage($entityName, $fieldName = 'image') {
    $ci = &get_instance();
    
    if(!isset($ci->fileoperations)) {
      $ci->load->library('common/Fileoperations');
    }

    $folder = strtolower($entityName);
    
    $ci->fileoperations->set_base_dir('./web/images');
    $ci->fileoperations->add_folder_to_uploads_dir($folder);
    
    if ($ci->fileoperations->upload($fieldName, FALSE)) {
      $ci->load->config('thumbs');
      $image = ManagerHolder::get("Image")->createEntityFromArray($ci->fileoperations->file_info);
      $thumbs = $ci->config->item(strtolower($entityName . '_' . $fieldName), 'thumbs');
      if(!$thumbs){
        // for backward compatibility
        $thumbs = $ci->config->item(strtolower($entityName), 'thumbs');
      }
      $thumbs['_admin'] = $ci->config->item('_admin', 'all');
      if ($thumbs) {
        foreach($thumbs as $name => $sizes) {
          if(isset($sizes['smart_crop']) && $sizes['smart_crop']){
            $ci->fileoperations->createSmartCropThumb($image, $name, $sizes["width"], $sizes["height"]);
          } else {
            $ci->fileoperations->createImageThumb($image, $name, $sizes["width"], $sizes["height"]);
          }
        }
      }
      $image['id'] = ManagerHolder::get("Image")->insert($image);
      return $image;
    }
  }

}