<?php
/**
 * BroadcastManager
 * This class has been auto-generated by Itirra
 */
require_once APPPATH . 'logic/base/BaseManager.php';
class BroadcastManager extends BaseManager {

  /** Order By. */
  protected $orderBy = 'sent_date DESC';
  
  /** Fields */
  public $fields = array("subject" => array("type" => "input", "class" => "required", "attrs" => array("maxlength" => 255)),
                         "text" => array("type" => "tinymce", "class" => "required", "attrs" => array("maxlength" => 65536)),
                         "is_ajax_layout" => array("type" => "checkbox"),
  											 "bcc_email" => array("type" => "input", "class" => "email", "attrs" => array("maxlength" => 255)),
                         "recipents" => array("type" => "include", "path" => "includes/admin/parts/broadcast/recipents", "class" => ""));
  /** List params */
  public $listParams = array("subject", "recipents_count", "is_sent", "sent_date", "read_count", "link_visited_count");


  /**
   * Encoding id seed
   * Is used for encoding link ids
   * WARNING: if you change it, old links
   * won't be able to be inspected
   */
  private $encodingIdSeed = 'encodingIdSeed';


  /**
   * PreProcessWhereQuery.
   * OVERRIDE THIS METHOD IN A SUBCLASS TO ADD joins and other stuff.
   * @param Doctrine_Query $query
   * @return Doctrine_Query
   */
  protected function preProcessWhereQuery($query, $pref, $what = '*') {
    $query->addSelect("recipents.*")->leftJoin($pref . ".recipents recipents");
    if (strpos($what, 'links.') !== FALSE || $what == '*') {
      $query->addSelect("links.*")->leftJoin($pref . ".links links");
      $query->addSelect("visited_links.*")->leftJoin("recipents.visited_links visited_links");
    }
    return $query;
  }
  
  /**
   * Filter Values
   * @param string $filterName
   */
  public function getFilterValues($filterName) {
    if ($filterName == 'is_sent') {
      return array('1' => 'Да', '0' => 'Нет');
    }
  }


  /**
   * collectLinks
   * @param $text
   */
  public function collectLinks($text, $broadcastId){
    $links = array();
    $regexp = "<a\s[^>]*href=(\"??)(http[^\" >]*?)\\1[^>]*>";
    if(preg_match_all("/$regexp/i", $text, $matches)){
      if(!empty($matches[2])){
        // now let's make sure that no duplicate links will appear
        $urls = array();
        foreach($matches[2] as $url){
          $urls[$url] = true;
        }
        $urls = array_keys($urls);
        
        // creating link entities
        foreach($urls as $url){
          $link['url'] = $url;
          $link['id'] = ManagerHolder::get('BroadcastLink')->insert(array('url' => $url, 'broadcast_id' => $broadcastId));
          $links[] = $link;
        }
      }
    }
    return $links;
  }



  /**
   * processLinks
   * @param $text
   */
  public function processLinks($text, $entityId, $recipentId){
    $recipentId = $this->doEncodeId($recipentId);
    $links = ManagerHolder::get('BroadcastLink')->getAllWhere(array('broadcast_id' => $entityId));
    foreach($links as $key => $link){
      $linkId = $this->doEncodeId($link['id']);
      $newUrl = site_url(BROADCAST_LINK_BASE_URL . '?url=' . rawurlencode($link['url']) . '&l=' . rawurlencode($linkId) . '&r=' . rawurlencode($recipentId));
      $text = preg_replace(":" . preg_quote($link['url']) . "/?(?=\"):", $newUrl, $text);
    }
    return $text;
  }


  /**
   * addReadStatusItem
   * @param $message
   */
  public function addStatusItem($message, $recipentId){
    $recipentId = $this->doEncodeId($recipentId);
    $itemHtml = '<img src="' . site_url(BROADCAST_READ_CALLBACK_URL . '?r=' . rawurlencode($recipentId)) . '&i=blank.gif"/>';
    return $itemHtml . $message;
  }


  /**
   * getResultsReport
   * @param $entity
   */
  public function getResultsReport($entity){
    $result = array();
    foreach($entity['recipents'] as $recipent){
      $row = array();
      $row['recipent'] = $recipent['email'];
      $row['is_read'] = $recipent['is_read'];
      foreach($entity['links'] as $key => $link){
        $isRead = false;
        foreach($recipent['visited_links'] as $visitedLink){
          if($link['id'] == $visitedLink['id']){
            $isRead = true;
          }
        }
        $row['links'][] = $isRead;
      }
      $result[] = $row;
    }
    return $result;
  }



  /**
   * doEncodeId
   * @param $id
   */
  public function doEncodeId($id){
    return base64_encode($this->encodingIdSeed . $id);
  }


  /**
   * doDecodeId
   * @param $id
   */
  public function doDecodeId($encodedId){
    $str = base64_decode($encodedId);
    return str_replace($this->encodingIdSeed, '', $str);
  }
}