<?php if (!defined("BASEPATH")) exit("No direct script access allowed");
/**
 * SettingsManager
 * This class has been auto-generated by Itirra
 */
require_once APPPATH . 'logic/base/BaseManager.php';
class SettingsManager extends BaseManager {

  /** Order by */
  protected $orderBy = "group.name";

  /** Fields. */
  public $fields = array("k" => array("type" => "input", "class" => "required", "attrs" => array("maxlength" => 255)),
                         "name" => array("type" => "input", "class" => "required", "attrs" => array("maxlength" => 255)),
                         "v" => array("type" => "tinymce", "attrs" => array("maxlength" => 65535)),
                         "type" => array("type" => "select", "class" => "required", "options" => array("input" => "input", "textarea" => "textarea", "tinymce" => "tinymce", "image" => "image")),
                         "group" => array("type" => "select", "class" => "required", "relation" => array("entity_name" => "SettingsGroup")));

  /** List params. */
  public $listParams = array("name", "group.name");

  /**
   * SettingsManager
   * @param string $name
   * @param string $mode
   */
  public function SettingsManager($name = null, $mode = null) {
    // If the project has Pages - tie Setting to pages
  	if (file_exists("./app/logic/PageManager.php")) {
  	  unset($this->fields["group"]["class"]);
  	  $this->fields["page_id"] = array("type" => "select", "relation" => array("entity_name" => "Page"));
  	}
    parent::BaseManager($name = null, $mode = null);
  }

  /**
   * Get value by key
   * @param string $key
   * @return mixed
   */
  public function getValByKey($key) {
    $result = null;
    $dbRes = $this->getOneWhere(array('k' => $key));
    if (!empty($dbRes)) {
      $result = $dbRes['v'];
    }
    return $result;
  }

  /**
   * Get All Settings in array(k=>v) format.
   * @return array
   */
  public function getAllKV() {
    $settings = $this->getAll('k,v');
    $result = array();
    foreach ($settings as $key => $value) {
      $result[$value['k']] = $value['v'];
      unset($settings[$key]);
    }
    return $result;
  }

  /**
   * Get All Settings in group=> array(k=>v) format.
   * @return array
   */
  public function getAllKVGrouped() {
    $settings = $this->getAll();
    $result = array();
    foreach ($settings as $key => $value) {
      $setting = array($value['k'] => $value['v']);
      if (!isset($result[$value['group']['name']])) {
        $result[$value['group']['name']] = array();
      }
      $result[$value['group']['name']] = array_merge($result[$value['group']['name']], $setting);
      unset($settings[$key]);
    }
    return $result;
  }

}