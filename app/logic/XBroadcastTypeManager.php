<?php if (!defined("BASEPATH")) exit("No direct script access allowed");
/**
 * XBroadcastTypeManager
 * This class has been auto-generated by Itirra
 */
require_once APPPATH . 'logic/base/BaseManager.php';
class XBroadcastTypeManager extends BaseManager {

  /** Order by */
  protected $orderBy = "priority DESC";

  /** Fields. */
  public $fields = array("name" => array("type" => "input", "class" => "required", "attrs" => array("maxlength" => 255)),
                         "slug" => array("type" => "input", "class" => "required", "attrs" => array("maxlength" => 255)),
                         "utm_campaign" => array("type" => "input"),
                         "unsubscribe_url" => array("type" => "input"),
                         "priority" => array("type" => "input_integer"));

  /** List params. */
  public $listParams = array("name", "priority");

  /**
   * PostInsert.
   * OVERRIDE THIS METHOD IN A SUBCLASS.
   * @param array $entity
   */
  protected function postInsert($entity) {
    $this->processUsersBroadcastSettings($entity['id']);
  }

  /**
   * PostDelete.
   * OVERRIDE THIS METHOD IN A SUBCLASS.
   * @param array $keyValueArray
   */
  protected function postDelete($keyValueArray) {
    $this->processUsersBroadcastSettings($keyValueArray['id'], TRUE);
  }

  /**
   * processUsersBroadcastSettings
   * @param integer $typeId
   * @param bool  $delete
   */
  private function processUsersBroadcastSettings($typeId, $delete = FALSE) {
    $users = ManagerHolder::get('User')->getAll('id, broadcast_settings');
    foreach ($users as $u) {
      $broadcastSettings = json_decode($u['broadcast_settings'], TRUE);
      $broadcastSettings[$typeId] = 1;
      if ($delete) {
        unset($broadcastSettings[$typeId]);
      }
      $broadcastSettingsJson = ManagerHolder::get('User')->broadcastSettingsToJson($broadcastSettings);
      $updateQuery = sprintf('UPDATE user
                              SET broadcast_settings = \'%s\'
                              WHERE id = %s',
                              $broadcastSettingsJson, $u['id']);

      ManagerHolder::get('User')->executeNativeSQL($updateQuery);
    }
  }

}