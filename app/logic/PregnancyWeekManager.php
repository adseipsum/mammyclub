<?php if (!defined("BASEPATH")) exit("No direct script access allowed");
/**
 * PregnancyWeekManager
 * This class has been auto-generated by Itirra
 */
require_once APPPATH . 'logic/base/BaseManager.php';
class PregnancyWeekManager extends BaseManager {

  /** Order by */
  protected $orderBy = "number DESC";

  /** Fields. */
  public $fields = array("number" => array("type" => "select", "class" => "required"),
                         "name" => array("type" => "input", "class" => "required", "attrs" => array("maxlength" => 255)),
                         "email_subject" => array("type" => "input", "class" => "required", "attrs" => array("maxlength" => 255)),
                         "email_appeal" => array("type" => "input", "class" => "required", "attrs" => array("maxlength" => 255)),
                         "email_intro" => array("type" => "tinymce"),
                         "email_main_text" => array("type" => "tinymce", "attrs" => array("maxlength" => 65536)),
                         "email_outro" => array("type" => "tinymce"),
                         "products" => array("type" => "multipleselect", "relation" => array("entity_name" => "Product", "where_array" => array("not_in_stock" => FALSE, "published" => TRUE), "search" => TRUE, "sort" => TRUE)));

  /** List params. */
  public $listParams = array("number", "name");

  /**
   * Send pregnancy week e-mail
   * @param array $entity
   */
  public function sendPregnancyWeekEmail(&$user) {

    // New broadcast app logic
    if (BROADCAST_APP_PIPELINE_ENABLED == true) {
      $template = ManagerHolder::get('XBroadcastTemplate')->getPregnancyWeekTemplateForSingleSend($user['pregnancyweek_current_id']);
      if (!empty($template)) {
        try {
          $ci =& get_instance();
          $ci->load->library('BroadcastApp');
          $ci->broadcastapp->publishSingle($user['id'], $template['id']);
        } catch (Exception $e) {
          log_message('error', '[sendPregnancyWeekEmail] - Exception: ' . $e->getMessage());
        }
      }
      return;
    }

    if (!isset($user['auth_info']) || empty($user['auth_info'])) {
      $user = ManagerHolder::get('User')->getById($user['id'], 'e.*, auth_info.*');
    }
    $week = ManagerHolder::get('PregnancyWeek')->getById($user['pregnancyweek_current_id'], 'e.*, products.*');
    $article = ManagerHolder::get('PregnancyArticle')->getOneWhere(array('pregnancyweek_id' => $user['pregnancyweek_current_id']), 'e.*');

    // Insert broadcast data
    $broadcastData = array('subject' => $week['email_subject'],
                           'text' => $article['content'],
                           'recipients_count' => 1,
                           'read_count' => 0,
                           'link_visited_count' => 0,
                           'created_at' => date(DOCTRINE_DATE_FORMAT),
                           'type' => 'pregnancy_week_broadcast_single_letter');
    $broadcastId = ManagerHolder::get('MandrillBroadcast')->insert($broadcastData);

    // Create view data
    $viewData = array();
    $viewData['email_subject'] = !empty($week['email_subject']) ? $week['email_subject'] : '';
    $viewData['data']['email_intro'] = !empty($week['email_intro']) ? $week['email_intro'] : '';
    $viewData['data']['email_outro'] = !empty($week['email_outro']) ? $week['email_outro'] : '';
    $viewData['data']['email_appeal'] = !empty($week['email_appeal']) ? $week['email_appeal'] : '';
    $viewData['data']['message'] = $article['content'];
    if(strpos($week['email_main_text'], '{PRODUCTS}') !== FALSE) {
      $viewData['data']['message'] .= $week['email_main_text'];
    }

    $ci = &get_instance();
    $ci->load->helper('project_broadcast');

    // Process products
    $products = array();
    if(isset($week['products']) && !empty($week['products'])) {
      foreach ($week['products'] as $product) {
        $url = shop_url($product['page_url']);
        if (substr($url, -1) == '/') {
          $url = substr($url, 0 , -1);
        }
        $product['url_with_login_key'] = $url . '?' . LOGIN_KEY . '=' . $user['login_key'];
        $product['url_for_buy_button'] = $url . '?' . LOGIN_KEY . '=' . $user['login_key'] . '&' . REDIRECT_TO_CART_KEY . '=1';
        $products[] = $product;
      }
    }

    foreach ($viewData['data'] as &$data) {
      if (!empty($data)) {
        if(!empty($products)) {
          $data = ManagerHolder::get('ProductBroadcast')->process_product_broadcast_showcase($data, $products, $user);
        }
        $googleAnalData = array('utm_source'   => $week['number'] . '_week_preg',
                                'utm_medium'   => 'email',
                                'utm_campaign' => 'PWW');
        ManagerHolder::get('MandrillBroadcast')->addLoginKeyToLink($data, $user['login_key'], $googleAnalData);
        kprintfLettersContent($user, $viewData);
        if (strpos($data, '{UNSUBSCRIBE_LINK}') !== FALSE) {
          $unsubscribeLink = site_url('отписаться-от-рассылки?' . LOGIN_KEY . '=' . $user['login_key']);
          $data = str_replace('{UNSUBSCRIBE_LINK}', $unsubscribeLink, $data);
        }
      }

      ManagerHolder::get('MandrillBroadcast')->saveBroadcastLinks($data, $broadcastId);
    }

    // Insert recipient data
    $userData = array('email' => $user['auth_info']['email'],
                      'user_id' => $user['id'],
                      'is_read' => 0,
                      'is_send' => 0,
                      'data' => serialize($user),
                      'broadcast_id' => $broadcastId,
                      'updated_at' => date(DOCTRINE_DATE_FORMAT));
    $recipientId = ManagerHolder::get('MandrillBroadcastRecipient')->insert($userData);

    try {
      ManagerHolder::get('EmailMandrill')->setMetadata(array('broadcast_id' => $broadcastId,
                                                             'recipient_id' => $recipientId));
      ManagerHolder::get('EmailMandrill')->setTag('Single letter of pregnancy week broadcast');
      ManagerHolder::get('EmailMandrill')->sendTemplate($user['auth_info']['email'], 'pregnancy_week_broadcast/view', $viewData['data'], $viewData['email_subject']);
      log_message('info',  '[pregnancy_week_broadcast_single_letter] - Sending email to ' . $user['auth_info']['email'] . ' (recipient_id: ' . $recipientId . ') for broadcast: '  . $week['number'] . ' pregnancy week');
    } catch (Exception $e) {
      log_message('error', '[pregnancy_week_broadcast_single_letter] - Broadcast send error:' . $e->getMessage() . '; on email: ' . $user['auth_info']['email']);
    }

  }

  /**
   * PreProcessWhereQuery.
   * OVERRIDE THIS METHOD IN A SUBCLASS TO ADD joins and other stuff.
   * @param Doctrine_Query $query
   * @return Doctrine_Query
   */
  protected function preProcessWhereQuery($query, $pref, $what = "*") {
    $query = parent::preProcessWhereQuery($query, $pref, $what);
    if (strpos($what, 'products.') !== FALSE || $what == '*') {
      $query->addSelect("products_image.*")->leftJoin("products.image products_image");
    }
    return $query;
  }

}