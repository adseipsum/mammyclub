<?php if (!defined("BASEPATH")) exit("No direct script access allowed");
/**
 * SupplierRequestManager
 * This class has been auto-generated by Itirra
 */
require_once APPPATH . 'logic/base/BaseManager.php';
class SupplierRequestManager extends BaseManager {

  /** Name field. */
  protected $nameField = "id";

  /** Order by */
  protected $orderBy = 'execution_date DESC';

  /** Temp data */
  protected $tempData = array();

  /** Fields. */
  public $fields = array("code" => array("type" => "input", "class" => "readonly", "attrs" => array("maxlength" => 255, "readonly" => "readonly")),
                         "supplier_request_status" => array("type" => "select", "relation" => array("entity_name" => "SupplierRequestStatus")),
//                         "status" => array("type" => "enum"),
                         "store" => array("type" => "select", "class" => "required", "relation" => array("entity_name" => "Store")),
                         "receiver" => array("type" => "select", "relation" => array("entity_name" => "Store")),
                         "supplier" => array("type" => "input", "attrs" => array("maxlength" => 255)),
  		                   "execution_date" => array("type" => "date", "class" => "required"),
  		                   "ttn_code" => array("type" => "input", "attrs" => array("maxlength" => 255)),
                         "product_parameter_group" => array("type" => "array", "input-row-type" => "custom", "input-row-path" => "includes/admin/supplier_request/product_parameter_group_array_row"));

  /** List params. */
  public $listParams = array("code", array("store" => "name"), array("receiver" => "name"), "supplier", "execution_date", "ttn_code", "supplier_request_status.name");


  /**
   * Pre update where
   * @param array $keyValueArray
   * @param string $key
   * @param mixed $value
   */
  protected function preUpdateWhere($keyValueArray, $key, $value) {
    if (isset($keyValueArray['id']) && $key == 'supplier_request_status_id') {
      $dbEntity = ManagerHolder::get('SupplierRequest')->getById($keyValueArray['id'], 'supplier_request_status_id');
      if ($dbEntity) {
        $this->tempData['supplier_request_status_id'] = $dbEntity['supplier_request_status_id'];
      }
    }
  }

  /**
   * Pre update
   * @param entity $entity
   */
  protected function preUpdate(&$entity) {
    $dbEntity = ManagerHolder::get('SupplierRequest')->getById($entity['id'], 'supplier_request_status_id');
    if ($dbEntity) {
      $this->tempData['supplier_request_status_id'] = $dbEntity['supplier_request_status_id'];
    }
  }

  /**
   * Post update
   * @param array $entity
   */
  protected function postUpdate($entity) {
    if (isset($entity['id']) && !isset($entity['supplier_request_status_id'])) {
      $entity = ManagerHolder::get('SupplierRequest')->getById($entity['id'], 'supplier_request_status_id');
    }

    if (isset($this->tempData['supplier_request_status_id']) && $this->tempData['supplier_request_status_id'] != $entity['supplier_request_status_id']) {
      $fromStatus = ManagerHolder::get('SupplierRequestStatus')->getById($this->tempData['supplier_request_status_id'], 'e.*');
      $toStatus = ManagerHolder::get('SupplierRequestStatus')->getById($entity['supplier_request_status_id'], 'e.*');
      Events::trigger('SupplierRequest.changeStatus', array('id' => $entity['id'], 'from' => $fromStatus, 'to' => $toStatus));
    }
  }


  /**
   * Process status change
   * @param $supplierRequestId
   */
  public function processStatusChange($supplierRequestId) {
    $supplierRequest = ManagerHolder::get('SupplierRequest')->getById($supplierRequestId, 'e.status, product_parameter_group.*, supplier_request_status.*');
    if ($supplierRequest['supplier_request_status']['k'] == 'delivered_to_zammler') {
      if (!empty($supplierRequest['product_parameter_group'])) {
        foreach ($supplierRequest['product_parameter_group'] as $item) {
          if (!empty($item['siteorder_item_id'])) {
            $info = ManagerHolder::get('StoreReserve')->getReserveInfoBySiteOrderItemId($item['siteorder_item_id']);
            $siteOrderItem = ManagerHolder::get('SiteOrderItem')->getById($item['siteorder_item_id'], 'e.id, siteorder.shipment_store_id');
            if (!isset($siteOrderItem['siteorder']['shipment_store_id']) || empty($siteOrderItem['siteorder']['shipment_store_id'])) {
              continue;
            }
            $storeId = $siteOrderItem['siteorder']['shipment_store_id'];

            $needReserve = $info['siteorder_qty'] - $info['current']['qty'];
            if ($needReserve > 0 && isset($info['inventories'][$storeId]['free_qty']) && $info['inventories'][$storeId]['free_qty'] > 0) {
              if ($needReserve > $info['inventories'][$storeId]['free_qty']) {
                $needReserve = $info['inventories'][$storeId]['free_qty'];
              }

              $reserve = array();
              $reserve['store_id'] = $storeId;
              $reserve['siteorder_item_id'] = $item['siteorder_item_id'];

              $exists = ManagerHolder::get('StoreReserve')->existsWhere($reserve);
              if (!$exists) {
                $reserve['product_id'] = $item['product_id'];
                $reserve['product_group_id'] = $item['parameter_group_id'];
                $reserve['qty'] = $info['current']['qty'] + $needReserve;
                ManagerHolder::get('StoreReserve')->insert($reserve);
              } else {
                ManagerHolder::get('StoreReserve')->updateWhere($reserve, 'qty', $info['current']['qty'] + $needReserve);
              }

              ManagerHolder::get('StoreInventory')->updateProductStatuses();

            }
          }
        }
      }
    }
  }

  /**
   *
   * @param $productIds
   * @param $parameterGroupIds
   * @return array
   */
  public function getOnWayData($productIds = array(), $parameterGroupIds = array()) {
    $where = array();
    if (!empty($productIds)) {
      $where['product_id'] = $productIds;
    }
    if (!empty($parameterGroupIds)) {
      $where['parameter_group_id'] = $parameterGroupIds;
    }
    $where['supplier_request.supplier_request_status_id'] = array(SUPPLIER_REQUEST_STATUS_SHIPPED_ID, SUPPLIER_REQUEST_STATUS_DELIVERED_TO_POST_ID);

    $data = ManagerHolder::get('SupplierRequestProductParameterGroup')->getAllWhere($where, 'e.*,supplier_request.receiver_id');
    $result = array();
    if (!empty($data)) {
      foreach ($data as $v) {
        $receiverId = $v['supplier_request']['receiver_id'];

        if (isset($result[$v['product_id']][$v['parameter_group_id']][$receiverId])) {
          $result[$v['product_id']][$v['parameter_group_id']][$receiverId] += $v['qty'];
        } else {
          $result[$v['product_id']][$v['parameter_group_id']][$receiverId] = $v['qty'];
        }
      }
    }

    return $result;
  }

  /**
   * PreProcessWhereQuery.
   * OVERRIDE THIS METHOD IN A SUBCLASS TO ADD joins and other stuff.
   * @param Doctrine_Query $query
   * @return Doctrine_Query
   */
  protected function preProcessWhereQuery($query, $pref, $what = "*") {
  	$q = parent::preProcessWhereQuery($query, $pref, $what);
  	if (strpos($what, 'product_parameter_group.') !== FALSE || $what == '*') {
  		$q->addSelect('product.*')->leftJoin('product_parameter_group.product product');
  		$q->addSelect('parameter_group.*')->leftJoin('product_parameter_group.parameter_group parameter_group');
  		$q->addSelect('main_parameter_value.*')->leftJoin('parameter_group.main_parameter_value main_parameter_value');
  	}
  	return $q;
  }

  /**
   * PreInsert.
   * OVERRIDE THIS METHOD IN A SUBCLASS.
   * @param array $entity
   */
  protected function preInsert(&$entity) {
    $currentYearIndex = 1;
    $this->setOrderBy('id DESC');
    $lastItem = $this->getOneWhere(array(), 'e.*');
    if (!empty($lastItem)) {
      $lastItemCodeSections = explode('-', $lastItem['code']);
      if (count($lastItemCodeSections) > 1 && date('Y') == $lastItemCodeSections[0]) {
        $currentYearIndex = $lastItemCodeSections[1] + 1;
      }
    }
    $entity['code'] = date('Y') . '-' . $currentYearIndex;

    if ($entity['receiver_id'] instanceof Doctrine_Null || $entity['receiver_id'] == NULL) {
      $entity['receiver_id'] = ZAMMLER_STORE_ID;
    }

    if ($entity['supplier_request_status_id'] instanceof Doctrine_Null || $entity['supplier_request_status_id'] == NULL) {
      $entity['supplier_request_status_id'] = ManagerHolder::get('SupplierRequestStatus')->getIDByKey('new');
    }
  }

}