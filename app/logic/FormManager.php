<?php if (!defined("BASEPATH")) exit("No direct script access allowed");
/**
 * FormManager
 * This class has been auto-generated by Itirra
 */
require_once APPPATH . 'logic/base/BaseManager.php';
class FormManager extends BaseManager {

  /** Fields. */
  public $fields = array("name" => array("type" => "input", "class" => "required", "attrs" => array("maxlength" => 255)),
                         "type" => array("type" => "enum", "class" => "required"),
                         "title" => array("type" => "input", "class" => "required", "attrs" => array("maxlength" => 255)),
                         "text" => array("type" => "textarea", "class" => "charCounter", "attrs" => array("maxlength" => 5000)),
                         "placeholder_text" => array("type" => "textarea", "class" => "charCounter", "attrs" => array("maxlength" => 5000)),
                         "timeout" => array("type" => "input_integer"),
                         "published" => array("type" => "checkbox"),
                         "allowed_sections" => array("type" => "textarea", "class" => "charCounter", "attrs" => array("maxlength" => 5000)),
                         "articles" => array("type" => "multipleselect_chosen", "relation" => array("entity_name" => "Article")),
                         "article_categories" => array("type" => "multipleselect_chosen", "relation" => array("entity_name" => "ArticleCategory")));

  /** List params. */
  public $listParams = array("name", "type", "timeout", "published");

  /**
   * getActiveForms
   */
  public function getActiveForms() {

    $result = array();

    $nativeQ = 'SELECT f.id, f.name, f.type, f.title, f.text, f.placeholder_text, f.timeout, f.published, GROUP_CONCAT(DISTINCT acf.article_category_id) AS category_ids,
                CASE WHEN GROUP_CONCAT(TRIM(BOTH "/" FROM a.page_url)) IS NOT NULL
                THEN CONCAT(f.allowed_sections, ",", GROUP_CONCAT(DISTINCT TRIM(BOTH "/" FROM a.page_url)))
                ELSE f.allowed_sections
                END AS allowed_sections
                FROM form AS f
                LEFT JOIN article_form AS af ON (af.form_id = f.id)
                LEFT JOIN article AS a ON (af.article_id = a.id)
                LEFT JOIN article_category_form AS acf ON (acf.form_id = f.id)
                WHERE f.published = 1
                GROUP BY f.id';
    $forms = ManagerHolder::get($this->entityName)->executeNativeSQL($nativeQ);
    if(empty($forms)) {
      return $result;
    }

    // Pre process "allowed_sections" based on "category_ids"
    foreach ($forms as $k => $v) {
      $sections = explode(',', trim($v['allowed_sections'], ' ,'));
      if (!empty($v['category_ids'])) {
        $articleWhere = array('published' => TRUE, 'category_id' => array());
        $articleCategories = ManagerHolder::get('ArticleCategory')->getWhere(array(), 'id, name, page_url');
        $catIds = explode(',', $v['category_ids']);
        foreach ($catIds as $cId) {
          $this->categoryIdsLoop($articleCategories, $cId, $articleWhere['category_id']);
        }
        $articles = ManagerHolder::get('Article')->getAllWhere($articleWhere, 'page_url');
        if (!empty($articles)) {
          foreach ($articles as $a) {
            $sections[] = trim($a['page_url'], '/');
          }
        }
        $sections = array_unique($sections);
      }
      $forms[$k]['allowed_sections'] = $sections;
    }

    $pageUrl = surround_with_slashes(uri_string());

    // Filter the campaigns based on allowed_sections
    foreach ($forms as $k => $v) {
      if(empty($v['allowed_sections'])) {
        continue;
      }
      $matched = FALSE;
      foreach ($v['allowed_sections'] as $segment) {
        if($segment == '/') {
          if($segment == $pageUrl) {
            $matched = TRUE;
            break;
          }
          continue;
        }
        if(strpos($pageUrl, surround_with_slashes($segment)) !== FALSE) {
          $matched = TRUE;
          break;
        }
      }
      if($matched == FALSE) {
        unset($forms[$k]);
      }
    }
    if(empty($forms)) {
      return $result;
    }

    // Shuffle the forms
    if(count($forms) > 1) {
      $forms = shuffle_assoc($forms);
    }

    foreach ($forms as $f) {
      if ($f['type'] == FORM_FULLSCREEN && isset($_COOKIE[COOKIE_FORM_FULLSCREEN_CLOSED])) {
        continue;
      }
      if(!isset($result[$f['type']])) {
        $result[$f['type']] = $f;
      }
    }
    return $result;
  }

  /**
   * categoryIdsLoop
   * @param array $categories
   * @param integer $cId
   * @param array $result
   */
  private function categoryIdsLoop($categories, $cId, &$result) {
    $addAll = FALSE;
    if (empty($cId)) {
      $addAll = TRUE;
    }
    if (!empty($categories)) {
      foreach ($categories as $c) {
        if ($addAll == TRUE || $c['id'] == $cId) {
          $result[] = $c['id'];
          $this->categoryIdsLoop($c['__children'], null, $result);
        } else {
          $this->categoryIdsLoop($c['__children'], $cId, $result);
        }
      }
    }
  }

}